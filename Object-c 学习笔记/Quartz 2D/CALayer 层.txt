*使用CALayer

由于CALayer位于QuartzCore框架内，则在类实现目分必须导入QuartzCore框架
#import <QuartzCore/QuartzCore.h>

// 创建一个CALayer对象
CALayer *subLayer = [CALayer layer];
// 设置subLayer的背景颜色
subLayer.backgroundColor = [UIColor magentaColor].CGColor;
// 设置subLayer的圆角半径	
subLayer.cornerRadius = 8;
// 设置subLayer的边框宽度	
subLayer.borderWidth = 2;
// 设置subLayer的边框色	
subLayer.borderColor = [UIColor blackColor].CGColor;
// 设置subLayer的阴影偏移（此处向右下角投下阴影）
subLayer.shadowOffset = CGSizeMake(4, 5);
// 设置subLayer的阴影的模糊程度（该属性值越大，阴影越模糊）
subLayer.shadowRadius = 1;
// 设置subLayer的阴影的颜色	
subLayer.shadowColor = [UIColor blackColor].CGColor;
// 设置subLayer的阴影的透明度
subLayer.shadowOpacity = 0.8;
// 设置遮挡边界意外的子视图（同时会遮挡到阴影，使其不显示）
subLayer.masksToBounds = YES;
// 设置subLayer的大小和位置
subLayer.frame = CGRectMake(30, 30, 120, 160);
// 将subLayer添加到该视图控制器所显示的UIView上的CALayer
[self.view.layer addSublayer:subLayer];

// 再创建一个CALayer对象
CALayer *imageLayer = [CALayer layer];
// 设置该imageLayer显示的图片
imageLayer.contents = (id)[[UIImage imageNamed:@"android"] CGImage];
// 设置iamgeLayer的大小和位置
imageLayer.frame = subLayer2.bounds;
// 将imageLayer添加到subLayer中
[subLayer addSublayer:imageLayer];

// 设置CALayer的委托对象，该委托对象负责该CALayer的绘制
subLayer.delegate = self;
// 通知CALayer调用delegate的drawLayer方法
[customDrawn setNeedsDisplay];
// 重写该方法为CALayer绘制自定义内容
-(void)drawLayer:(CALayer *)layer
	inContext:(CGContextRef)context;


CALayer为动画支持提供如下方法：

// 为CALayer添加一个动画，第二个参数为该动画一定一个唯一标识符，保证CALayer可绑定多个动画
-(void)addAnimation:(CAAnimation *)
	forKey:(NSString *);

// 控制CALayer执行指定key所对应的动画
-(CAAnimation *)animationForKey:(NSString *);

// 删除该CALayer上指定key所对应的动画
-(void)removeAnimationForKey:(NSString *);

// 删除该CALayer上添加的所有动画
-(void)removeAllAnimations;

// 获取该CALayer上添加的所有动画key所对应的数组
-(NSArray *)animationKeys;



*使用CATransition控制过度动画

由于CATransition继承了CAAnimation，因此也指出CAAnimation的以下属性与方法：

removedOnCompletion;//该属性用于指定该动画完成时是否从目标CALayer上删除该动画

timingFunction;//该属性指定一个CAMediaTimingFunction对象，该对象负责控制动画变化的步长

如果需要自定义动画播放开始与结束的行为，则需要委托来实现：

CATransition对象.delegate = 委托对象;

并在委托对象中重写以下方法：

// 该动画开始时将会调用该方法
-(void)animationDidStart:(CAAnimation *)anim;

// 该动画结束时将会调用该方法
-(void)animationDidStop:(CAAnimation *)anim
	finished:(BOOL)flag;


// 首先创建2个过渡视图
UIView *magentaView = [[UIView alloc] initWithFrame:self.view.bounds];
magentaView.backgroundColor = [UIColor magentaColor];
[self.view addSubview:magentaView];
UIView* grayView = [[UIView alloc] initWithFrame:self.view.bounds];
grayView.backgroundColor = [UIColor lightGrayColor];
[self.view addSubview:grayView];

// 创建一个动画过渡
CATransition *transition = [CATransition animation];
// 设置动画时长，单位秒
transition.duration = 2.0f;
// 设置动画的起始进度，为0.0~1.0的浮点值
//transition.startProgress = 0.0f;
// 设置动画的终止进度，为0.0~1.0的浮点值
//transition.endProgress = 1.0f;
// 设置动画过渡的类型
// kCATransitionFade  渐隐效果
// kCATransitionMoveIn  移入效果
// kCATransitionPush  推入效果
// kCATransitionReveal  揭开效果
// @"cube"  立方体旋转效果
// @"suckEffect"  吸入效果
// @"oglFlip"  翻转效果
// @"rippleEffect"  水波动效果
// @"pageCurl"  揭开书页效果
// @"pageUnCurl"  放下书页效果
// @"cameraIrisHollowOpen"  照相机镜头打开效果
// @"cameraIrisHollowClose"  照相机镜头关闭效果
transition.type = kCATransitionMoveIn;
// 指定动画方向
// kCATransitionFromLeft  从左到右
// kCATransitionFromRight  从右到左
// kCATransitionFromTop  从上到下
// kCATransitionFromBottom  从下到上
transition.subtype = kCATransitionFromLeft;
// 为CALayer对象添加动画
[self.view.layer addAnimation:transition forKey:@"animation"];
// 交换视图控制器所显示的UIView中中2个子控件位置
// 由于视图控制器的视图属性类默认包含两个CALayer，因此后添加的子视图索引都从2开始
[self.view exchangeSubviewAtIndex:2 withSubviewAtIndex:3];


简单过渡动画：

// 开始执行动画
[UIView beginAnimations:@"animation" context:nil];
// 设置动画时长，单位秒
[UIView setAnimationDuration:1.0f];
// 控制UIView内过渡动画的类型
// UIViewAnimationTransitionNone  不是用动画
// UIViewAnimationTransitionFlipFromLeft  指定从左边滑入的动画过渡方式
// UIViewAnimationTransitionFlipFromRight  指定从右边滑入的动画过渡方式
// UIViewAnimationTransitionCurlUp  指定“翻开书页”的动画过渡方式
// UIViewAnimationTransitionCurlDown  指定“放下书页”的动画过渡方式
[UIView setAnimationTransition:UIViewAnimationTransitionCurlDown
	forView:self.view cache:YES];
// 设置动画的变化曲线
// UIViewAnimationCurveEaseInOut  动画由慢到快
// UIViewAnimationCurveEaseIn  动画逐渐变慢
// UIViewAnimationCurveEaseOut  动画逐渐变快
// UIViewAnimationCurveLinear  匀速动画
[UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
// 交换视图控制器所显示的UIView中中2个子控件位置
// 由于视图控制器的视图属性类默认包含两个CALayer，因此后添加的子视图索引都从2开始
[self.view exchangeSubviewAtIndex:2 withSubviewAtIndex:3];
// 提交动画
[UIView commitAnimations];




*CAPropertyAnimation 属性动画

// 创建一个CALayer对象
CALayer *imageLayer = [CALayer layer];
imageLayer.contents = (id)[[UIImage imageNamed:@"android"] CGImage];
[self.view.layer addSublayer:imageLayer];


// 创建位移的属性动画
CGPoint fromPoint = imageLayer.position;
CGPoint toPoint = CGPointMake(fromPoint.x + 80 , fromPoint.y);
// 创建不断改变CALayer的position属性的属性动画
CABasicAnimation* anim = [CABasicAnimation animationWithKeyPath:@"position"];
// 获取创建动画时指定的属性参数
//NSString* property = anim.keyPath;
// 设置动画开始的属性值
anim.fromValue = [NSValue valueWithCGPoint:fromPoint];
// 设置动画结束的属性值
anim.toValue = [NSValue valueWithCGPoint:toPoint];
// 设置动画时长，单位秒
anim.duration = 0.5;
// 设置动画结束后的位置
imageLayer.position = toPoint;
// 设置该属性动画是否以当前动画为基础
anim.additive = YES;
// 动画完成后删除该动画
anim.removedOnCompletion = YES;
// 为imageLayer添加动画
[imageLayer addAnimation:anim forKey:nil];



// 创建不断改变CALayer的transform属性的属性动画
CAKeyframeAnimation* anim = [CAKeyframeAnimation animationWithKeyPath:@"transform"];
// 设置CAKeyframeAnimation控制transform属性依次经过的属性值，相当于关键帧
anim.values = [NSArray arrayWithObjects:
	[NSValue valueWithCATransform3D:imageLayer.transform],
	[NSValue valueWithCATransform3D:CATransform3DScale(imageLayer.transform , 0.2, 0.2, 1)],
	[NSValue valueWithCATransform3D:CATransform3DScale(imageLayer.transform, 2, 2 , 1)],
	[NSValue valueWithCATransform3D:imageLayer.transform], nil];
// 设置动画时长，单位秒
anim.duration = 5;
// 动画完成后删除该动画
anim.removedOnCompletion = YES;
// 为imageLayer添加动画
[imageLayer addAnimation:anim forKey:nil];



// 同时添加多个属性动画
CGPoint fromPoint = imageLayer.position;
CGPoint toPoint = CGPointMake(280 , fromPoint.y + 300);
// 创建不断改变CALayer的position属性的属性动画	
CABasicAnimation* moveAnim = [CABasicAnimation animationWithKeyPath:@"position"];
// 设置动画开始的属性值	
moveAnim.fromValue = [NSValue valueWithCGPoint:fromPoint];
// 设置动画结束的属性值	
moveAnim.toValue = [NSValue valueWithCGPoint:toPoint];
// 动画完成后删除该动画
moveAnim.removedOnCompletion = YES;

// 创建不断改变CALayer的transform属性的属性动画	
CABasicAnimation* transformAnim = [CABasicAnimation animationWithKeyPath:@"transform"];
CATransform3D fromValue = imageLayer.transform;
// 设置动画开始的属性值
transformAnim.fromValue = [NSValue valueWithCATransform3D: fromValue];
// 创建缩放为X、Y两个方向上缩放为0.5的变换矩阵
CATransform3D scaleValue = CATransform3DScale(fromValue , 0.5 , 0.5, 1);
// 绕Z轴旋转180度的变换矩阵
CATransform3D rotateValue = CATransform3DRotate(fromValue, M_PI , 0 , 0 , 1);
// 计算两个变换矩阵的和
CATransform3D toValue = CATransform3DConcat(scaleValue, rotateValue);
// 设置动画结束的属性值	
transformAnim.toValue = [NSValue valueWithCATransform3D:toValue];
// 动画效果累加
transformAnim.cumulative = YES;
// 动画重复执行2次，旋转360度
transformAnim.repeatCount = 2;
// 设置动画时长，单位秒
transformAnim.duration = 3;
// 位移、缩放、旋转组合起来执行
CAAnimationGroup *animGroup = [CAAnimationGroup animation];
animGroup.animations = [NSArray arrayWithObjects:moveAnim, transformAnim ,nil];
// 设置组合动画时长，单位秒
animGroup.duration = 6;
// 为imageLayer添加动画
[imageLayer addAnimation:animGroup forKey:nil];





