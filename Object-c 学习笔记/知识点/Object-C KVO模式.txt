全称: Key Value Observing

在ios里，可以添加观察者模式，来实现某个property更改后，通知指定的类。

// 添加监听器: 
// object: 被观察对象
// observer: 观察对象
// forKeyPath: 里面带上property的name，如UIView的frame、center等等
// options: 有4个值，分别是:
// 	NSKeyValueObservingOptionNew 把更改之后的新值提供给处理方法
// 	NSKeyValueObservingOptionOld 把更改之前的旧值提供给处理方法
// 	NSKeyValueObservingOptionInitial 把初始化的值提供给处理方法，一旦注册，立马就会调用一次。通常它会带有新值，而不会带有旧值。
// 	NSKeyValueObservingOptionPrior 分2次调用。在值改变之前和值改变之后。
// 	注：0就代表不带任何参数进去
// context: 可以带入一些参数，其实这个挺好用的，任何类型都可以，自己强转就好了。


// 为item添加监听器，监听item的name属性的改变

[self.item addObserver:self

	forKeyPath:@"name"

	options:NSKeyValueObservingOptionNew

	context:nil];



// 重写该方法，当被监听的数据模型发生改变时，就会回调监听器的该方法

// 处理方法里:
// keyPath: 对应forKeyPath
// object: 被观察的对象
// change: 对应options里的NSKeyValueObservingOptionNew、NSKeyValueObservingOptionOld等
// context: 对应context

- (void)observeValueForKeyPath:(NSString *)keyPath
	ofObject:(id)object
	change:(NSDictionary *)change
	context:(void *)context

{

	NSLog(@"--observeValueForKeyPath方法被调用--");

	// 获取修改时所设置的数据

	NSLog(@"被修改的keyPath为:%@", keyPath);
	NSLog(@"被修改的对象为:%@", object);

	NSLog(@"新被修改的属性值为:%@", [change objectForKey:@"new"]);

	NSLog(@"被修改的上下文为:%@", context);

}



// 删除监听器

[self.item removeObserver:self
	forKeyPath:@"name"];
