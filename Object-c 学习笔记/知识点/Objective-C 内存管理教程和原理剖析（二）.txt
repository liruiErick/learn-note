二 口诀与范式

1).口诀。

1.1).谁创建，谁释放（类似于“谁污染，谁治理”）。如果你通过alloc、new或copy来创建一个对象，那么你必须调用release或autorelease。换句话说，不是你创建的，就不用你去释放。
例如，你在一个函数中alloc生成了一个对象，且这个对象只在这个函数中被使用，那么你必须在这个函数中调用release或autorelease。如果你在一个class的某个方法中alloc一个成员对象，且没有调用autorelease，那么你需要在这个类的dealloc方法中调用release；如果调用了autorelease，那么在dealloc方法中什么都不需要做。

1.2).除了alloc、new或copy之外的方法创建的对象都被声明了autorelease。

1.3).谁retain，谁release。只要你调用了retain，无论这个对象是如何生成的，你都要调用release。有时候你的代码中明明没有retain，可是系统会在默认实现中加入retain。不知道为什么苹果公司的文档没有强调这个非常重要的一点，请参考范式2.7。

2).范式。
范式就是模板，就是依葫芦画瓢。由于不同人有不同的理解和习惯，我总结的范式不一定适合所有人，但我能保证照着这样做不会出问题。

2.1).创建一个对象。

ClassA *obj1 = [[ClassA alloc] init];

2.2).创建一个autorelease的对象。

ClassA *obj1 = [[[ClassA alloc] init] autorelease];

2.3).Release一个对象后，立即把指针清空。（顺便说一句，release一个空指针是合法的，但不会发生任何事情）

[obj1 release];

obj1 = nil;

2.4).指针赋值给另一个指针。

ClassA *obj2 = obj1;

[obj2 retain];

//do something

[obj2 release];

obj2 = nil;

2.5).在一个函数中创建并返回对象，需要把这个对象设置为autorelease

ClassA *Func1()
{
	ClassA *obj = [[[ClassA alloc]init]autorelease];
	return obj;
}

2.6).在子类的dealloc方法中调用基类的dealloc方法

-(void) dealloc
{
	…
	[super dealloc];
}

2.7).在一个class中创建和使用property。

2.7.1).声明一个成员变量。

ClassB *objB;

2.7.2).声明property，加上retain参数。

@property (retain) ClassB* objB;

2.7.3).定义property。

@synthesize objB;

2.7.4).除了dealloc方法以外，始终用.操作符的方式来调用property。

self.objB 或者objA.objB

2.7.5).在dealloc方法中release这个成员变量。

[objB release];

示例代码如下：

@interface ClassA : NSObject
{
	ClassB* objB;
}

@property (retain) ClassB* objB;

@end


@implementation ClassA

@synthesize objB;

-(void) dealloc
{
	[objB release];
	[super dealloc];
}

@end

2.7.6).给这个property赋值时，有手动release和autorelease两种方式。

void funcNoAutorelease()
{
	ClassB *objB1 = [[ClassB alloc]init];
	ClassA *objA = [[ClassA alloc]init];
	objA.objB = objB1;//实际上因为这里属性创建时设置的是（retain），所以赋值时objB1的引用计数+1，retainCount为2
	[objB1 release];
	[objA release];
}

void funcAutorelease()
{
         ClassB *objB1 = [[[ClassB alloc]init] autorelease];
         ClassA *objA = [[[ClassA alloc]init] autorelease];
         objA.objB = objB1;
}

在这里解释一下@property (retain) ClassB* objB;和@synthesize objB;背后到底发生了什么(retain property的默认实现)。
property实际上是getter和setter，针对有retain参数的property，背后的实现如下：

@interface ClassA : NSObject
{
	ClassB *objB;
}

-(ClassB *) getObjB;

-(void) setObjB:(ClassB *) value;

@end

 
@implementation ClassA

-(ClassB*) getObjB
{
	return objB;
}

-(void) setObjB:(ClassB*) value
{
	if (objB != value)
	{
		[objB release];
		objB = [value retain];
         }
}

在setObjB中，如果新设定的值和原值不同的话，必须要把原值对象release一次，这样才能保证retain count是正确的。

由于我们在class内部retain了一次（虽然是默认实现的），所以我们要在dealloc方法中release这个成员变量。

-(void) dealloc
{
	[objB release];
	[super dealloc];
}