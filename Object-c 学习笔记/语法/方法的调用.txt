消息是什么呢？大家都知道，程序代码之间是不存在“默契”一说的，一个对象需要目标对象做特定事情时，就一定要通知到这个对象，这个通知就是一条消息。

让我们来看看消息的具体写法，现在有一个名为ObjClass的类，当我们需要调用其名为hello的静态方法时，就会编写这样一行代码：
[ObjClass hello];
 
在AS3中，等同的写法是：
ObjClass.hello();

//ObjClass的类文件中
+(void) hello:(id)target text:(NSString*)text
{
	//如果第二个参数是字符串类型的text
}
+(void) hello:(id)target type:(int)type
{
	//如果第二个参数是整数类型的type
}

//传递字符串text时
[ObjClass hello:me text:@"hello!"];

//传递整型type时
[ObjClass hello:me type:123];

没错，Obj-C中的参数传递是显式的，除第一个参数以外，其他参数传递时均要附上参数名，不同的参数实际上调用了不同的方法。

现在我们已经可以使用消息机制调用类方法（静态方法），调用一个对象的方法（实例方法）也是同样的语法，但必须先创建一个对象。

依旧以刚才的ObjClass为例，我们现在需要创建一个他的对象（实例），在AS3中使用的是new关键字：

var instance:ObjClass=new ObjClass(); 
而在Obj-C中，最基本的做法则是使用一条嵌套的消息：

ObjClass instance=[[ObjClass alloc] init]; 
首先使用类方法alloc为ObjClass对象分配内存（alloc方法返回这个新对象），然后对调用这个新对象的init方法。

也可以自行编写带参数的init方法，依旧是一样的调用方式：

ObjClass instance=[[ObjClass alloc] initWithArg:参数]; 
由于这样的灵活性，还可以方便编写工厂方法（实质是一个类方法）：

ObjClass instance=[ObjClass objWithArgs:参数]; 
在著名的开源obj-c游戏框架“cocos2D”中，我们这样新建对象：

CCNode instance=[CCNode node]; 
也是同样的道理，使用类方法node完成初始化工作，然后返回初始化完毕的新对象。



