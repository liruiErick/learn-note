cc.view.adjustViewPort(true);

// 前两个参数是代码中使用的游戏分辨率。
// 第三个参数就是你选择的适配方案。引擎中内置了5种适配方案，每种都有自己独特的行为，详见下文。
cc.view.setDesignResolutionSize(960, 640, cc.ResolutionPolicy.SHOW_ALL);

cc.view.setResolutionPolicy(cc.ResolutionPolicy.SHOW_ALL); // 也可以单独设置 Resolution Policy

cc.view.resizeWithBrowserSize(true); // 设置舞台是否根据浏览器窗口大小自动调整自身大小
	
// 单独设置浏览器窗口大小调整是的回调
cc.view.setResizeCallback(function() {
	// 做任何你所需要的游戏内容层面的适配操作
	// 比如说，你可以针对用户的移动设备方向来决定所要应用的适配模式
});




* 系统预设适配模式

1. SHOW_ALL (PROPORTION_TO_FRAME + SHOW_ALL)

ShowAll

SHOW_ALL模式会尽可能按原始宽高比放大游戏世界以适配外框(Frame)，同时使得游戏内容全部可见，所以浏览器宽高比不同于游戏宽高比时，窗口中会有一定的留白。留白部分的颜色或背景可以通过设置外框的CSS属性来修改。


2. NO_BORDER (EQUAL_TO_FRAME + NO_BORDER)

NoBorder

NO_BORDER模式会尽可能按原始宽高比放大游戏世界以适配外框，并且保证不留空白。所以浏览器宽高比不同于游戏宽高比时，游戏世界会被部分切割。同时，在这种情况下，cc.visibleRect代表的就是Canvas在游戏世界中的视窗，大小比cc.winSize要小一些。


3. EXACT_FIT (EQUAL_TO_FRAME + EXACT_FIT)

ExactFit

EXACT_FIT模式会忽略原始宽高比放大游戏世界以完全适应外框，所以浏览器宽高比不同于游戏宽高比时，游戏世界会被一定程度拉伸。


4. FIXED_WIDTH (EQUAL_TO_FRAME + FIXED_WIDTH)

FixedWidth

FIXED_WIDTH模式会横向放大游戏世界以适应外框的宽度，纵向按原始宽高比放大。结果有两种可能，类似与SHOW_ALL模式的结果（如图），或者类于NO_BORDER模式。它与前面两种模式的差别在于，在FIXED_WIDTH模式下游戏世界坐标系等同于Canvas元素坐标系，并且Canvas元素必然占满整个外框。

注意图中情况下与SHOW_ALL模式的区别，此时Canvas大小是整个外框大小，所以可显示内容区域实际上比SHOW_ALL模式更多。


5. FIXED_HEIGHT (EQUAL_TO_FRAME + FIXED_HEIGHT)

FixedHeight

与前一个模式相反，FIXED_HEIGHT模式会纵向放大游戏世界以适应外框的高度，横向按原始宽高比放大。结果同上。

在这个模式下，与NO_BORDER模式的区别是此时游戏世界坐标系和大小等同于Canvas坐标系。




* 开发者自定义适配模式

1. 用系统预设策略来构建适配模式

如你所看到的，所有预设模式都是预设策略的组合，你也可以做到同样的事情，系统预设策略如下所示：

Container strategies: 容器适配策略

cc.ContainerStrategy.EQUAL_TO_FRAME: 使容器大小等同于外框
cc.ContainerStrategy.PROPORTION_TO_FRAME: 使容器大小按原始宽高比放大以适应外框
cc.ContainerStrategy.ORIGINAL_CONTAINER: 原始容器大小

Content strategies 内容适配策略

cc.ContentStrategy.SHOW_ALL
cc.ContentStrategy.NO_BORDER
cc.ContentStrategy.EXACT_FIT
cc.ContentStrategy.FIXED_WIDTH
cc.ContentStrategy.FIXED_HEIGHT

要构建一个自定义适配模式，只需要使用下面的示例代码：

var policy = new cc.ResolutionPolicy(cc.ContainerStrategy.PROPORTION\_TO\_FRAME, cc.ContentStrategy.EXACT\_FIT);
cc.view.setDesignResolutionSize(320, 480, policy);

上面这个示例的适配模式将与SHOW_ALL模式的表现完全相同。


2. 实现自己的容器/内容适配策略

如果你不满足于系统预设的适配策略，你甚至可以实现自己的策略来满足你的任何需求。

继承容器适配策略的方法：

var MyContainerStg = cc.ContainerStrategy.extend({
    preApply: function (view) {
        // 这个函数将在适配策略前被调用，如果你的策略不需要，可以去除这个函数。
    },
 
    apply: function (view, designedResolution) {
        // 适配过程
    },
 
    postApply: function (view) {
        // 这个函数将在适配策略后被调用，如果你的策略不需要，可以去除这个函数。
    }
});

继承内容适配策略的方法：

var MyContentStg = cc.ContentStrategy.extend({
    preApply: function (view) {
        // 这个函数将在适配策略前被调用，如果你的策略不需要，可以去除这个函数。
    },
 
    apply: function (view, designedResolution) {
        var containerW = cc.canvas.width, containerH = cc.canvas.height;
 
        // 计算游戏世界大小，以及相对于设计分辨率的x轴比例和y轴比例
 
        return this._buildResult(containerW, containerH, contentW, contentH, scaleX, scaleY);
    },
 
    postApply: function (view) {
        // 这个函数将在适配策略后被调用，如果你的策略不需要，可以去除这个函数。
    }
});

最后，你就可以使用自定义策略来构建一个适配模式：

var policy = new cc.ResolutionPolicy(new MyContainerStg(), new MyContentStg());
cc.view.setDesignResolutionSize(320, 480, policy);




* Web引擎与原生引擎的差异

在原生引擎中，由于应用总是占据整个游戏窗口或在移动端占用全屏幕空间，我们沿用了Cocos2d-x中的屏幕适配方案，cc.view中的API一致，但是不提供Web引擎中的高级适配功能，下面是区别列表：

原生引擎只提供默认的5中适配策略。
容器适配策略和内容适配策略在原生引擎中都不存在，不能够自由组合。
不能够通过继承实现用户容器适配策略和内容适配策略。

