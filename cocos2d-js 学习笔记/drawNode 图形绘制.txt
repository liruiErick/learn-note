// 获取绘制对象
var drawNode = target.drawNode;

// 首先清除上一帧的绘制内容
drawNode.clear();

// 绘制一条线段
drawNode.drawSegment(start, end, 1, cc.color(0, 255, 0, 255));
// 参数1：表示起始点
// 参数2：表示结束点
// 参数3：表示线段的宽度
// 参数4：表示线段的颜色

// 绘制一个矩形
drawNode.drawRect(cc.p(l, b), cc.p(r, t), fillColor, 1, lineColor);
// 参数1：表示左下角的坐标
// 参数2：表示右上角的坐标
// 参数3：表示填充色
// 参数4：表示边框宽度
// 参数5：表示边框色

// 绘制一个多边形
var triangle = [cc.p(-100, -100), cc.p(100, -100), cc.p(0, 100)];
drawNode.drawPoly(triangle, color, 3, color);
// 参数1：表示构成多边形的顶点集合
// 参数2：表示多边形的填充色。如果没有填充色，则传入null
// 参数3：表示多边形边框宽度
// 参数4：表示多边形边框颜色

// 绘制一个实心圆
draw.drawDot(center, radius, cc.color(0, 255, 0, 255));
// 参数1：表示中心点
// 参数2：表示半径
// 参数3：表示颜色

// 绘制一个空心圆
draw.drawCircle(center, radius, radian, 4, false, 6, cc.color(0, 255, 0, 255));
// 参数1：表示中心点
// 参数2：表示半径
// 参数3：表示旋转的弧度。0度为3点钟方向，弧度旋转方向为顺负逆正
// 参数3：表示圆环由几个顶点构成
// 参数3：表示是否绘制中心点到圆环起始点的连线。起始点默认在0度位置
// 参数3：表示圆环粗细
// 参数7：表示颜色

// 绘制二次方贝塞尔曲线
draw.drawQuadBezier(start, control, end, 50, 2, cc.color(255, 0, 255, 255));
// 参数1：表示起始点
// 参数2：表示控制点
// 参数3：表示结束点
// 参数4：暂不明确
// 参数5：表示曲线宽度
// 参数6：表示颜色

// 绘制三次方贝塞尔曲线
draw.drawCubicBezier(start, control1, control2, end, 50, 2, cc.color(255, 0, 255, 255));
// 参数1：表示起始点
// 参数2：表示第一个控制点
// 参数3：表示第二个控制点
// 参数4：表示结束点
// 参数5：暂不明确
// 参数6：表示曲线宽度
// 参数7：表示曲线颜色


// 绘制多次方曲线
var vertices4 = [
	cc.p(centerPos.x - 130, centerPos.y - 130),
	cc.p(centerPos.x - 130, centerPos.y + 130),
	cc.p(centerPos.x + 130, centerPos.y + 130),
	cc.p(centerPos.x + 130, centerPos.y - 130),
	cc.p(centerPos.x - 130, centerPos.y - 130)
];
draw.drawCardinalSpline(vertices4, 1, 100, 2, cc.color(255, 255, 255, 255));
// 参数1：表示构成曲线的顶点集合，第一个点和最后一个点分别表示起始点和结束点，其余的点都为控制点
// 参数2：貌似是设置曲线的弯曲系数。如果等于1，则曲线全部变为直线。如果小于1，则曲线向外弯曲。如果大于1，则曲线向内弯曲
// 参数3：表示绘制曲线所使用顶点数。数值越小，曲线越拐角越多。数值越大，曲线越平滑
// 参数6：表示曲线宽度
// 参数7：表示曲线颜色


