*语句

for(var i:int=0;i<10;i++)
{
    break;打破for循环
    continue;结束这次循环,进行下次循环
}

当两个或多个for语句镶套时,在第一个for语句前加入标记，用break指向标记,可达到直接跳出标记循环的目的,如:
label:for(??){for(??){break label;}};
用continue指向标记,可达到直接跳至标记循环且继续该循环的目的,如:
label:for(??){for(??){continue label;}};

switch(变量)
{
    case 变量等于的内容:
    //执行的语句;
    break;
    default:
    //都不满足时执行的语句;
}

while (true)
{
    trace("真");//条件满足则无限循环
}

if(A) return;A为真时,可以阻止函数继续向下运行

简易if else语句
条件?满足时执行的语句:不满足时执行的语句
比如:a<b?-1:1

try{语句}
catch(error:Error){trace(error)} 
如果语句产生错误,则输出错误信息

*函数

Function类有两个方法,用于改变函数的this目标:

var obj1:Object=new Object();
var obj2:Object=new Object();

obj1.fun=function(arg1,arg2){trace(this);};//输出obj1

call()是针对固定参数个数的函数:
obj1.fun.call(obj2,arg1,arg2);//输出obj2

apply()是针对不定个数参数函数:
var arr:Array=[arg1,arg2,arg3];
obj1.fun.apply(obj2,arr);//输出obj2

*函数参数的两种特殊形式：

1) arguments 只能在函数体内使用，表示函数所有参数的一个数组，arguments.length表示参数的个数，arguments.callee表示对函数自身的引用。

2) ...rest 参数，可以接收任意数量的参数，必须是最后声明的参数，和arguments用法相同，但是没有arguments.callee功能

*运算符

is运算符:用来测试变量或表达式是否为给定的数据类型，并返回布尔值。(以前为 instanceof )

例如:
var mySprite:Sprite = new Sprite();
trace(mySprite is Sprite); // true
trace(mySprite is DisplayObject); // true
trace(mySprite is IEventDispatcher); // true

as运算符:可用来检查表达式是否为给定数据类型。但是，与is运算符不同的是，as运算符不返回布尔值，而是返回表达式的值(代替true)或null(代替false)。在使用as运算符时，右侧的操作数必须是数据类型。如果尝试使用表达式(而非数据类型)作为右侧的操作数，将会产生错误。

例如:
var mySprite:Sprite = new Sprite();
trace(mySprite as Sprite); // [Sprite对象]
trace(mySprite as DisplayObject); // [Sprite对象]
trace(mySprite as IEventDispatcher); // [Sprite对象]
trace(mySprite as Number); // null

typeof运算符:用法为typeof expression，计算表达式expression并返回其数据类型的字符串。结果限制在6个可能的字符串值：boolean、function、number、object、string和xml。如果向用户定义的类应用此运算符，则结果为字符串object。

例如:
var mySprite:Sprite = new Sprite();
var myNumber:Number;
trace(typeof mySprite); // object
trace(typeof myNumber); // number

in运算符:将“属性名”指定为第一个操作数，并将“对象”指定为第二个操作数。如果“属性名”是“对象”的属性，则值为true，否则为false。如果指定的对象是Array对象，则可以使用in运算符来检查特定的索引编号是否有效。如果向第一个操作数传递整数，那么，当索引位于有效的索引编号范围内时，结果为true，否则为false。

例如:
trace("PI" in Math); // true
trace("myProperty" in Math); // false 
var myArray:Array = ["a", "b", "c"];
trace(0 in myArray); // 0 是 myArray 对象中的有效索引编号，返回true
trace(1 in myArray); // 1 是 myArray 对象中的有效索引编号，返回true
trace(2 in myArray); // 2 是 myArray 对象中的有效索引编号，返回true
trace(3 in myArray); // 3 不是 myArray 对象中的有效索引编号，返回false