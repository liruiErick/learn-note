数组类

var array:Array=new Array(参数);如果参数为一个正整数，则创建相应个数的空元素，否则代表传入数组的值

array=[];初始化数组

array=[A,B,C];将ABC三个对象依次加入数组

array.length;返回数组所含对象数量,如果传入的数字小于长度,则会截去超出部分

trace(array);显示数组内所有对象名称

trace(array[0]);显示数组内最头部对象名称,即第一个加入的对象

array.push(A);将A加入数组放入尾部

array.unshift(A);将A加入数组放入头部

变量=array.pop();将数组尾部对象移出,改变原数组,并可以将移出对象赋予变量

变量=array.shift();将数组头部对象移出,改变原数组,并可以将移出对象赋予变量

变量=array.splice(0,1);在数组中第1个对象位置,去除1个对象(即去除第一个对象),改变原数组,并可以将移出对象赋予变量

变量=array.splice(1,0,A);在数组中第2个对象位置,去除0个对象,并插入对象A,改变原数组,并可以将移出对象赋予变量

变量=array.slice(0,5);截取从第1个对象开始(包括第1个)到第5个对象结束(不包括第5个),并赋予变量,参数可为负数,能够从倒数开始截取,不改变原数组,将截取对象赋予变量

array.indexOf(A);返回A所在的位置索引,未找到则返回-1

array.join();多用于字符数组,将数组中每个元素以逗号隔开,并返回改字符串,如果传入"a",则在数组的每个对象之间插入字符a,如果传入""，则相当于将每个元素相连

array.forEach(循环函数,this对象);让数组内每个对象循环运行函数,函数必须包含3个参数(对象:*,索引:int,数组:Arrays)

array.reverse();将原数组倒序排列,同时返回一个新数组

array.sort();排序数组,传入一个常数,则按对应规则排序,传入一个函数,则按函数规则排序

array.sort(16);为由小到大排列

array.sort(比较函数);函数有两个参数A和B,让A在B前返回-1,让A在B后返回1,A=B返回0

*数组标签

1 或者 CASEINSENSITIVE;排序时忽略大小写

2 或者 DESCENDING;使数组由高到低排序

4 或者 UNIQUESORT;如果发现有相等元素,则排序函数终止

8 或者 RETURNINDEXEDARRAY;让排序函数返回一个以排序的数组,并不会改变原数组

16 或者 NUMERIC;用于排序数字,由小到大

使用格式如:array.sort(比较函数,Array.NUMERIC|Array.DESCENDING);按数字,由大到小排序

array.sortOn();第一个参数可以传入一个字符串,代表数组中元素的公共属性,也可以传入一个数组,数组中包含若干写成字符串的公共属性,第一个为第一排序属性,第二个为第二排序属性,以此类推

array.sortOn(["属性名"],Array.NUMERIC);用于比较数组中对象的属性,按数字由小到大排序

array.sortOn(["属性名"],Array.CASEINSENSITIVE);用于比较数组中对象的属性,按字符由a到z排序

A=B.concat(C);A数组变成BC数组的副本,即将BC数组中的元素排列赋予A

A=B;将B数组赋予A,此时AB数组关联,修改A数组后,B数组随之改变,反之亦然(但直接赋值null或[]不会改变关联数组)

*数组同样也可以设置属性

var array:Array=new Array();

array.a=1;
array["b"]=2;

trace(array.length);//0
trace(array["a"]);//1
trace(array.b);//2



var vector:Vector.<类型>=new Vector.<类型>();创建一个向量,只能储存指定类型的数组,效率比数组要高,用法和数组基本相同

var vector:Vector.<int>=new <int>[3,4,5,6];在创建时为其赋值

vector.push("a","b","c");向量赋予多个元素

vector.fixed=true;锁定向量内的元素数量,不可以再添加元素,也可以在构造器函数中定义:new Vector.<类型>(限定数量,true)

var vector:Vector.<Number>=new <Number>[3.2,4.5,5.1,6.323];

var vector1:Vector.<int>=Vector.<int>(vector);向量间的类型转换


