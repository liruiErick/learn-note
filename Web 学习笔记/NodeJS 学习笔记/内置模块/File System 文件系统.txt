# File System 文件系统

NodeJS 通过fs 内置模块提供对文件的操作。fs 模块提供的API 基本上可以分为以下三类：

文件属性读写。
其中常用的有 fs.stat、fs.chmod、fs.chown 等等。

文件内容读写。
其中常用的有 fs.readFile、fs.readdir、fs.writeFile、fs.mkdir 等等。

底层文件操作。
其中常用的有 fs.open、fs.read、fs.write、fs.close 等等。

NodeJS 最精华的异步IO 模型在fs 模块里有着充分的体现，例如上边提到的这些API 都通过回调函数传递结果。

var fs = require('fs');

// 读取指定路径的文件
fs.readFile(pathname, function (err, buffer) {
    if (err) {
        //Deal with error.
    } else {
        //Deal with data.
    }
});

// 将buffer写入指定路径的文件
fs.writeFile(pathname, buffer, function (err) {
    if (err) {
        //Deal with error.
    }
});

基本上所有fs 模块API 的回调参数都有两个。
第一个参数在有错误发生时等于异常对象，第二个参数始终用于返回API 方法执行结果。

此外，fs 模块的所有异步API 都有对应的同步版本，用于无法使用异步操作时，或者同步操作更方便时的情况。
同步API 除了方法名的末尾多了一个 Sync 之外，异常对象与执行结果的传递方式也有相应变化。
同样以fs.readFileSync 为例：

try {
    var data = fs.readFileSync(pathname);
    //Deal with data.
} catch (err) {
    //Deal with error.
}


// 判断文件是否存在
fs.existsSync(pathname);




