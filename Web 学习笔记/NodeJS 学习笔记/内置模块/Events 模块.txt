# Events 模块

var EventEmitter = require('events').EventEmitter;

var eventer = new EventEmitter();

eventer.on('自定义事件', function(data) {}); // 监听自定义事件

eventer.emit('自定义事件', data); // 派发自定义事件。第二个参数为传入的参数。返回值为一个布尔值，表示事件对象是否监听了该事件。

注意，官方建议，对同一个事件不要注册超过10个监听器，否则会发出警告，因为太多的监听器可能会导致内存泄露。
但是我们可以修改事件监听注册的最大数，这样可以消除程序的警告：
eventer.setMaxListeners(11);

移除事件监听
eventer.removeListener('自定义事件', eventHandle); // 移除指定的事件监听器
eventer.removeAllListener('自定义事件'); // 移除指定事件的所有监听器。如果不传参数，则移除全部的事件监听器

eventer.listeners('自定义事件'); // 返回事件对象上注册的监听器所组成的数组

通过静态方法获取事件对象上注册的监听器的数量
EventEmitter.listenerCount(eventer, '自定义事件');






