# Http 模块

var http = require('http');

单实现一个 HTTP 服务器。

http.createServer(function (request, response) {
    response.writeHead(200, { 'Content-Type': 'text-plain' });
    response.end('Hello World\n');
}).listen(8124, "127.0.0.1");

以上程序创建了一个HTTP 服务器并监听8124端口，打开浏览器访问该端口
http://127.0.0.1:8124/就能够看到效果。

例子所示，首先需要使用 .createServer 方法创建一个服务器，然后调用 .listen 方法监听端口。
之后，每当来了一个客户端请求，创建服务器时传入的回调函数就被调用一次。可以看出，这是一种事件机制。


HTTP 请求本质上是一个数据流，由请求头（headers）和请求体（body）组成。
例如以下是一个完整的HTTP 请求数据内容。

POST / HTTP/1.1
User-Agent: curl/7.26.0
Host: localhost
Accept: */*
Content-Length: 11
Content-Type: application/x-www-form-urlencoded


HTTP 响应本质上也是一个数据流，同样由响应头（headers）和响应体（body）组成。
例如以下是一个完整的HTTP 请求数据内容。

HTTP/1.1 200 OK
Content-Type: text/plain
Content-Length: 11
Date: Tue, 05 Nov 2013 05:31:38 GMT
Connection: keep-alive


## get / request

http.request(option[, callback]); // 提交一个请求

提交一个评论请求
var req = http.request({
    hostname: 'www.vrwanjia.cn',
    port: 80,
    path: '/course/document',
    method: 'post',
    headers: {} // 请求头
}, function(res) {
    res.statusCode; // 请求状态码
    res.headers; // 请求头

    // 监听数据流
    res.on('data', function(chunk) {
        chunk; // 数据流对象
    });

    // 监听数据流结束
    res.on('end', function() {
        // 请求结束
    });
});

// 监听请求错误
req.on('error', function(e) {
    e.message; // 请求错误信息
});

req.write(data); // 传入请求要写入的信息对象
req.end(); // 结束请求

请求一个数据
http.get(url, function(res) {
    var html = '';
    // 监听数据流
    res.on('data', function(data) {
        html += data;
    });

    // 监听数据流结束
    res.on('end', function() {
        // 请求结束
    });
});



# https 模块

https 模块与 http 模块极为类似，区别在于https 模块需要额外处理SSL 证书。
在服务端模式下，创建一个HTTPS 服务器的示例如下。

var options = {
    key: fs.readFileSync('./ssl/default.key'),
    cert: fs.readFileSync('./ssl/default.cer')
};
var server = https.createServer(options, function (request, response) {
    //...
});

可以看到，与创建HTTP 服务器相比，多了一个options 对象，通过key 和cert 字段指定了 HTTPS 服务器使用的私钥和公钥。

另外，NodeJS 支持SNI 技术，可以根据HTTPS 客户端请求使用的域名动态使用不同的证书，因此同一个HTTPS 服务器可以使用多个域名提供服务。
接着上例，可以使用以下方法为 HTTPS 服务器添加多组证书。

server.addContext('foo.com', {
    key: fs.readFileSync('./ssl/foo.com.key'),
    cert: fs.readFileSync('./ssl/foo.com.cer')
});
server.addContext('bar.com', {
    key: fs.readFileSync('./ssl/bar.com.key'),
    cert: fs.readFileSync('./ssl/bar.com.cer')
});


在客户端模式下，发起一个HTTPS 客户端请求与http 模块几乎相同，示例如下。
var options = {
    hostname: 'www.example.com',
    port: 443,
    path: '/',
    method: POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
    }
};
var request = https.request(options, function (response) {});
request.end();

但如果目标服务器使用的 SSL 证书是自制的，不是从颁发机构购买的，默认情况下https 模块会拒绝连接，提示说有证书安全问题。
在 options 里加入 rejectUnauthorized: false 字段可以禁用对证书有效性的检查，从而允许 https 模块请求开发环境下使用自制证书的 HTTPS 服务器。



## 关于http状态码

-- 状态代码：状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。如下

1xx：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。

100 Continue

101 Switching Protocols

2xx：成功状态码，表示服务器已成功接收到请求并进行处理。200 OK 表示客户端请求成功

204 No Content 成功，但不返回任何实体的主体部分

206 Partial Content 成功执行了一个范围（Range）请求

3xx：重定向状态码，表示服务器要求客户端重定向。

301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL

302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源

303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源

304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存

307 Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能会遵循这一标准，但也依赖于浏览器具体实现

4xx：客户端错误状态码，表示客户端的请求有非法内容。

400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解

401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用

403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因

404 Not Found 请求的资源不存在，例如，输入了错误的URL

5xx：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。

500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求

503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常















