# Express 服务器模块

var express = require('express');

// process 是一个环境变量
// 如果通过命令行传递参数 PORT=4000，则可以改变 process.env.PORT 的值
var port = process.env.PORT || 3000;
var app = express(); // 启动一个web服务器

app.set('views', './views/pages'); // 设置视图的根目录
app.set('view engine', 'jade'); // 设置默认的模板引擎

var bodyParser = require('body-parser'); // 用于解析客户端请求的body中的内容
app.use(bodyParser.urlencoded({ extended: true })); // 将后台提交的表单数据格式化（在路由回调中通过req.body来访问提交的数据）

// 使用path对象来拼接目录
// __dirname 表示当前根目录
// 这里告诉express静态资源目录为当前根目录下的bower_components目录
app.use(express.static(path.join(__dirname, 'bower_components')));
app.listen(port);

// 设置路由
// 首页
app.get('/', function(req, res) {
	res.render('index', { // 返回 index.jade 模板生成的页面
		title: '首页' // 这里的 title 值用于替换 index.jade 中的 #{title} 变量
	});
});

// 列表页
app.get('/list', function(req, res) {
	res.render('list', {
		title: '列表页'
	});
});

// 详情页
app.get('/list/detail/:id', function(req, res) {
	var id = req.params.id; // 获取url中传入的id
	res.render('detail', {
		title: '详情页',
		id: id
	});
});

// 编辑页面提交
app.post('/admin/new', function(req, res) {
	var data = req.body.data; // 获取提交表单中的 data 对象（bodyParser中间件模块解析的表单数据）
	var id = data.id;
	
	if (id) { // 如果id已经定义，表示为更新数据
		// 更新数据后跳转入详情页
		res.redirect('/list/detail/' + id);
	} else { // 如果id未定义，表示为新建数据
		// 数据保存成功后跳转到详情页
		res.redirect('/list/detail/' + id); 
	}
});

// DELETE
// ajax 提交 demo
$.ajax({
	type: 'DELETE',
	url: '/list?id=' + id
}).done(function(res) {
	if (res.success == 1 && $tr.length > 0) {
		$tr.remove();
	}
});
// DELETE路由
app.delete('/list', function(req, res) {
	var id = req.query.id;
	if (id) {
		// 数据库删除后给客户端返回一个json
		res.json({ success: 1 });

	}
});


## 路由回调中拿url中参数的三种方式
// /user/signup/:userid => /user/signup/1111
var userid = req.params.userid; // => 1111
// /user/signup/:userid?userid=id => /user/signup/1111?userid=1112
var userid = req.query.userid; // => 1112
// /user/signup/:userid?userid=id 在ajax的data参数中传入的 userid => /user/signup/1111?userid=1112 data={userid: 1113}
var userid = req.body.userid; // => 1113

req.param('userid'); // 可以拿到以上三种方式的 userid
// 它的原理是按循序逐个查找，当获取到userid后即返回
// 它处理的优先级为 params.userid => req.body.userid => req.query.userid









