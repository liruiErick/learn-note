>>>>>>>>>> EventDispatcher 是所有事件派发对象的基类 <<<<<<<<<<

* 添加移除事件监听

addEventListener(type, listener, [useCapture]); //为显示对象注册事件监听
removeEventListener(type, listener, [useCapture]); //为显示对象移除事件监听
removeAllEventListeners([type]); //移除显示对象的全部事件监听，或者移除参数指定的事件监听
on(type, listener, [scope], [once=false], [data], [useCapture=false]); //为显示对象注册事件监听（addEventListener的简写版）
off(type, listener, [useCapture]); //为显示对象移除事件监听（removeEventListener的简写版）
// 可选参数说明
[scope]  一个对象，监听事件的指定调度者，一般情况下传入 null，默认为 dispatcher/currentTarget。(也可以理解为监听器函数的 this 指向)
[once=false]  如果设置为 true，监听会在第一次触发后自动删除
[data]  任意数据类型，将作为监听器函数的第二个参数被传递
[useCapture=false]  是否在捕获阶段响应事件

// 事件其他相关方法
hasEventListener(type); //返回该显示对象是否注册了指定类型的监听
willTrigger(type); //返回该显示对象以及其祖先对象是否注册了指定类型的监听
dispatchEvent(new createjs.Event("customEvent",true)); //派发自定义事件



* 舞台每帧刷新监听（在 drawstart 事件之前触发）

DisplayObject.addEventListener("tick", onTick); //监听 stage.update() 方法
	// 专有 event 属性：
	params; //返回一个数组，包含 stage.update(param1, param2, ...) 方法中传递的参数
	params[0].delta; //返回上一帧到当前帧所经历的毫秒数。



* 鼠标事件
DisplayObject.addEventListener("click", onClick);

click; //鼠标单击事件
dblclick; //鼠标双击事件
mousedown; //鼠标按下事件
mouseup; //鼠标弹起事件（目前不支持，实际为 DOM 的鼠标弹起事件）
mousemove; //鼠标移动事件（目前不支持，实际为 DOM 的鼠标移动事件）
pressup; //鼠标弹起事件
pressmove; //鼠标按下后移动事件

// 鼠标移入移出事件，必须先启用该事件
stage.enableMouseOver();
mouseover; //鼠标移入事件，子元件也会触发
mouseout; //鼠标移出事件，子元件也会触发
rollover; //鼠标移入事件，子元件不会触发
rollout; //鼠标移出事件，子元件不会触发



* 触摸事件（触摸事件与鼠标事件API相同，但是不支持双击事件和 over/out 事件）
// 监测浏览器是否支持触摸事件
createjs.Touch.isSupported();

// 启用 Stage（canvas）的触摸事件（为 canvas 添加js的触摸事件）
createjs.Touch.enable(stage, [singleTouch=false], [allowDefault=false]);
// 第一个参数传入当前 Stage（canvas）对象。
// 第二个为可选参数，表示是否为单点触摸，默认为 false。
// 第三个为可选参数，表示是否为允许设备的默认手势（如滚动、缩放），默认为 false。

// 禁用 Stage（canvas）的触摸事件（为 canvas 移除js的触摸事件）
createjs.Touch.disable(stage);



* stage（canvas）专有事件
// 监听器必须注册在 stage 上：
stage.addEventListener("tickstart", onTickstart);

tickstart; //舞台每帧 tick 前触发该事件
tickend; //舞台每帧 tick 后触发该事件（在 drawstart 事件之前触发）
drawstart; //舞台每帧开始绘制前触发该事件
drawend; //舞台每帧开始绘制后触发该事件
mouseenter; //鼠标移入舞台时触发该事件（当鼠标第一次在舞台中移动时也会触发）
mouseleave; //鼠标移出舞台时触发该事件
stagemousedown; //鼠标在舞台上按下时触发该事件
stagemouseup; //鼠标在舞台上弹起时触发该事件
stagemousemove; //鼠标在舞台上移动时触发该事件



* event 属性

target; //触发事件的目标
currentTarget; //注册事件的目标
type; //事件类型
stageX; //返回鼠标相对于舞台的X坐标，如果鼠标移出舞台，则返回鼠标最后在舞台上停留的X坐标。
stageY; //返回鼠标相对于舞台的Y坐标，如果鼠标移出舞台，则返回鼠标最后在舞台上停留的Y坐标。
rawX; //返回鼠标相对于舞台的X坐标（当 stage.mouseMoveOutside 属性为 true 时才有效）。
rawY; //返回鼠标相对于舞台的Y坐标（当 stage.mouseMoveOutside 属性为 true 时才有效）。
primary; //是否为多点触摸事件
pointerID; //多点触摸ID

eventPhase; //返回当前的事件阶段，1为捕获阶段，2为目标阶段，3为冒泡阶段
bubbles; //返回布尔值，指示事件是否是冒泡事件类型
cancelable; //返回布尔值，指示事件是否可拥可取消的默认动作
removed; //事件是否已经执行了 remove() 方法？
defaultPrevented; //事件是否已经执行了 preventDefault() 方法？
propagationStopped; //事件是否已经执行了 stopPropagation() 方法？
immediatePropagationStopped; //事件是否已经执行了 stopImmediatePropagation() 方法？
timeStamp; //这个事件被创建的时间，该时间为 1970 年 1 月 1 日至今的毫秒数。
nativeEvent; //如果是鼠标事件，则返回原生DOM的鼠标事件对象。如果不是鼠标事件，则返回 undefined。
event.params[0].delta; //当该时间是



* event 方法

preventDefault(); //如果事件有默认行为，则取消该行为。
stopPropagation(); //防止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。
stopImmediatePropagation(); //防止对事件流中当前节点中和所有后续节点中的事件侦听器进行处理。
remove(); //删除该事件监听
toString(); //返回一个字符串，其中包含事件对象的所有属性。

注意，如果事件处理函数返回值为 false，则相当于同时执行了 event.preventDefault() 和 event.stopPropagation()。




