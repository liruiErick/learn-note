>>>>>>>>>> Container 扩展自 DisplayObject <<<<<<<<<<

* Container 方法

contains(child); //返回一个布尔值，判断指定对象是否为当前容器的子对象或者孙对象。若指定对象为容器对象自身，也会返回 true。
addChild(child); //将指定对象添加进当前容器的顶部，可以参数的形式传入多个对象，将按顺序加入每个对象，并返回最后加入的对象。
addChildAt(child, index); //将指定对象添加进当前容器的指定索引位置，可以参数的形式传入多个对象，将按顺序加入每个对象，并返回最后加入的对象。
removeChild(child); //将指定对象从当前容器内移除，可以参数的形式传入多个对象，将按顺序移除每个对象，若移除成功则返回 true，若在移除时遇到不在容器内的对象，则返回 false，并终止移除队列之后的对象。
removeChildAt(); //从当前容器内移除指定索引位置的对象，可以参数的形式传入多个索引，将按顺序移除每个索引所对应的对象，若移除成功则返回 true，若移除队列中有索引超出范围，则返回 false，即移除失败，所有对象都不会被移除。
removeAllChildren(); //移除当前容器中所有子对象。

getChildAt(index); //返回当前容器内指定索引对应的对象。
getChildByName("name"); //返回当前容器内指定实例名的对象。
getChildIndex(child); //返回指定对象在当前容器内的索引，如果未找到则返回 -1。
getNumChildren(); //返回当前容器内所包含的子对象的数量。

swapChildren(child1, child2); //交换当前容器内指定的两个子对象的位置
swapChildrenAt(index1, index2); //交换当前容器内指定的两个索引所对应子对象的位置
sortChildren(排序函数); //函数有两个参数A和B,让A在B前返回-1,让A在B后返回1,A=B返回0。

hitTest(x, y); //判断指定以该显示对象为父级的局部坐标是否与该显示对象相交。（该方法继承自 DisplayObject，在 Container 中被重写，主要判断是基于 getObjectUnderPoint 方法）
getObjectsUnderPoint(x, y); //返回当前容器内与指定坐标点相交的子对象数组。测试无效？
getObjectUnderPoint(x, y); //返回当前容器内与指定坐标点相交的最顶层子对象。测试无效？



* Container 属性

children; //返回一个包含所有子元素的数组。
mouseChildren; //一个布尔值，设置或返回容器的子元素是否响应鼠标事件，默认为 true。
tickChildren; //一个布尔值，设置或返回容器的子元素是否响应 tick 事件，默认为 true。
hitArea; //设置或返回一个 DisplayObject 对象，可以在 hitTest 方法中被作为碰撞区域来检测碰撞。




>>>>>>>>>> Stage 扩展自 Container <<<<<<<<<<

// Stage 实际上就是经过 createjs 封装的 canvas 元素

* Stage 方法

clear(); //清楚 Stage（canvas）上的所有内容。
update(); //更新 Stage（canvas）上的所有内容（包括派发所有 tick、draw 事件）。
enableDOMEvents(Boolean); //传入一个布尔值，设置是否启用 Stage（canvas）上的所有事件，默认为 true。
enableMouseOver(frequency); //启用或禁用监测鼠标移入移出事件，一个可选参数，值为 0~50 之间的整数，设定每秒监测的频率，默认值为 20。

// 将 Stage（canvas）转换成数据地址，可用js的图片对象加载。
toDataURL(backgroundColor, mimeType); 
// 第一个参数可以设置一个背景色，默认为透明。
// 第二个参数在image/png，image/jpeg,image/svg+xml等 MIME类型中选择（可以不填，默认是image/png）。



* Stage 属性

autoClear; //一个布尔值，设置或返回 Stage（canvas）是否自动清除上一帧的内容，默认为 true。
canvas; //设置或返回 Stage（canvas）当前所持有的 HTMLCanvasElement 对象。
tickOnUpdate; //一个布尔值，设置或返回 Stage（canvas）是否派发所有 tick 事件，默认为 true。
mouseInBounds; //一个布尔值，判断当前鼠标是否在 Stage（canvas）中。
mouseMoveOutside; //一个布尔值，设置或返回当鼠标移出舞台后是否继续响应鼠标移动事件，默认为 false。
mouseX; //返回鼠标相对于舞台的X坐标，如果鼠标移出舞台，则返回鼠标最后在舞台上停留的X坐标。
mouseY; //返回鼠标相对于舞台的Y坐标，如果鼠标移出舞台，则返回鼠标最后在舞台上停留的Y坐标。
handleEvent; //一个函数对象，设置或返回 Stage 的 tick 事件的默认执行函数，该默认函数中包含一个 stage.update() 函数。

nextStage; //传入一个 Stage（canvas），设置下一个舞台，详见帮助文档。




>>>>>>>>>> MoveClip 扩展自 Container <<<<<<<<<<

// 凡是在 MoveClip 时间轴中使用 timeline.addTween() 方法加入的对象，在第二帧之前都不属于 MoveClip 容器的子对象。
// 和 AS 中不同的是：这里的帧全部都是从 0 开始计算，即 0 为第一帧。

* MoveClip 方法

getCurrentLabel(); //返回当前播放头最近一次经过的帧标签名称。
getLabels(); //返回一个当前影片剪辑中所包含所有帧标签对象所组成的数组，每个帧标签对象都包含 label 属性和 position 属性。
play(); //播放。
stop(); //停止。
gotoAndPlay(); //跳转到指定帧或标签，然后继续播放。
gotoAndStop(); //跳转到指定帧或标签，然后停止。



* MoveClip 属性

currentFrame; //返回当前帧数。
paused; //一个布尔值，设置或返回当前影片剪辑的播放是否暂停，等同于 play() 与 stop()。
actionsEnabled; //一个布尔值，设置或返回当前影片剪辑是否执行帧代码，默认为 true。
autoReset; //一个布尔值，设置或返回当前影片剪辑被加入到父影片剪辑的时间轴时是否会重置回第一帧，默认为 true。
loop; //一个布尔值，设置或返回当前影片剪辑是否循环播放。
timeline; //返回当前影片剪辑的时间轴对象。
mode; //返回一个字符串，表示影片剪辑的模式。


