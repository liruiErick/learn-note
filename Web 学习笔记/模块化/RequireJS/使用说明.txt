更新地址：
http://requirejs.org/docs/download.html
http://www.requirejs.cn/

r.js更新地址：
https://github.com/requirejs/r.js

如果在 <head> 中引用，则最好声明异步加载属性
<script src="js/require.js" defer async="true" data-main="js/main"></script>
如果在页面底部，则异步加载属性可以省略
<script src="js/require.js" data-main="js/main"></script>
默认入口文件为 js 目录下的 main.js

在 main.js 中 require 的是一个文件的相对路径的时候需要注意：
如果使用 data-main 来引入 main.js 文件，那么这个路径是基于 main.js 的。
如果 main.js 是通过 <script> 标签直接引入的，那么此时又分为两种情况：
    1）在这之前 require.config 中定义了 baseUrl，则这个路径是基于 require.config 中 baseUrl。
    2）没有定义 baseUrl，则这个路径是基于当前引入的 html 页面的。



配置文件内容如下：

require.config({
	// 这里的相对路径是 html 所在的路径
	// 如未设置baseUrl，则默认值是加载require.js的HTML所处的位置。如果用了data-main属性，则该路径就变成baseUrl。
	baseUrl: 'js/lib', // 这里也可以为所有模块指定一个统一的基路径。注意，这个路径不仅仅是定义模块文件的基路径，同时还会被应用到其它文件请求的路径上
	paths: { // 用于定义各模块的引用名以及路径，路径默认是与main.js文件同一目录，js文件后缀可以省略
		'jquery': 'jquery.min',
		'underscore': 'underscore.min',
		'backbone': 'backbone.min'
	},
	shim: { // 用于加载非AMD规范的模块
		'underscore': {
			exports: '_' // 定义引用的变量名
		},
		'backbone': {
			deps: ['underscore', 'jquery'], // 定义依赖的模块
			exports: 'Backbone'
		},
		'jquery.scroll': { // 定义一个jquery插件
			deps: ['jquery'],
			exports: '$' // 实际上表示将哪个引用作为请求回调的参数，这是一个已经定义的全局变量，一般这就是该文件暴漏的全局变量
		}
	},
	urlArgs: 'debug=' + (+ new Date()) //防止读取缓存，调试用
});



* 请求模块

require(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){
　　　　// some code here
});

require()函数接受两个参数。
第一个参数是一个数组，表示所依赖的模块，上例就是['jquery', 'underscore', 'backbone']，即主模块依赖这三个模块；
注意，如果依赖的模块未在require.config中的paths处定义，那么将会默认去找与该模块名相同命名的js文件
第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。

require()异步加载moduleA，moduleB和moduleC，浏览器不会失去响应；
它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。

如果不依赖任何模块，仅仅是想异步执行的代码，则用一下方法即可：

require(['require'], function() {

});



* 请求模块时的错误处理

require(['jquery'], function($) {
	// 成功
}, function(err) {
	// 失败
	// 获取失败模块的id
	var failedId = err.requireModules && err.requireModules[0];
    if (failedId === 'jquery') {
        // 重新加载这个模块
        requirejs.undef(failedId);

        // 设置新的模块路径
        requirejs.config({
            paths: {
                jquery: 'local/jquery'
            }
        });

        require(['jquery'], function () {});
    } else {
        //Some other error. Maybe show message to the user.
    }
});

err 包含两个属性：
- requireType: 含有类别信息的字串值，如“timeout”，“nodefine”， “scripterror”
- requireModules: 超时的模块名/URL数组。

使用`requirejs.undef()`，如果你配置到不同的位置并重新尝试将该模块再加载一次，则loader会将依赖于该模块的那些模块记录下来并在该模块重新加载成功后去加载它们。
注意: errback仅适用于回调风格的require调用，而不是define()调用。define()仅用于声明模块。


* 定义一个模块

// 如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。
define(function (){
	var add = function (x,y){
		return x+y;
	};
	return {
		add: add
	};
});

// 如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。
define(['jquery'], function($){
	function getJq(elem){
		return $(elem);
	}
	return {
		getJq : getJq
	};
});



* 利用 map 可以轻松在同一项目中兼容同一模块的两个版本

例如以下四个模块文件：
foo1.0.js
foo1.2.js
some/newmodule.js
some/oldmodule.js

requirejs.config({
    map: {
        'some/newmodule': {
            'foo': 'foo1.2'
        },
        'some/oldmodule': {
            'foo': 'foo1.0'
        }
    }
});

当“some/newmodule”调用了“require('foo')”时，它将获取到foo1.2.js文件。
而当“some/oldmodule”调用了“require('foo')”时，它将获取到foo1.0.js文件。

另外在map中支持“*”，意思是对于所有的模块加载，使用“*”配置。
如果还有更细化的map配置，会优先于“*”配置。

requirejs.config({
    map: {
        '*': {
            'foo': 'foo1.2'
        },
        'some/oldmodule': {
            'foo': 'foo1.0'
        }
    }
});

意思是除了“some/oldmodule”外的所有模块，当调用了“require('foo')”时，使用foo1.2.js文件。
而对于“some/oldmodule”调用了“require('foo')”时，则使用foo1.0.js文件。



* 异步加载CSS插件

更新地址：
https://github.com/guybedford/require-css
其他类型文件加载插件地址：
https://github.com/millermedeiros/requirejs-plugins

将css.min.js插件定义为css模块，用于加载css文件
require.config({
	baseUrl: 'js',
	paths: {
		'css': 'css.min' // 这里的key名'css'就是请求时'!'前的名称
	}
});

// 请求CSS
// 注意，一旦config中设置了baseUrl，那么这里请求css时也是基于该路径的。css的扩展名可以省略
require(['css!../css/styles'], function() {
	//...
});



* 其他插件

requirejs-plugins
更新地址
https://github.com/millermedeiros/requirejs-plugins
多种加载插件组合，可以定制需要的模块加载器，使用方法同CSS插件

require.config({
    paths : {
        //create alias to plugins (not needed if plugins are on the baseUrl)
        async: 'lib/require/async',
        font: 'lib/require/font',
        goog: 'lib/require/goog',
        image: 'lib/require/image',
        json: 'lib/require/json',
        noext: 'lib/require/noext',
        mdown: 'lib/require/mdown',
        propertyParser : 'lib/require/propertyParser',
        markdownConverter : 'lib/Markdown.Converter'
    }
});

//use plugins as if they were at baseUrl
define([
        'image!awsum.jpg',
        'json!data/foo.json',
        'noext!js/bar.php',
        'mdown!data/lorem_ipsum.md',
        'async!http://maps.google.com/maps/api/js?sensor=false',
        'goog!visualization,1,packages:[corechart,geochart]',
        'goog!search,1',
        'font!google,families:[Tangerine,Cantarell]'
    ], function(awsum, foo, bar, loremIpsum){
        //all dependencies are loaded (including gmaps and other google apis)
    }
);

