* jQuery AJAX 常用方法

注意，Chrome 浏览器貌似不支持相对路径的 url 请求地址，因此请尽量用绝对路径。

// 从服务器异步加载数据，并把返回的数据放入被选元素中。（与事件中的 load() 为同一方法，该方法根据传入的参数不同来进行判断）
// 注意，该方法会将被选元素中现有的内容清空掉，然后在加新数据内容放入
$(selector).load(URL, data, callback);
// URL  必需参数，规定您希望加载的 URL。
// data  可选参数，规定与请求一同发送的查询字符串键/值对集合。
// callback  可选参数，指定 load() 方法完成后所执行的函数名称。如果提供了回调函数，它将在函数处理完之后，并且 HTML 已经被插入完时被调用。

示例 1：
$("#div1").load("demo_test.txt");

// 也可以把 jQuery 选择器添加到 URL 参数，表示只加载指定文本内的匹配元素。
// 注意，这里的选择器只可以是 body 之下的选择器，如果是 body 则无效。
示例 2：
$("#div1").load("demo_test.txt #p1");

// 回调函数可以设置3个参数：
// responseTxt  包含加载到的文件内容
// statusTxt  包含加载的结果状态（"success", "notmodified", "error", "timeout" 或 "parsererror"）
// xhr  包含 XMLHttpRequest 对象
示例 3：
$("#div1").load("demo_test.txt",function(responseTxt,statusTxt,xhr){
	if (statusTxt == "success") alert("外部内容加载成功！");
	if (statusTxt == "error") alert("Error: "+xhr.status+": "+xhr.statusText);
});



// GET POST 方法的比较：

GET 请求可被缓存
GET 请求保留在浏览器历史记录中
GET 请求可被收藏为书签
GET 请求不应在处理敏感数据时使用
GET 请求有长度限制
GET 请求只应当用于取回数据

POST 请求不会被缓存
POST 请求不会保留在浏览器历史记录中
POST 不能被收藏为书签
POST 请求对数据长度没有要求


// GET POST 方法的使用：
$.get(URL, data, callback); //返回一个 jqXHR 对象。
$.post(URL, data, callback); //返回一个 jqXHR 对象。
// URL  必需参数，规定您希望请求的 URL。
// data  可选参数，规定要与请求一起发送的数据。
//		"demo_test_post.asp" 中的 ASP 脚本读取发送给它的数据参数，对它们进行处理，然后返回结果。
// callback  可选参数，指定方法完成后所执行的函数名称。
//		回调函数可以设置3个参数：
//		data  包含来自请求的结果数据
//		status  包含加载的结果状态（"success", "notmodified", "error", "timeout" 或 "parsererror"）
//		jqXHR  包含 jqXHR 对象


GET 示例：
$.get("demo_test.asp",
	{name:"Tom", city:"Duckburg"},
	function(data, status, jqXHR){
		alert("Data: " + data + "\nStatus: " + status);
	}).fail(function(jqXHR, status){
		alert("通信失败");
	});

POST 示例：
$.post("demo_test_post.asp",
	{name:"Tom", city:"Duckburg"},
	function(data, status, jqXHR){
		alert("Data: " + data + "\nStatus: " + status);
	}).fail(function(jqXHR, status){
		alert("通信失败");
	});




// 通过 HTTP GET 请求异步载入并执行 JavaScript 文件，并返回一个 jqXHR 对象。
$.getScript(url,success(response,status));
// URL  必需参数，规定您希望请求的 URL。
// success  可选参数，规定请求成功后执行的回调函数。如果提供了回调函数，它将在脚本载入，并且执行后被调用。
//		回调函数可以设置2个参数：
//		response  包含来自请求的结果数据
//		status  包含加载的结果状态（"success", "notmodified", "error", "timeout" 或 "parsererror"）

示例：
$.getScript("app.js",
	function(response,status){
		alert("Response: " + response + "\nStatus: " + status);
	}).fail(function(){
		alert("应用程序加载失败");
	});




// 通过 HTTP GET 请求数据对象，并返回一个 jqXHR 对象。
$.getJSON(url[, data][, success(data, textStatus, jqXHR)]);
// URL  必需参数，规定您希望加载的 URL。
// data  可选参数，规定与请求一同发送的查询字符串键/值对集合。
// success  可选参数，规定请求成功后执行的回调函数。
//		回调函数可以设置3个参数：
//		data  包含来自请求的结果数据
//		textStatus  包含加载的结果状态（"success", "notmodified", "error", "timeout" 或 "parsererror"）
//		jqXHR  包含 jqXHR 对象

示例：
$.getJSON("ajax/test.json", function(data){
	// data 为请求到的数据对象
});



jqXHR.success(), jqXHR.error(), 和 jqXHR.complete() 回调方法 在jQuery 1.5中引进，在jQuery 1.8中不赞成使用，已经过时。
他们最终将被取消（移除），使用 jqXHR.done(), jqXHR.fail(), 和 jqXHR.always() 代替。

实际上 jqXHR 就是一个 deferred 延迟对象
var deferred = new $.Deferred();
deferred.always(func); // 当Deferred（延迟）对象解决或拒绝时，调用添加处理程序。
deferred.done(func); // 当Deferred（延迟）对象解决时，调用添加处理程序。
deferred.fail(func); // 当Deferred（延迟）对象拒绝时，调用添加处理程序。
deferred.isResolved(); // 确定一个Deferred（延迟）对象是否已被解决。
deferred.isRejected(); // 确定一个Deferred（延迟）对象是否已被拒绝。
deferred.state(); // 确定一个Deferred（延迟）对象的当前状态。





* AJAX 高级调用

$.ajax(url [, settings]);
$.ajax([settings]);

$.ajax({
	url: href,
	type: "GET",
	data: {},
	dataType : "jsonp",
	beforeSend: function(xhr) {
		xhr && xhr.setRequestHeader("X-PJAX", true);
	}

}).done(function(data) {
	doneCallback.call(this, href, data);
	var info = $.parseHTML(data);

}).fail(function() {
	failCallback.call(this, href);
});

settings 配置如下：

url (默认: 当前页面地址)
类型: String
发送请求的地址。

method (default: 'GET')
Type: String
HTTP 请求方法 (比如："POST", "GET ", "PUT")。 (添加版本: 1.9.0)。（愚人码头注：如果你使用jQuery 1.9.0 之前的版本，你需要使用type选项。）

type (默认: 'GET')
类型: String
method选项的别名。如果你使用jQuery 1.9.0 之前的版本，你需要使用type选项。

success
类型: Function( Object data, String textStatus, jqXHR jqXHR )
请求成功后的回调函数。这个函数传递3个参数：从服务器返回的数据，并根据dataType参数进行处理后的数据，一个描述状态的字符串;还有 jqXHR（在jQuery 1.4.x前为XMLHttpRequest） 对象。
在jQuery 1.5， 成功设置可以接受一个函数数组。每个函数将被依次调用。这是一个 Ajax Event

error
类型: Function( jqXHR jqXHR, String textStatus, String errorThrown )
请求失败时调用此函数。有以下三个参数：
- jqXHR (在 jQuery 1.4.x前为XMLHttpRequest) 对象
- 描述发生错误类型的一个字符串
- 捕获的异常对象。
如果发生了错误，错误信息（第二个参数）除了得到null之外，还可能是"timeout", "error", "abort" ，和 "parsererror"。 当一个HTTP错误发生时，errorThrown 接收HTTP状态的文本部分，比如： "Not Found"（没有找到） 或者 "Internal Server Error."（服务器内部错误）。 
从jQuery 1.5开始, 在error设置可以接受函数组成的数组。每个函数将被依次调用。 注意：此处理程序在跨域脚本和JSONP形式的请求时不被调用。这是一个 Ajax Event。
当一个POST请求一个已经用GET请求过的URL。

complete
类型: Function( jqXHR jqXHR, String textStatus )
请求完成后回调函数 (请求success 和 error之后均调用)。这个回调函数得到2个参数：
- jqXHR (在 jQuery 1.4.x中是 XMLHTTPRequest) 对象
- 一个描述请求状态的字符串("success", "notmodified", "nocontent"，"error", "timeout", "abort", 或者 "parsererror") 。
从jQuery 1.5开始， complete设置可以接受一个函数的数组。每个函数将被依次调用。这是一个Ajax事件 。

accepts (默认: 取决于数据类型)
类型: PlainObject
内容类型发送请求头（Content-Type），用于通知服务器该请求需要接收何种类型的返回结

async (默认: true)
类型: Boolean
默认设置下，所有请求均为异步请求（也就是说这是默认设置为 true ）。如果需要发送同步请求，请将此选项设置为 false 。
跨域请求和 dataType: "jsonp" 请求不支持同步操作。注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。
从 jQuery 1.8 开始, jqXHR ($.Deferred)中使用 async: false 已经过时。您必须使用的 success/error/complete 的回调选项代替相应的jqXHR对象的方法，比如jqXHR.done() 或者过时的jqXHR.success()

beforeSend
类型: Function( jqXHR jqXHR, PlainObject settings )
请求发送前的回调函数，用来修改请求发送前jqXHR（在jQuery 1.4.x的中，XMLHttpRequest）对象，此功能用来设置自定义 HTTP 头信息，等等。
该jqXHR和设置对象作为参数传递。这是一个Ajax事件 。在beforeSend函数中返回false将取消这个请求。从jQuery 1.5开始， beforeSend选项将被访问，不管请求的类型。

cache (默认: true, dataType为"script"和"jsonp"时默认为false)
类型: Boolean
如果设置为 false ，浏览器将不缓存此页面。注意: 设置cache为 false将在 HEAD和GET请求中正常工作。
它的工作原理是在GET请求参数中附加"_={timestamp}"（译者注：时间戳）。该参数不是其他请求所必须的，除了在IE8中，

contents
类型: PlainObject
一个以"{字符串/正则表达式}"配对的对象，根据给定的内容类型，解析请求的返回结果。 (1.5新增)

contentType (default: 'application/x-www-form-urlencoded; charset=UTF-8')
Type: Boolean or String
当将数据发送到服务器时，使用该内容类型。默认值是"application/x-www-form-urlencoded; charset=UTF-8"，适合大多数情况。
如果你明确地传递了一个内容类型（Content-Type）给 $.ajax()，那么他总是会发送给服务器（即使没有数据要发送）。
从 jQuery 1.6 开始，你可以传递false来告诉jQuery，没有设置任何内容类型头信息。 注意：W3C的XMLHttpRequest的规范规定，数据将总是使用UTF-8字符集传递给服务器；指定其他字符集无法强制浏览器更改编码。
注意:对于跨域请求，内容类型设置为application/x-www-form-urlencoded, multipart/form-data, 或 text/plain以外， 将触发浏览器发送一个预检OPTIONS请求到服务器。

context
类型: Object
这个对象用于设置Ajax相关回调函数的上下文。 默认情况下，这个上下文是一个ajax请求使用的参数设置对象，（$.ajaxSettings合并独傲这个设置，传递给$.ajax）。
比如指定一个DOM元素作为context参数，这样就设置了complete回调函数的上下文为这个DOM元素。就像这样：
$.ajax({
  url: "test.html",
  context: document.body
}).done(function() {
  $(this).addClass("done");
});

converters (默认: {"* text": window.String, "text html": true, "text json": jQuery.parseJSON, "text xml": jQuery.parseXML})
类型: PlainObject
一个数据类型到数据类型转换器的对象。每个转换器的值是一个函数，返回经转换后的请求结果。 ( 1.5新增)

crossDomain (默认: 同域请求为false， 跨域请求为true)
类型: Boolean
如果你想在同一域中强制跨域请求（如JSONP形式），例如，想服务器端重定向到另一个域，那么需要将crossDomain设置为 true 。 ( 1.5 新增)

data
类型: PlainObject 或 String 或 Array
发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后面。查看 processData 选项说明，以禁止此自动转换。对象必须为"{键:值}"格式。
如果这个参数是一个数组，jQuery会按照traditional 参数的值， 将自动转化为一个同名的多值查询字符串(查看下面的说明)。
愚人码头注：如 {foo:["bar1", "bar2"]} 转换为 '&foo=bar1&foo=bar2'。

dataFilter
类型: Function( String data, String type ) => Anything
一个函数被用来处理XMLHttpRequest的原始响应数据。这是一个预过滤功能，净化响应。您应该返回安全数据。提供data和type两个参数：data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。

dataType (默认: Intelligent Guess (xml, json, script, or html))
类型: String
预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如XML MIME类型就被识别为XML。在1.4中，JSON就会生成一个JavaScript对象，而script则会执行这个脚本。随后服务器端返回的数据会根据这个值解析后，传递给回调函数。可用值:
	"xml": 返回 XML 文档，可用 jQuery 处理。.
	"html": 返回纯文本 HTML 信息；包含的script标签会在插入dom时执行。
	"script": 把响应的结果当作 JavaScript 执行。并将其当作纯文本返回。默认情况下不会通过在URL中附加查询字符串变量 "_=[TIMESTAMP]" 进行自动缓存结果，除非设置了cache参数为true。Note: 在远程请求时(不在同一个域下)，所有POST请求都将转为GET请求。(因为将使用DOM的script标签来加载)
	"json": 把响应的结果当作 JSON 执行，并返回一个JavaScript对象。在 jQuery 1.4 中，JSON 格式的数据以严格的方式解析，如果格式有错误，jQuery都会被拒绝并抛出一个解析错误的异常。（见json.org的更多信息，正确的JSON格式。）
	"jsonp": 以 JSONP 的方式载入 JSON 数据块。会自动在所请求的URL最后添加 "?callback=?"。默认情况下不会通过在URL中附加查询字符串变量 "_=[TIMESTAMP]" 进行自动缓存结果，除非将 cache参数设置为true。
	"text": 返回纯文本字符串。
多个空格分割的值:从 jQuery 1.5 开始， jQuery可以内容类型（Content-Type）头收到并转换一个您需要的数据类型。
例如，如果你想要一个文本响应为XML处理，使用"text xml"数据类型。您也可以将一个JSONP的请求，以文本形式接受，并用jQuery以XML解析: "jsonp text xml"。
同样地可以使用"jsonp xml"简写,首先会尝试从 jsonp 到 xml 的转换，如果转换失败，就先将 jsonp 转换成 text, 然后再由 text 转换成 xml。

jsonp
类型: String
在一个JSONP请求中重写回调函数的名字。这个值用来替代在"callback=?"这种GET或POST请求中URL参数里的"callback"部分，比如{jsonp:'onJsonPLoad'}会导致将"onJsonPLoad=?"传给服务器。
在jQuery 1.5，，设置jsonp选项为false，阻止了jQuery从加入"?callback"字符串的URL或试图使用"=?"转换。在这种情况下，你也应该明确设置jsonpCallback设置。例如, { jsonp: false, jsonpCallback: "callbackName" }

jsonpCallback
类型: String, Function
为jsonp请求指定一个回调函数名。这个值将用来取代jQuery自动生成的随机函数名。这主要用来让jQuery生成一个独特的函数名，这样管理请求更容易，也能方便地提供回调函数和错误处理。
你也可以在想让浏览器缓存GET请求的时候，指定这个回调函数名。从jQuery 1.5开始，你也可以使用一个函数作为该参数设置，在这种情况下，该函数的返回值就是jsonpCallback的结果。

global (默认: true)
类型: Boolean
无论怎么样这个请求将触发全局AJAX事件处理程序。默认是true 。设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或者 ajaxStop。这可以用来控制各种 Ajax Event.

headers (默认: {})
类型: PlainObject
一个额外的"{键:值}"对映射到请求一起发送。此设置会在beforeSend 函数调用之前被设置 ;因此，请求头中的设置值，会被beforeSend 函数内的设置覆盖 。 (1.5 新增 ）

ifModified (默认: false)
类型: Boolean
只有上次请求响应改变时，才允许请求成功。使用 HTTP 包 Last-Modified 头信息判断。默认值是false，忽略HTTP头信息。在jQuery 1.4中，他也会检查服务器指定的'etag'来确定数据没有被修改过。

isLocal (默认: 取决于当前的位置协议)
类型: Boolean
允许当前环境被认定为“本地”，（如文件系统），即使jQuery默认情况下不会这么做。以下协议目前公认为本地：file, *-extension, and widget。如果isLocal设置需要修改，建议在$.ajaxSetup()方法中这样做一次。 (1.5 新增 ）

mimeType
类型: String
一个mime类型用来覆盖XHR的 MIME类型。 (1.5 新增 ）

password
类型: String
用于响应HTTP访问认证请求的密码

processData (默认: true)
类型: Boolean
默认情况下，通过data选项传递进来的数据，如果是一个对象(技术上讲只要不是字符串)，都会处理转化成一个查询字符串，以配合默认内容类型 "application/x-www-form-urlencoded"。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。

scriptCharset
类型: String
仅适用于当"script"传输使用时（例如，跨域的"jsonp"或 dataType选项为"script" 和 "GET"类型）。请求中使用在script标签上设置charset 属性。通常只在本地和远程的内容编码不同时使用。

statusCode (默认: {})
类型: PlainObject
一组数值的HTTP代码和函数对象，当响应时调用了相应的代码。例如，如果响应状态是404，将触发以下警报：
$.ajax({
  statusCode: {
    404: function() {
      alert("page not found");
    }
  }
});
如果请求成功，状态代码对应的函数作为回调的成功相同的参数;如果在一个错误的结果，他们采取了相同的参数error回调。
(1.5 新增 ）

timeout
类型: Number
设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup() 里的全局设置。 超时周期开始于$.ajax 访问成功的那个时间点；如果几个其他请求都在进步并且浏览器有没有可用的连接，它有可能在被发送前就超时了。
在 jQuery 1.4.x 和前面的版本中, 如果请求超时，XMLHttpRequest对象是处于无效状态;访问任何对象的成员可能会抛出一个异常。只有在 Firefox 3.0+,script 和 JSONP请求在超时后不能被取消;该脚本将运行即使超时后到达。

traditional
类型: Boolean
如果你想要用传统的方式来序列化数据，那么就设置为true。请参考工具分类下面的jQuery.param 方法.

username
类型: String
于响应HTTP访问认证请求的用户名

xhr (默认: 当可用的ActiveXObject（IE）中，否则为XMLHttpRequest)
类型: Function()
回调创建XMLHttpRequest对象。当可用时默认为ActiveXObject（IE）中，否则为XMLHttpRequest。提供覆盖你自己的执行的XMLHttpRequest或增强工厂。

xhrFields (1.5.1新增)
类型: PlainObject
一对“文件名-文件值”组成的映射，用于设定原生的 XHR对象。例如，如果需要的话，在进行跨域请求时，你可以用它来设置withCredentials为true。
$.ajax({
   url: a_cross_domain_url,
   xhrFields: {
      withCredentials: true
   }
});
在 jQuery 1.5中， withCredentials属性不会传递给原生的XHR从而对于需要使用此属性的 CORS 请求，则只能忽略这个属性。
出于这个原因，我们建议您使用jQuery1.5.1+，如果您需要使用它。




* AJAX的全局配置

$.ajaxSetup(options);
// 详细参数, 参见 $.ajax() 的 settings
// 所有后面的 Ajax 调用任何函数都将使用新的设置参数,除非它们调用时设置了各自的参数重载了这个默认值。 直到下一次调用$.ajaxSetup().



* 序列化表单元素

$(selector).serialize();
方法通过序列化表单值，创建 URL 编码文本字符串。
您可以选择一个或多个表单元素（比如 input 及/或 文本框），或者 form 元素本身。
序列化的值可在生成 AJAX 请求时用于 URL 查询字符串中。

$(selector).serializeArray();
方法通过序列化表单值来创建对象数组（名称和值）。
方法使用了 W3C 关于 successful controls（有效控件） 的标准来检测哪些元素应当包括在内。
特别说明，元素不能被禁用（禁用的元素不会被包括在内），并且元素应当有含有 name 属性。提交按钮的值也不会被序列化。文件选择元素的数据也不会被序列化。
该方法可以对已选择单独表单元素的对象进行操作，比如 <input>, <textarea>, 和 <select>。不过，更方便的方法是，直接选择 <form> 标签自身来进行序列化操作。

例如：
<form action="">
	<input type="text" name="FirstName" value="Bill" /><br />
	<input type="text" name="LastName" value="Gates" /><br />
</form>
$("form").serialize(); // 输出：FirstName=Bill&LastName=Gates
$("form").serializeArray();
// 输出：
[
	{
		name: "FirstName",
		value: "Bill"
	},
	{
		name: "LastName",
		value: "Gates"
	}
]


* 终止一个 AJAX 请求

xhr = $.ajax({
    type:'POST',
    url:'b.php',
    data:'',
    success:function(){
        alert('ok');
    }
});
xhr.abort(); // 终止请求