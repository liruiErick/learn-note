* jQuery 常用函数
注意，大部分函数的返回值都是 jQuery 对象。
凡是接受以下参数类型之一作为参数的函数，也同时接受其他两个类型的参数：
1、一个 jQuery 选择器字符串
2、一个 jQuery 对象
3、一个 DOM 对象
4、一个 DOM 对象所组成的数组

* 就绪函数，等同于 window.onload()
$(document).ready(函数); //表示文档就绪后执行的内容，防止文档在完全加载之前运行 jQuery 代码
$(函数); //简写形式
// 文档就绪指的是当文档中所有 DOM 元素创建完成并且可以访问时
// 而 window.onload 则是在文档内所有元素（包括图像）全部加载完成时执行该函数

// 延时就绪函数，必须在 ready() 方法前调用
// 注意，在 ready 事件中可以设置多次 $.holdReady(true)。同时，只有调用了对应数量的 $.holdReady(false) 之后，并且满足正常的文档 ready 条件时，ready 事件才会被真正执行。
$.holdReady(true);
$.getScript("myplugin.js", function() {
  $.holdReady(false);
});
$(document).ready(init);


* 常用顶级函数
$.type(obj); //传入一个js对象，如果是浏览器的内置对象，则返回它的class类型字符串。如果是非浏览器内置对象，则返回“object”
$.contains(DOM1, DOM2); //返回一个布尔值，检查 DOM1 是否为 DOM2 的祖先元素。
$.each(collection, callback(index,element)); //使用 callback 函数遍历 collection 对象。在遍历过程中，返回 false 将跳出循环。
$.map(collection, callback(element,index)); //使用 callback 函数遍历 collection 对象并返回一个新的对象。在遍历过程中，返回值将替换当前值，如果返回 false 则删除当前值。
$.parseJSON(); //将一个JSON格式的字符串转化成JSON对象
$.parseXML(); //将一个XML格式的字符串转化成XML对象
$.globalEval(code); //在全局上下文下执行一些JavaScript代码。此方法的表现不同于正常使用的JavaScript eval()，因为它是在全局上下文下执行（这对加载外部动态脚本很重要）。
$.trim(str); //去掉字符串起始和结尾的空白字符。包括空格，制表符(Tab)，换行符，中文全角空格等。

// 将一个HTML格式的字符串转化成HTML对象。
$.parseHTML(data [, context ] [, keepScripts ]);
// 返回一个数组，包含解析出来的DOM对象，其中可能还掺杂一些空格或换行符构成的文本节点，可以先将数组包装成jQuery对象，然后利用 .filter() 和 .find() 方法找出需要的节点
// 注意，这里解析出来的内容不包含 body 与 head，解析出的 DOM 元素全部为 body 与 head 的直接子节点
// context 为解析HTML字符串的上下文，默认为 document，如果HTML被用在另一个document中，比如一个iframe，那么应该将该iframe的document对象传入
// keepScripts 表示是否在传递的HTML字符串中包含js脚本。

$.inArray(value, array [, fromIndex]); //在数组中查找指定值并返回它的索引，效果类似于数组的 .indexOf()，但是 .indexOf() 不被IE8及以下浏览器支持
$.isArray(obj); //确定的参数是一个数组。
$.isEmptyObject(obj); //检查对象或数组是否为空（不包含任何属性）。
$.isFunction(obj); //确定参数是否为一个Javascript 函数。
$.isNumeric(value); //确定它的参数是否是一个数字。
$.isPlainObject(obj); //测试对象是否是纯粹的对象（通过 "{}" 或者 "new Object" 创建的）
$.isWindow(obj); //确定参数是否为一个window对象。
$.isXMLDoc(node); //检查一个DOM节点是否在XML文档中（或者是一个XML文档）。

// 在第二个函数中遍历数组中所有元素，并返回一个return为true的元素所组成的数组
// 第三个参数如果为true，则返回返回一个return为false的元素所组成的数组
$.grep(array, function(elementOfArray, indexInArray) [, invert]);
$.merge([], oldArray); //接受两个数组作为参数，合并第二个数组到第一个数组中。效果类似数组的 .concat() 方法，但 .concat() 不会改变调用者自身，而是返回一个新数组。
$.unique(array); //删除数组中重复元素。只处理删除DOM元素数组，而不能处理字符串或者数字数组。
$.now(); //方法是表达式(new Date).getTime();或者Date.now();返回数值的一个简写
$.camelCase(string); // Convert 'text-align' => 'textAlign'


* 委托函数
$.proxy();
// 使用方法一：
// 第一个参数为调用的方法
// 第二个参数为该方法调用时 this 的引用对象，如果传入 null，则不会改变 this 的引用。
$("div").animate({left:'100px'},"slow",$.proxy(man.say, man));
// 使用方法二：
// 第一个参数为调用方法时 this 的引用对象，如果传入 null，则不会改变 this 的引用
// 第二个参数为将要调用 this 引用对象的方法的名称字符串。
$("div").animate({left:'100px'},"slow",$.proxy(man, "say"));
// 从 jQuery 1.6 开始，以上两种用法从第三个参数开始可以为调用函数传入若干个参数
// 如果该函数本身就有默认参数，比如 .each() 方法会给函数传入两个参数，分别为索引号和对应的对象，那么通过代理设置的参数会插在原函数的参数前
// 例如：.each(function(index,element); 接受到代理的参数后会变为 .each(function(代理参数,index,element);


* jQuery 对象中 DOM 元素的遍历

// 遍历 jQuery 对象，将每个 DOM 元素传入参数指定的函数，函数返回 false 可用于停止循环。
// index  代表当前元素的索引
// element  当前的元素（也可使用 "this" 选择器）
$(selector).each(function(index,element));

// 遍历 jQuery 对象，将每个 DOM 元素传入参数指定的函数，生成返回值所组成的 jQuery 对象。
$(selector).map(function(index,element));

// 遍历 jQuery 对象，将每个 DOM 元素传入参数指定的函数，生成返回值为 true 的元素所组成的 jQuery 对象。
$(selector).filter(function(index,element));

// 返回 jQuery 对象中首个 DOM 元素在 DOM 树中相对于同胞元素所对应索引。
$("div").index(); 
// 如果传入一个 DOM 元素或者 jQuery 对象作为参数，那么将会返回参数指定对象（如果是 jQuery 对象，则是其中首个 DOM元素）在当前 jQuery 对象中的索引位置，如果没有找到则返回-1。
// 如果传入一个选择器字符串作为参数，那么将会返回当前 jQuery 对象中首个 DOM 元素在参数指定的选择器选择范围内的索引位置。

$("div").first(); //在所有匹配元素集合中，返回第一个元素的 jQuery 对象。
$("div").last(); //在所有匹配元素集合中，返回最后一个元素的 jQuery 对象。
$("div").eq(index); //在所有匹配元素集合中，返回指定索引对应的元素的 jQuery 对象。同时参数还支持负数，-1表示返回倒数第一个元素的 jQuery 对象。

$("div").add("*"); //一个必需参数，该参数是一个 jQuery 选择器或对象，返回一个包含 匹配参数的元素 以及 所有匹配元素 一起组成的 jQuery 对象，但不会改变原 jQuery 对象。
$("div").filter("*"); //一个必需参数，该参数是一个 jQuery 选择器或对象，在所有匹配元素中，返回所有匹配参数的元素所组成的 jQuery 对象。
$("div").not("*"); //一个必需参数，该参数是一个 jQuery 选择器或对象，在所有匹配元素中，返回所有不匹配参数的元素所组成的 jQuery 对象。
$("div").has("*"); //一个必需参数，该参数是一个 jQuery 选择器或对象，在所有匹配元素中，返回所有后代元素中包含 匹配参数的元素 的元素所组成的 jQuery 对象。
$("div").is("*"); //一个必需参数，该参数是一个 jQuery 选择器或对象，返回一个布尔值，用于检查所有匹配的元素中，是否有匹配参数的元素。
$("div").slice(startIndex, endIndex); //在所有匹配的元素所组成的 jQuery 对象中，返回从起始索引到结束索引所包含的所有元素（不包含结束索引对应的元素）所组成的 jQuery 对象。（用法与传统slice()函数相同）

.end(); //用于方法链中，结束当前链中最近的一次筛选操作，并将匹配元素组成的 jQuery 对象返回到前一次的状态。
例如：$("div").find("span").end().css("border", "2px red solid");
相当于：$("div").css("border", "2px red solid");

.addBack(); //用于方法链中，将当前 jQuery 对象与前一次匹配的 jQuery 对象组合成新一个新的 jQuery 对象
.andSelf(); //与 .addBack() 完全相同，实际内部就是 addBack 的第二个引用（1.8后已被弃用，请使用 addBack）
// 一个可选参数，接受一个选择器字符串，用于在前一次匹配的 jQuery 对象中过滤出匹配的元素进行组合。
// 实际上私有属性 prevObject 就是前一次的 jQuery 对象
// 如果 jQuery 对象中的 DOM 对象的顺序是按照文档树中为倒序排列的（由里向外 或者 由后到前），那么调用 .addBack() 后元素次序会颠倒，变为正序排列（由外向里 或者 由前到后）。而正序排列的则不会改变，仍然是正序排列
例如：
$("li:eq(4)")
	.prevAll() //=> [li4, li3, li2, li1]
	.addBack(); //=> [li1, li2, li3, li4, li5]

$("div").parent(); //返回所有匹配元素的直接父元素所组成的 jQuery 对象。一个可选参数，该参数是一个 jQuery 选择器或对象，用于返回只匹配选择器的元素。
$("div").parents(); //返回所有匹配元素的所有祖先元素所组成的 jQuery 对象。一个可选参数，该参数是一个 jQuery 选择器或对象，用于返回只匹配选择器的元素。
$("div").parentsUntil("p"); //返回所有匹配元素到给定元素之间的所有祖先元素所组成的 jQuery 对象（不包括给定元素），并且会过滤掉重复的祖先元素。
$("div").closest("*");  //一个必需参数，该参数是一个 jQuery 选择器或对象，所有匹配元素从自身所在层级开始向上遍历，返回第一个匹配参数的祖先元素所组成的 jQuery 对象。

// 区别对比
.closest()
1) 开始于当前元素
2) 在 DOM 树中向上遍历，直到找到与提供的选择器相匹配的元素
3) 返回包含零个或一个元素的jQuery对象

.parents()
1) 开始于父元素
2) 向上遍历DOM树到文档的根元素，每个祖先元素加入到临时集合，如果提供一个选择器，则会使用该选择器在集合中进行过滤
3) 返回包含零个，一个或多个元素的jQuery对象

$("div").children(); //返回所有匹配元素的所有直接子元素所组成的 jQuery 对象。一个可选参数，该参数是一个 jQuery 选择器或对象，用于返回只匹配选择器的元素。
$("div").contents(); //返回所有匹配元素的所有直接子元素以及子文本段落所组成的 jQuery 对象。一个可选参数，该参数是一个 jQuery 选择器或对象，用于返回只匹配选择器的元素。
// .contents() 方法也可以用于获得 iframe 的内容文档，前提是该 iframe 与主页面在同一个域。

$("div").find("*"); //一个必需参数，该参数是一个 jQuery 选择器或对象，在所有匹配元素的后代元素中，返回匹配参数的元素所组成的 jQuery 对象，一路向下直到最后一个后代。
$("div").siblings(); //返回所有匹配元素的所有同胞元素所组成的 jQuery 对象。一个可选参数，该参数是一个 jQuery 选择器或对象，用于返回只匹配选择器的元素。
$("div").next(); //返回所有匹配元素的下一个同胞元素所组成的 jQuery 对象。
$("div").nextAll(); //返回所有匹配元素之后的所有同胞元素所组成的 jQuery 对象。
$("div").nextUntil("p"); //返回所有匹配元素之后到给定元素之间的所有同胞元素所组成的 jQuery 对象（不包括给定元素）。
$("div").prev(); //返回所有匹配元素的前一个同胞元素所组成的 jQuery 对象。
$("div").prevAll(); //返回所有匹配元素之前的所有同胞元素所组成的 jQuery 对象。
$("div").prevUntil("p"); //返回所有匹配元素之前到给定元素之间的所有同胞元素所组成的 jQuery 对象（不包括给定元素）。




* jQuery 对象中 DOM 内容的操作

// 创建所有匹配元素所组成的 jQuery 对象的副本。
$("div").clone();
// 两个可选布尔值参数，默认都为 false。
// 第一个参数设定是否复制元素上的事件处理函数和.data()绑定数据，但绑定数据只是进行浅拷贝。
// 第二个参数再第一个参数为 true 时起到增强作用，设定是否对数据进行深拷贝。

// 以下函数的参数可以是文档的字符串形式，也可以是 DOM 元素或者 jQuery 对象
$("div").after(content); //在所有匹配的元素之后插入由参数指定的内容，能以参数形式同时插入多个内容。
$("div").before(content); //在所有匹配的元素之前插入由参数指定的内容，能以参数形式同时插入多个内容。
$(content).insertAfter("div"); //把内容插入到由参数指定的所有匹配元素的后面。
$(content).insertBefore("div"); //把内容插入到由参数指定的所有匹配元素的前面。

// 以下函数的参数可以是文档的字符串形式，也可以是 DOM 元素或者 jQuery 对象
$(target).append(content); //向所有匹配目标元素中的每个元素内容的结尾插入由参数指定的内容，能以参数形式同时插入多个内容。
$(target).prepend(content); //向所有匹配目标元素中的每个元素内容的开头插入由参数指定的内容，能以参数形式同时插入多个内容。
$(content).appendTo(target); //把内容插入到由参数指定的所有匹配目标元素的内容结尾。
$(content).prependTo(target); //把内容插入到由参数指定的所有匹配目标元素的内容开头。

$("div").remove(); //从 DOM 中移除所有匹配的元素，同时移除所有绑定事件和附加数据。一个可选参数，该参数是一个 jQuery 选择器或对象，用于删除只匹配选择器的元素。
$("div").detach(); //与 remove() 作用相同。但这个方法会保留所有绑定的事件、附加的数据，以便再一次被加入文档。一般用于临时删除
$("div").empty(); //删除所有匹配的元素中全部的子节点，同时移除所有绑定事件和附加数据。

// 用新内容替换所有匹配的目标元素。
// replaceWith() 与 replaceAll() 作用相同。差异在于内容和选择器的位置，以及 replaceAll() 无法使用函数进行替换。
$(content).replaceAll(target);
$(target).replaceWith(content);
例如：$("div").replaceWith("<p>Hello world!</p>");

// 注意，所有包裹方法都必须在该 jQuery 元素对应的 DOM 对象加入到文档树中后才有效。
// 如果是动态创建的 DOM 元素，必须先添加进文档树，才能使用以下方法，否则无效。
// 如果 content 参数为 jQuery 对象或者 DOM 元素，那么所生成的包裹元素将是一个该对象的克隆，而非实际的该对象
$("div").unwrap(); //移除所有匹配元素的父元素。
$("div").wrap(content); //把所有匹配的元素分别用参数指定的内容或元素包裹起来。
$("div").wrapAll(content); //把所有匹配的元素一起用参数指定的内容或元素包裹起来。
$("div").wrapInner(content); //将所有匹配的元素的子内容用参数指定的内容或元素包裹起来。
例如：$("div").wrapinner("<i></i>");



* jQuery 对象中 DOM 属性的操作

$("div").text("内容"); //设置或返回所有匹配元素的文本内容。
$("div").html("内容"); //设置所有或返回首个匹配元素的内容（包括 HTML 标记）。
$("div").val("内容"); //设置所有或返回首个匹配表单字段（输入文本框等）的值。

// 设置所有或返回首个匹配元素的属性值（在 jQuery 1.6 以上版本，该方法只用于获取元素标签的属性值）。
// 或者传入一个对象，以键值对的形式同时设置多个属性，键是 DOM 属性名或者属性名的字符串形式。
$("a").attr("属性名","值");
$("div").removeAttr("属性名"); //从所有匹配的元素中移除指定的属性。

// 设置所有或返回首个匹配元素的DOM对象的属性值，而非Html标签的属性。（jQuery 1.6 版本新增）
// 另外，一些 input 元素的特有属性，例如：value、checked、disabled 等，将会按照 W3C 标准返回一个布尔值，而非 attr() 返回的实际值。
$("input").prop("属性名","值"); //使用方法与 attr() 相同
$("input").removeProp("属性名");  //使用方法与 removeAttr() 相同

// 使用静态方法来设置或读取属性，可以省去创建 jQuery 对象的步骤
// 注意，这些静态方法为内部方法，一般不推荐使用，并且只支持设置单属性，不能使用对象同时设置一组属相
// 静态方法中没有 $.removeProp()
$.attr(elem, name, value);
$.removeAttr(elem, value);
$.prop(elem, name, value);

// text()、html()、val() 以及 attr()支持回调函数，回调函数由两个参数：
// i 表示被选元素列表中当前元素的下标。
// origText 表示原始（旧的）值。
// 返回值为将要设置的新字符。
$("div").html(function(i,origText){
	return "Old html: " + origText + "index: " + i; 
});
$("a").attr("href", function(i,origValue){
	return origValue + "/index.html";
});

$("div").hasClass("类名"); //检查所有匹配的元素中是否有元素拥有指定的类。
$("div").addClass("类名"); //向所有匹配的元素添加指定的类名。
$("div").removeClass("类名"); //从所有匹配的元素中删除全部或者指定的类。
$("div").toggleClass("类名"); //从所有匹配的元素中添加或删除一个类。第二个参数为可选参数，传入一个表达式或变量，当该表达式或变量返回true时添加类，否则移除类。



* jQuery 对象中 CSS 的操作

// 设置所有或返回首个匹配元素的样式属性值（属性须为CSS属性名的字符串形式）。
// 或者传入一个对象，以键值对的形式同时设置多个属性，键是 CSS 属性名的字符串形式，也可以是js版本（驼峰命名法）的 CSS 属性。
$("div").css("属性","值"); // 设置该内联样式
$("div").css("属性",""); // 删除该内联样式

$('div').css('width', function(i, v) { // 遍历所有匹配的元素，在回调中返回索引和当前值
	console.log(this, i, v);
});

// 使用静态方法来设置或读取样式，可以省去创建 jQuery 对象的步骤
// 注意，这些静态方法为内部方法，一般不推荐使用，并且只支持设置单样式属性，不能使用对象同时设置一组样式属相
$.style(elem, name, value); // 设置内联样式，同时也可以读取内联样式，但是无法读取外部样式
$.css(elem, name); // 读取最终的样式

$("div").css("width");
$("div").css("height");
// 在获取 width、height 样式的值时，需要注意：
// 当元素父容器的 display 不为 none时，无论实际样式设置的值是 px、em 还是百分比，获取到的值全部为带单位的像素值
// 当元素父容器的 display 为 none时，如果实际样式设置的值为百分比，则获取到的值就是带单位的百分比，如果实际样式设置的值为 px、em，则获取到的值全部为带单位的像素值

// 而在获取其他数值类样式的值时，比如 margin、padding 等，需要注意：
// 当元素或者父容器的 display 不为 none时，无论实际样式设置的值是 px、em 还是百分比，获取到的值全部为带单位的像素值
// 当元素或者父容器的 display 为 none时，如果实际样式设置的值为百分比，则获取到的值就是带单位的百分比，如果实际样式设置的值为 px、em，则获取到的值全部为带单位的像素值

$("div").width(value); //设置所有或返回首个匹配元素的宽度属性（不包括内边距、边框和外边距）。
$("div").height(value); //设置所有或返回首个匹配元素的高度属性（不包括内边距、边框和外边距）。
例如：
$(document).height(); //返回文档的高度
$(window).height(); //返回窗口的高度
注意：
当元素的 display 为 none 时，如果宽高为百分比，那么获取的值是基于最近定位父元素宽高的百分比计算出来的不带单位的像素值
当元素父容器的 display 为 none 时，如果宽高为百分比，那么获取的值是不带单位的百分比的数字部分
使用中的BUG：
// 在html下：
$(document)、$("html")、$("body")的.height()返回的都是文档的高度
$(window).height()返回的是窗口的高度
// 在jsp下：
$(document)、$("html")、$(window)的.height()返回的都是文档的高度
$("body").height()返回的是窗口的高度

$("div").innerWidth(); //返回首个匹配元素 内容+内边距 的宽度（不包括边框和外边距）。
$("div").innerHeight(); //返回首个匹配元素 内容+内边距 的高度（不包括边框和外边距）。
$("div").outerWidth(); //返回首个匹配元素 内容+内边距+边框 的宽度（不包括外边距），如果参数为true，则包括外边距。
$("div").outerHeight(); //返回首个匹配元素 内容+内边距+边框 的高度（不包括外边距），如果参数为true，则包括外边距。

$("div").offset(); //返回首个匹配元素的左上 边框外边缘 相对于文档的位置对象，包含left、top两个属性。
// 注意，如果元素是隐藏状态，则获取到的位置相当于当前窗口相对于文档的位置
// 如果元素被移出文档，则获取到的位置全为0
$("div").position(); //返回首个匹配元素的左上 外边距边缘 相对于最近的定位祖先元素的位置对象，包含left、top两个属性。
$("div").offsetParent(); //返回所有匹配元素最近的定位祖先元素所组成的 jQuery 对象，如果祖先元素都不是定位元素，则会得到 html 的 jQuery 对象。(如果碰到定位的祖先元素为 display: none;，那么该元素将会被忽略)
$("div").scrollLeft(value); //设置所有或返回首个匹配元素自身滚动区域的水平偏移。
$("div").scrollTop(value); //设置所有或返回首个匹配元素自身滚动区域的垂直偏移。



* jQuery 对象中数据的操作

// 经测试，jQuery 设置的属性并非是在元素上添加 data-* 属性，可能是内部进行的数据绑定，因此 js 无法读取。但是 js 设置属性，jQuery 可以读取。
// 如果一个对象声明了一个 data-* 属性，当第一次使用 .data(*) 方法读取该属性时，读取到的是声明的属性值，同时 jQuery 会将该值绑定为 data 数据
// 因此，从此以后再次调用 .data(*) 方法，无论是读取还是写入都与元素上原声明的 data-* 属性无关了

$("div").data("key", "value"); //设置所有或返回首个匹配元素的绑定数据，或者传入一个对象，以键值对的形式同时设置多个属性（值可以为任意数据类型）。
$("div").removeData("key"); //删除之前通过 data() 方法设置全部数据，或者删除由参数指定的key及对应的value数据。

// 使用静态方法来设置data数据，可以省去创建 jQuery 对象的步骤
$.data(element, key, value); //后两个参数可以是一个对象，以键值对的形式同时设置多个属性（值可以为任意数据类型）。
$.removeData(element [, name]); //当带name参数调用的时候，jQuery.removeData()将删除那个特有的值，当不带任何参数的时候，所有的值将被移除。
$.hasData(element); //返回一个布尔值，检查 DOM 元素上是否绑定了 jQuery 数据（和 data-* 属性无关）

// 返回对象上绑定的所有数据
$(element).data(); // 如果一个对象声明了一个 data-* 属性，当第一次使用 .data(*) 方法读取该属性时，读取到的是声明的属性值，同时 jQuery 会将该值绑定为 data 数据
$.data(element); // 该方法并不会去检查对象上的 data-* 属性，如果没有 jQuery 的绑定数据，则会返回一个空对象


// 可以使用以上方法操作 DOM 元素的自定义 data-* 属性，例如：
<div id="tel" data-telephone="029-88888888"></div>
$("#tel").data("telephone"); //返回字符串 "029-88888888"
$.hasData(document.getElementById("tel")); //返回 true

// 另外 jQuery 的 data() 方法可以自动将字符串形式的值解析成实际值
<div id="tel" data-tel-iphone="18691236164"></div>
$("#tel").data("tel-iphone"); //返回数字 18691236164
<div id="array" data-arr='[2,1,3,4]'></div>
$("#array").data("arr"); //返回字符串解析成的数组。
<div id="json" data-obj='{"game":"on"}'></div>
$("#json").data("obj").game; //返回字符串 "on"，对象的 key 必须加双引号（也就是标准json格式）才能正确解析。







