* 引用jQuery库
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>


* 获取 jQuery 对象
jQuery 使用 $ 符号作为 jQuery 的引用，$() 相当于jQuery()。
var jq = jQuery.noConflict(); //该方法可以改变 jQuery 的替代符为 jq（只要执行该方法，$符将会失效，而其他替代符不受影响）

// 向该函数传递 DOM 对象（也可传入 DOM 对象所组成的数组）或者 ID 选择器的字符串形式，它会返回 jQuery 对象，带有向其添加的 jQuery 功能。
$(selector/element/elementArray/content);
例如：
var $page = $("#page"); //返回 id 为 test 的 jQuery 对象。
var $body = $(document.body); //返回 document.body 的 jQuery 对象。
var $p = $("<p>这是一个新段落。</p>"); //创建该 <p> 元素的 jQuery 对象。
var $div = $("<div>"); //创建一个空 <div> 元素的 jQuery 对象。

// 如果 jQuery 对象是由选择器生成的，那么 selector 属性就可以返回该选择器字符串
$page.selector; //返回 "#page"（jQuery3.0后被移除）
// 如果 jQuery 对象是由 DOM 对象生成的，那么 context 属性就可以返回该 DOM 对象（window 不属于 DOM 对象，因此不包括在内）
$body.context; //返回 document.body 元素（jQuery3.0后被移除）

// 选择器过滤
$(selector [,context]); //返回 context 中匹配选择器的元素所组成的 jQuery 对象。context 为一个 选择器字符串、DOM 对象、文档或 jQuery 对象。
注意
$(selector,context)
等同于
$(context).find(selector)
也就是说只在上下文的子孙元素中查询，而不查询与上下文同级的元素

// jQuery 对象实际为一个包含了所有匹配元素的集合。
// 可以用 length 属性或者 size() 方法获取所包含元素的数量：
$("div").length;
$("div").size();

// 返回 jQuery 对象中指定索引所对应的 DOM 元素。
$("div").get(index); //如果不传参数，则返回该 jQuery 对象的数组形式
$("div")[index];

// 返回 jQuery 对象的数组形式，数组中包含当前 jQuery 对象所包含的所有 DOM 对象。
$("div").toArray();
$.makeArray(jQuery 对象);

// 判断一个对象是否为 jQuery 对象
$obj instanceof jQuery; //返回true
$obj instanceof $; //返回true
DOM对象 instanceof $; //返回false
$obj.jquery; //一个包含了 jQuery 版本号的字符串。如果为未定义，则表示该对象非 jQuery 对象



* jQuery 对象的扩展
$.extend({
　　add:function(a,b){ return a+b; }
}); //相当于为 jQuery 添加了一个类方法 add()
$.add(1,3); //调用该类方法，返回4

// $.fn 就是 jQuery 的原型 $.prototype
$.fn.extend({
　　output:function(){ alert($(this).html()); }
}); //相当于为 jQuery 的原型 prototype 属性添加了一个实例方法 output()
$("div").output(); //调用该实例方法，弹出该对象所包含 DOM 元素的内容

// 为 jQuery 原型定义一个更新方法，用于更新 jQuery 对象内包含的 DOM 元素
$.fn.update = function() {
	if (this.selector) {
		// 更新jQuery对象包含的元素
		for (var i = 0, l = this.length; i < l; i++) delete this[i];
		this.length = 0;
		$.merge(this, $(this.selector));
	}
}

// 合并对象
// 它的含义是将src1,src2,src3...等对象合并到dest对象中（dest会被改变）,返回值为合并后的dest对象。在遇到对象中有相同 key 时，后面的对象 key 会替换前面的对象 key。
// 第一个参数表示是否深拷贝（即两个参数对象中相同的属性如果是对象，是否也进行合并，而不是单纯的替换，同时也避免了引用的混乱），如果为flase则可以省略。
$.extend(boolean,dest,src1,src2,src3...);
示例 1：
var result=$.extend({},  
	{name:"John", age:21, location:{city:"Boston", county:"USA"}},  
	{name:"Tom", sex:"Boy", location:{state:"MA", county:"China"}}  
);
result=={name:"Tom", age:21, sex:"Boy",
	location:{state:"MA",county:"China"}}
示例 2：
var result=$.extend(true, {},  
	{name:"John", age:21, location:{city:"Boston", county:"USA"}},  
	{name:"Tom", sex:"Boy", location:{state:"MA", county:"China"}}  
);
result=={name:"Tom", age:21, sex:"Boy", 
	location:{city:"Boston",state:"MA",county:"China"}}



* jQuery 定义伪类选择器
$.extend($.expr[":"], {
    "hide" : function(elem) { return elem.style.display == "none"; }
});



* jQuery 选择器（与CSS3选择器原理基本相同）

// jQuery 元素选择器
// jQuery 使用 CSS 选择器来选取 HTML 元素。
$("p"); //返回所有 <p> 元素所组成的 jQuery 对象。
$("p.intro"); //返回所有 class="intro" 的 <p> 元素所组成的 jQuery 对象。
$("p#demo"); //返回所有 id="demo" 的 <p> 元素所组成的 jQuery 对象。
$("#page .text"); //返回 id="page" 元素的所有 class="text" 的子元素所组成的 jQuery 对象。
$("div,p,#test,.content"); //返回所有匹配选择符的元素所组成的 jQuery 对象。

// jQuery 属性选择器
// jQuery 使用 XPath 表达式来选择带有给定属性的元素。
$("[href]"); //返回所有带有 href 属性的元素所组成的 jQuery 对象。
$("[href='#']"); //返回所有带有 href 值等于 "#" 的元素所组成的 jQuery 对象。
$("[href!='#']"); //返回所有带有 href 值不等于 "#" 的元素所组成的 jQuery 对象。
$("[href$='.jpg']"); //返回所有 href 值以 ".jpg" 结尾的元素所组成的 jQuery 对象。

// jQuery CSS 选择器
// jQuery CSS 选择器可用于改变 HTML 元素的 CSS 属性。
$("div").css("background-color","red"); //把所有 p 元素的背景颜色更改为红色
// 或者传入一个对象，以键值对的形式同时设置多个属性（键必须为CSS属性名的字符串形式）。
$("p").css({
	"background-color":"yellow",
	"font-size":"200%"
});



* jQuery 方法链接（函数队列）
允许在相同的元素上运行多条 jQuery 命令（中途允许换行），一条执行完接着执行下一条。
例如：$("#p1").css("color","red").slideUp(2000).slideDown(2000);







