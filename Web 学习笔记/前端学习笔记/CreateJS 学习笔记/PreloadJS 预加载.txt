* 文件预加载方法
var queue = new createjs.LoadQueue();
queue.installPlugin(createjs.Sound);
queue.on("complete", handleComplete, this);
queue.loadFile({id:"sound", src:"http://path/to/sound.mp3"});
queue.loadManifest([
	{id: "myImage", src:"path/to/myImage.jpg"}
]);
function handleComplete() {
	createjs.Sound.play("sound");
	var image = queue.getResult("myImage");
	document.body.appendChild(image);
}


* 预加载器默认支持的文件类型

BINARY：通过XHR原始二进制数据
CSS：CSS文件
IMAGE：常见的图像格式
JavaScript的：JavaScript文件
JSON：JSON数据
JSONP：跨域JSON文件
MANIFEST：JSON格式的加载文件列表
SOUND：音频文件格式
SVG：SVG文件
TEXT：文本
XML：XML数据



>>>>>>>>>> AbstractLoader 扩展自 EventDispatcher <<<<<<<<<<

// 所有预加载类的基础类

* AbstractLoader 属性

canceled; //返回一个布尔值，表示加载器是否被取消了。取消加载不会触发complete事件。
loaded; //返回一个布尔值，表示加载器是否已经完成加载。
progress; //返回该加载队列当前的加载进度比例。该值为 0.0~1.0 之间。



* AbstractLoader 方法

buildPath(src, [data]); //使用一个源和一个数据对象建立一个文件路径，并格式化成一个新的路径。
close(); //关闭并完全清空下载队列，并终止任何正在下载的项目。
load(); //开始加载队列里的项目。该方法可以在一个没有立即加载的 LoadQueue 对象上调用。



* AbstractLoader 的专有事件

loadstart; //整个队列开始加载时触发该事件。
complete; //整个队列加载完成时触发该事件。
error; //当整个队列中某个项目加载出错时触发该事件。如果错误是由一个文件项目造成，那么 event 对象中将包含导致该错误的项目。
	// 该事件 event 对象包含以下专有属性：
	item; //返回当前加被载文件被加载器封装的 item 信息对象。
	error; //错误的对象或文本。（测试为 undefined？）

progress; //当整个队列中每一个文件加载完成时触发一次该事件。
	// 该事件 event 对象包含以下专有属性：
	loaded; //整个队列中已加载项目数的比例。注意，这可能只是 0~1 之间的比例。
	total; //全部加载项目的总字节数。注意，这可能仅仅是1。
	progress; //整个队列中已加载项目数的比例。介于 0~1 之间的加载比例。（测试和 loaded 相同）




>>>>>>>>>> LoadQueue 扩展自 AbstractLoader <<<<<<<<<<

* LoadQueue 方法

LoadQueue ([useXHR=true], [basePath=""], [crossOrigin=""]); //构造函数，创建一个加载器。
// [useXHR=true]  加载器是否使用XHR（XML HTTP请求）进行加载。如果为 false，加载器将尝试使用 TagLoader（html 标签）进行加载。
// [basePath=""]  用于指定所有预加载文件的基路径。
// [crossOrigin=""]  是否支持从CORS系统启用的服务器上加载的图像。要使用它，将此值设置为true。（作用不详）

loadFile(file, [loadNow=true], [basePath=""]); //在加载队列中添加单个文件。
// file  一个路径字符串或者是一个对象。如果是对象则包含如下属性：
//	src - 加载的文件源，可以使路径字符串，也可以使一个 html 标签。
//	type - 当加载的文件源是一个非标准的文件，则需要指定一个文件类型。
//	id - 为加载对象指定一个 id。
//	callback - 可选，用于JSONP请求，定义JSONP加载时要调用的回调方法。
//	data - 一个任意的数据对象，它包含被加载的对象。
//	method - 指定加载请求使用 GET 或 POST 发送数据时到服务器。默认值是“GET”。
//	values - 发送到服务器的 键/值 对所组成的对象。
// [loadNow=true]  用于指定加载队列是否立即开始加载。注意，它会使之前暂定的加载队列恢复加载。
// [basePath=""]  用于指定所有预加载文件的基路径。

loadManifest(manifest, [loadNow=true], [basePath]); //在加载队列中添加多个文件。
// manifest  一个数组，包含若干个文件路径字符串或者是对象，对象所包含的属性参见 loadFile()。

remove(idsOrUrls); //传入一个 src 路径或者加载时指定的 id 名，将从加载队列中移除相对应的文件。可同时传入多个值或者包含多个值的数组，已进行多个文件的项目移除。
removeAll(); //将加载队列清空。
reset(); //将加载队列中的项目全部重新加载。

installPlugin(plugin); //安装一个插件。目前，只有一个插件 SamplePlugin。

getItem(value); //传入一个 src 路径或者加载时指定的 id 名，返回对应文件被加载器封装的 item 信息对象。
getResult(value, [rawResult=false]); //传入一个 src 路径或者加载时指定的 id 名，返回对应文件生成的 html 元素。第二个参数定义是否返回原始值（可能是二进制数据或者文本）。
setMaxConnections(number); //设置并发连接的最大数目，默认为 1。注意，浏览器和服务器可能有一个内置的最大连接数，因此任何额外的连接可能会保持在挂起状态，直到浏览器打开该连接。
setPaused(boolean); //传入一个布尔值，设置加载队列是否暂停。
setUseXHR(boolean); //传入一个布尔值，设置加载器是否使用XHR（XML HTTP请求）进行加载。如果浏览器不支持 XHR，将返回false。



* LoadQueue 属性

maintainScriptOrder; //一个布尔值，设置是否加载文件项目时，一次只加载一个文件。默认为 true，表示确保一个文件加载完成后，才加载下一个文件。
stopOnError; //设置在遇到加载错误时，是否停止加载队列继续向下加载。默认为 false。
next; //返回在当前加载队列中，下一个将要被加载的项目。
useXHR; //只读，返回加载器是否使用XHR（XML HTTP请求）进行加载。如果要修改请使用 setUseXHR()。

// 静态属性
loadTimeout; //设置加载超时的限制时间，单位毫秒，默认为8000毫秒。如果加载超时，那么将会调度 error 事件。

// 静态常量
BINARY 或者 "binary"  二进制文件
CSS 或者 "css"  CSS文件
IMAGE 或者 "image"  常见的图像格式
JAVASCRIPT  或者 "javascript"  JavaScript文件
JSON 或者 "json"  JSON数据
JSONP 或者 "jsonp"  跨域JSON文件
MANIFEST 或者 "manifest"  JSON格式的加载文件列表
SOUND 或者 "sound"  音频文件格式
SVG 或者 "svg"  SVG文件
TEXT 或者 "text"  文本
XML 或者 "xml"  XML数据



* LoadQueue 的专有事件

filestart; //当前加载队列中每一个文件项目开始加载时都会触发一次该事件
	// 该事件 event 对象包含以下专有属性：
	item; //返回当前被加载文件被加载器封装的 item 信息对象。

fileload; //当前加载队列中每一个文件项目加载完成时都会触发一次该事件
	// 该事件 event 对象包含以下专有属性：
	item; //返回当前加被载文件被加载器封装的 item 信息对象。
	result; //返回当前被加载的文件生成的 html 元素。
	rawResult; //返回当前被加载的文件的原始值（可能是二进制数据或者文本）。

fileprogress; //当前加载队列中每一个文件项目加载进度改变时触发该事件。（测试无法触发该事件？）
	// 该事件 event 对象包含以下专有属性：
	item; //返回当前加被载文件被加载器封装的 item 信息对象。
	loaded; //返回当前加被载文件已加载的比例。注意，这可能只是 0~1 之间的比例。
	total; //返回当前加被载文件的总字节数。注意，这可能仅仅是1。
	progress; //返回当前加被载文件已加载的比例。介于 0~1 之间的加载比例。

// 以上事件中，item对象包含 ext（文件扩展名）、id（文件名）、path（所在目录）、src（文件路径）、tag（标签 id class）、type（文件类型）等属性值。



