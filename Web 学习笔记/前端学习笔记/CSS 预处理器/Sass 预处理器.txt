Sass是Ruby语言写的，如果使用的是IOS系统，那么系统已经安装好了Ruby。如果使用的是Windows系统，那么就需要安装Ruby环境。

官方网站：
http://sass-lang.com/

Sass和CSS非常相似，但是在Sass中是没有花括号 {} 和分号 ; 的。
在Sass3（又名 SCSS）之后的版本都开始支持花括号 {} 和分号 ; 

在CSS中，用 @import 来导入样式的做法会增加 HTTP 的请求。
但是在CSS预处理器中的导入 @import 规则和CSS的有所不同，它只是在语义上导入不同的文件，但最终结果是生成一个CSS文件。


* Sass中用“$”符号定义变量，后面跟变量名称，并且支持运算符：
$red: #f00
$fontsize: 12px
h1
	color: $red;
	font-size: $fontsize + 10px
h2
	color: $red - #101


* Sass中选择器嵌套和属性嵌套：
.header
	.top
		font:
			weight: bold
			size: $fontsize + 10px
	.nav
		font:
			size: $fontsize
等同于：
.header .top {
  font-weight: bold;
  font-size: 22px;
}	
.header .nav {
  font-size: 12px;	
}


* Sass中使用关键词“@mixin”来定义混合，也可以在混合中设置默认值（类似于函数），并且可以使用关键词“@include”调用：
@mixin border-radius($amount: 5px)
  -moz-border-radius: $amount
  -webkit-border-radius: $amount
  border-radius: $amount
h1
  @include border-radius(2px)


* Sass中使用关键词“@extend”，后而跟上要继承的选择器，那么这个选择器就会继承另一个选择器的所有样式：
.grid
  border: 1px solid #ccc
.header
  @extend .grid
  border-width: 2px

// 扩展占位符（占位符不会被输出到css文件）
%inbl {
  display: inline-block;
  *display: inline;
  *zoom: 1;
}
.box {
  @extend %inbl;
}


* Sass中自带一些颜色函数：
lighten($color, 10%); /* 返回的颜色在$color基础上变亮10% */
darken($color, 10%);  /* 返回的颜色在$color基础上变暗10% */
saturate($color, 10%);   /* 返回的颜色在$color基础上饱和度增加10% */
desaturate($color, 10%); /* 返回的颜色在$color基础上饱和度减少10% */
grayscale($color);  /* 返回$color的灰度色*/
complement($color); /* 返回$color的补色 */
invert($color);     /* 返回$color的反相色 */
mix($color1, $color2, 50%); /* $color1 和 $color2 的 50% 混合色*/



* @at-root
scss:
.parent {
  @at-root .child { ... }
}
output:
.parent { ... }
.child { ... }

scss:
.parent {
  @at-root {
    .child1 { ... }
    .child2 { ... }
  }
  .step-child { ... }
}
output:
.parent { ... }
.child1 { ... }
.child2 { ... }
.parent .step-child { ... }


* @content 内置参数
// 将该聚合中的内容作为 @content 进行输出
@mixin keyframes($name) { 
  @-webkit-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}


* if 判断
@if用not,or,and分别表示非，或，与。
用==,!=分别表示等于与不等于。
例如：
@if $baseWidth {
  width: 100% * $width / $baseWidth;
  height: 0;
  padding-top: 100% * $height / $baseWidth;
} @else if $height {
  width: $width;
  height: $height;
} @else {
  width: $width;
  height: $width;
}
注意，如果直接用变量作为判断，那么只有变量值为null才会判定位false。如果为0或者""空字符串，则会判定为true。

// if else 简写
@return if($value > $max, $max, if($value < $min, $min, $value));


* 循环
// for 循环
@for $i from 1 through 3 {
  .item-#{$i} { width: 2em * $i; }
}
// each 循环
简单用法：
@each $animal in puma, sea-slug, egret, salamander {
  .#{$animal}-icon {
    background-image: url('/images/#{$animal}.png');
  }
}
多重遍历：
@each $animal, $color, $cursor in (puma, black, default),
                                  (sea-slug, blue, pointer),
                                  (egret, white, move) {
  .#{$animal}-icon {
    background-image: url('/images/#{$animal}.png');
    border: 2px solid $color;
    cursor: $cursor;
  }
}
遍历map：
@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
  #{$header} {
    font-size: $size;
  }
}
// while 循环
$i: 6;
@while $i > 0 {
  .item-#{$i} { width: 2em * $i; }
  $i: $i - 2;
}





