meta是用来在HTML文档中模拟HTTP协议的响应头报文。meta 标签用于网页的<head>与</head>中

name 属性：

1、用以说明生成工具（如Microsoft FrontPage 4.0）等。
<meta name="generator" content="">

2、向搜索引擎说明你的网页的关键词。
<meta name="keywords" content="Adobe,Flash,AS3,AIR,html5,CSS3,JS,jQuery">

3、告诉搜索引擎你的站点的主要内容。
<meta name="description" content="web前端开发">

4、告诉搜索引擎你的站点的制作的作者。
<meta name="author" content="你的姓名">

5、告诉搜索引擎你的站点何时完成。
<meta name="creation-date" content="01-jan-2001 20:40:01">



6、<meta name="robots" content= "all|none|index|noindex|follow|nofollow">
其中的属性说明如下：
设定为all：告诉搜索引擎允许抓取本页，并将本页面记作本页面内所有链接指向网站的反向链接。
设定为none：告诉搜索引擎不允许抓取本页，也不要将本页面记作本页面内所有链接指向网站的反向链接。
设定为index：告诉搜索引擎允许抓取本页。
设定为follow：告诉搜索引擎将本页面记作本页面内所有链接指向网站的反向链接，可以增加这些网站的排名。
设定为noindex：告诉搜索引擎不允许抓取本页。
设定为nofollow：告诉搜索引擎不要将本页面记作本页面内所有链接指向网站的反向链接，防止这些网站排名欺诈。



7、部分浏览器屏幕初始化设置

可以让该网页在 iOS 桌面直接打开时全屏显示
<meta name="apple-touch-fullscreen" content="yes" />

UC手机浏览器（U3内核）打开时屏幕初始化设置
<meta name="screen-orientation" content="landscape" /> landscape 强制横屏，portrait 强制竖屏
<meta name="full-screen" content="yes"/> yes 强制全屏
<meta name="browsermode" content="application"/> 浏览模式为 application 应用模式
当进入应用模式时，浏览器将自动调整以下参数：
全屏: 生效，可通过meta或js api调用退出全屏
长按菜单: 失效，可通过js api调用重新生效
浏览器默认手势: 失效，可通过js api调用重新生效
排版模式: 标准模式，可通过meta或js api调用设置其他排版模式
强制图片显示: 生效
夜间模式: 失效，可通过meta或js api调用启用夜间模式

<meta name="x5-fullscreen" content="true"/> 未知？
<meta name="360-fullscreen" content="true"/> 360手机浏览器？



8、设置移动设备虚拟窗口 viewport 的宽高（也就是 window 的宽高，但不是设备屏幕的物理宽高。viewport 会影响到 Media Queries 媒体查询）
各移动设备浏览器虚拟窗口 viewport 的默认宽度值：
Safari iPhone: 980px
Opera: 850px
Android WebKit: 800px
IE: 974px

<!-- 让浏览器虚拟窗口 viewport 的宽度等于设备屏幕的物理宽度，根据需要也可以设置高度 -->
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=yes" />
<!-- 常用写法 -->
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no" />

width = [pixel_value | device-width ]
		表示 viewport 的宽度值。如果设置了 initial-scale 值，那么 width 并不是 viewport 的最终宽度值。
height = [pixel_value | device-width ]
		表示 viewport 的高度值。如果设置了 initial-scale 值，那么 height 并不是 viewport 的最终高度值。

initial-scale = float_value
		表示设备屏幕的物理宽高相对于 window 宽高的初始缩放比例。【默认值】 = 【设备的物理宽高】 / 【viewport 的最终宽高值】。
		如果设置了 initial-scale 值，浏览器会用【设备的物理宽高】除以【initial-scale】计算出一个【viewport 值】。
		然后和 width/height 比较并取最大值作为 viewport 的最终宽高值（最新发现，当设置了 initial-scale 后，width/height的设置会被无视，有待考证）。
minimum-scale = float_value
		表示设备屏幕的物理宽高相对于 window 宽高的最小缩放比例。
maximum-scale = float_value
		表示设备屏幕的物理宽高相对于 window 宽高的最大缩放比例。
user-scalable = float_value
		表示是否允许用户缩放页面，并使 window 相对于设备屏幕看上去像是被缩放。
		默认值为 yes 表示允许缩放，即设备屏幕输出宽度 = 设备屏幕的物理宽度。
		如果值为 no 表示不允许缩放，即设备屏幕输出宽度 = 设备屏幕的物理宽度 / Math.min(initial-scale,1)。也就是说 设备屏幕输出宽度 = window 宽高。

target-densitydpi = [dpi_value | device-dpi | high-dpi | medium-dpi | low-dpi]
		定义为每英寸点的数量（dpi）Android支持三种屏幕像素密度：低像素密度，中像素密度，高像素密度。
		一个低像素密度的屏幕每英寸上的像素点更少，而一个高像素密度的屏幕每英寸上的像素点更多。Android Browser和WebView默认屏幕为中像素密度。
		device-dpi – 使用设备原本的 dpi 作为目标 dp。 不会发生默认缩放。
		high-dpi – 使用hdpi 作为目标 dpi。 中等像素密度和低像素密度设备相应缩小。
		medium-dpi – 使用mdpi作为目标 dpi。 高像素密度设备相应放大， 像素密度设备相应缩小。 这是默认的target density.
		low-dpi - 使用mdpi作为目标 dpi。中等像素密度和高像素密度设备相应放大。
		<value> – 指定一个具体的dpi 值作为target dpi. 这个值的范围必须在70–400之间。

minimal-ui	iOS 7.1的Safari为meta标签新增minimal-ui属性，在网页加载时隐藏地址栏与导航栏（不幸的是 IOS 8 中被删除）
		

因此实际应用时可简写以下任一形式：
<meta name="viewport" content="width=device-width, user-scalable=no" />
但是以上写法在微信内置的 webview 下，设备呼出键盘后翻转时会出现屏幕不能自适应的bug，因此必须设置 initial-scale=1.0
<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />



9、为页面在 windows8 系统下固定网站功能的图标指定背景颜色，平铺图像（144x144的PNG格式）
<meta name="msapplication-TileColor" content="#d83434" />
<meta name="msapplication-TileImage" content="#d83434" />



10、为IE定义单独的标题
<meta name="title" content="标题" />



11、强制 360 浏览器使用某一个内核
<meta name="renderer" content="webkit"> 用极速内核
<meta name="renderer" content="ie-comp"> 用ie兼容内核
<meta name="renderer" content="ie-stand"> 用ie标准内核



12、转码申明：用百度打开网页可能会对其进行转码（比如贴广告），避免转码可添加如下meta
<meta http-equiv="Cache-Control" content="no-siteapp" />



13、WebApp之Meta标签
"添加到主屏幕“后，全屏显示
<meta name="apple-touch-fullscreen" content="yes" />
ios7 中已经不再支持该功能，在"添加到主屏幕“后打开，默认就会全屏显示
ios9 中同样不支持该功能，同时在"添加到主屏幕“后打开，不在会再像ios7那样默认全屏

是否让网页内容以应用程序风格显示，即隐藏默认的苹果工具栏和菜单栏。
<meta name="apple-mobile-web-app-capable" content="yes" />
content有两个值”yes”和”no”。默认为 no 表示显示工具栏和菜单栏，yes 表示隐藏工具栏和菜单栏。
ios7 中已经不再支持该功能，在屏幕原生滚动时将会自动隐藏工具栏
有一点值得注意，如果设置了body的背景色或者背景图，则可以被自动应用为工具栏的磨砂透明底色或底图。
ios9 中又重新支持该功能（webapp必备）

设置状态栏样式（显示电量的那个黑条）
<meta name="apple-mobile-web-app-status-bar-style" content="black" /> 
ios6 中默认值为default（白色），可以定为black（黑色）和black-translucent（灰色半透明）。
注意： 若值为“black-translucent”将会占据页面px位置，浮在页面上方
ios7 中已经不再支持该功能，默认为完全透明的底色
ios9 中又重新支持该功能（只有声明了该标签，默认才为白色，如果未声明则为黑色）

告诉设备是否将页面中的电话号码显示为拨号的超链接，默认为 yes。
<meta name="format-detection" content="telephone=no" />
告诉设备是否将页面中的电子邮箱显示为邮箱的超链接，默认为 yes。
<meta name="format-detection" content="email=no" />
告诉设备是否允许页面链接跳转到地图应用，默认为 yes。
<meta name="format-detection" content="adress=no" />

将它们写在一起
<meta name="format-detection" content="telephone=no, email=no" />

清除WindowsPhone上的点击高亮
<meta name="msapplication-tap-highlight" content="no" />




http-equiv属性：

1、用以说明主页制作所使用的文字以及语言。
<meta http-equiv="content-type" content="text/html";charset=gb_2312">网页文字类型为简体中文编码
<meta http-equiv="content-language" content="zh-CN">网页语言类型为中国大陆简体中文

注意：ISO 639和ISO 3166约定语言名称使用小写，国家代码使用大写。这是一个推荐使用的惯例，并不是强制要求；语言代码是不区分大小写的。

网页文字类型：
iso-8859-1：英文编码
iso-2022-jp、shift_JIS：日文编码
gbk：中文编码
big5：繁体中文编码
utf-8：标准utf-8编码（没有国家的编码）

语言类型（一般声明在<html lang="zh">）：
zh: 中文
zh-CN：中国大陆，简体中文
zh-TW：中国台湾，繁体中文
zh-HK：中国香港，繁体中文
en: 英文
ja: 日文



2、定时让网页在指定的时间n秒后，跳转到指定页面http://yourlink。如果不填写url，则会自动刷新本页面。
<meta http-equiv="refresh" content="n;url=http://yourlink">



3、是用于设定禁止浏览器从本地机的缓存中调阅页面内容，设定后一旦离开网页就无法从Cache中再调出。
<meta http-equiv="pragma" content="no-cache">兼容http 1.0和http 1.1
<meta http-equiv="cache-control" content="no-cache">只能应用于http 1.1

// cache-control 取值说明：
public  所有内容都将被缓存
private  内容只缓存到私有缓存中
no-cache  所有内容都不会被缓存
no-store  所有内容都不会被缓存到缓存或 Internet 临时文件中
must-revalidation/proxy-revalidation  如果缓存的内容失效，请求必须发送到服务器/代理以进行重新验证
max-age=xxx(xxx is numeric)  缓存的内容将在 xxx 秒后失效, 这个选项只在HTTP 1.1可用, 并如果和Last-Modified一起使用时, 优先级较高

// cache-control 的值对浏览器响应：
打开一个新的浏览器窗口
public  浏览器呈现来自缓存的页面
private  浏览器重新发送请求到服务器
no-cache/no-store  浏览器重新发送请求到服务器
must-revalidation/proxy-revalidation  浏览器重新发送请求到服务器
max-age=xxx(xxx is numeric)  在 xxx 秒后，浏览器重新发送请求到服务器
在原窗口中单击 Enter 按钮
public  浏览器呈现来自缓存的页面
private  第一次，浏览器重新发送请求到服务器；此后，浏览器呈现来自缓存的页面
no-cache/no-store  浏览器重新发送请求到服务器
must-revalidation/proxy-revalidation  第一次，浏览器重新发送请求到服务器；此后，浏览器呈现来自缓存的页面
max-age=xxx(xxx is numeric)  在 xxx 秒后，浏览器重新发送请求到服务器
刷新
public  浏览器重新发送请求到服务器
private  浏览器重新发送请求到服务器
no-cache/no-store  浏览器重新发送请求到服务器
must-revalidation/proxy-revalidation  浏览器重新发送请求到服务器
max-age=xxx(xxx is numeric)  浏览器重新发送请求到服务器
单击 Back 按钮
public  浏览器呈现来自缓存的页面
private  浏览器呈现来自缓存的页面
no-cache/no-store  浏览器重新发送请求到服务器
must-revalidation/proxy-revalidation  浏览器呈现来自缓存的页面
max-age=xxx(xxx is numeric)  在 xxx 秒后，浏览器重新发送请求到服务器



4、可以用于设定网页的到期时间，一旦过期则必须到服务器上重新调用。需要注意的是必须使用GMT时间格式。
<meta http-equiv="expires" content="Mon,12 May 2001 00:20:00 GMT">
<meta http-equiv="expires" content="0">同样可以起到禁用缓存的作用



5、cookie设定，如果网页过期，存盘的cookie将被删除。需要注意的也是必须使用GMT时间格式。
<meta http-equiv="set-cookie" content="Mon,12 May 2001 00:20:00 GMT">



6、网页等级评定，在IE的internet选项中有一项内容设置，可以防止浏览一些受限制的网站，而网站的限制级别就是通过meta属性来设置的。
<meta http-equiv="pics-label" content="">



7、强制页面在当前窗口中以独立页面显示，可以防止自己的网页被别人当作一个frame页调用。
<meta http-equiv="windows-target" content="_top">



8、设定进入和离开页面时的特殊效果，这个功能即FrontPage中的“格式/网页过渡”，不过所加的页面不能够是一个frame页面。（IE专用）
<meta http-equiv="page-enter" content="revealTrans(duration=1, transtion=23)">进入本页时
<meta http-equiv="page-exit" content="revealTrans(duration=1，transtion=6)">离开本页时
<meta http-equiv="site-enter" content="revealTrans(duration=1, transtion=23)">进入本站时
<meta http-equiv="site-exit" content="revealTrans(duration=1，transtion=6)">离开本站时
content="revealTrans(duration=1，transtion=6)"  指定换页特效
content="blendTrans(duration=0.5)"  设定换页特效为"混合"（产生渐隐效果）
duration  表示特效持续时间（秒）
transtion  提供了24种图象转化的效果，以0-23代替特效
0: 矩形缩小		1: 矩形扩大 　　　　 
2: 圆形缩小		3: 圆形扩大 　　　　 
4: 下到上刷新		5: 上到下刷新 　　　　 
6: 左到右刷新		7: 右到左刷新 　　　　 
8: 竖百叶窗		9: 横百叶窗　　　　　　　　 
10: 错位横百叶窗	11: 错位竖百叶窗　　　 　 
12: 点扩散		13: 左右到中间刷新　　 　　 
14: 中间到左右刷新	15: 中间到上下　　　　 　 
16: 上下到中间		17: 右下到左上　　　　 
18: 右上到左下		19: 左上到右下　　　　 
20: 左下到右上		21: 横条 　　　　　 
22: 竖条		23: 以上22种随机选择一种



9、页面渲染兼容设置（IE8及以上浏览器可用，它告诉浏览器采用何种IE版本的文档模式去渲染网页）
<!-- 用以声明当前页面用chrome内核来渲染 -->
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<!-- 这样写可以达到的效果是如果安装了GCF，则使用GCF来渲染页面，如果未安装GCF，则使用最高版本的IE内核进行渲染 -->
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<!-- Edge 模式通知 IE 以最高级别的可用模式显示内容 -->
<meta http-equiv="X-UA-Compatible" content="edge" /> 
<!-- content="IE=7"表示无论页面是否包含<!DOCTYPE>指令，都使用 IE 7的标准模式 -->
<!-- content="IE=EmulateIE7"模式遵循<!DOCTYPE>指令。对于多数网站来说，它是首选的兼容性模式 -->
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />




