## 数学

Math.random(); // 随机0-1,不包含1

Math.random()*0xFFFFFF; // 随机颜色

Math.round(); // 取整四舍五入

Math.floor(); // 取整，正数不进位，负数进位

Math.ceil(); // 取整，正数进位，负数不进位

Math.abs(); // 取绝对值

Math.sqrt(); // 一算一个数的平方根

Math.pow(a,b); // a的b次幂

Math.min(a,b,c); // 返回abc中最小的一个值

Math.max(a,b,c); // 返回abc中最大的一个值

Math.PI; // 圆周率

Math.sin(弧度); // 正弦,求对边比斜边的比值,有正负,另外sin(0)等于0

Math.asin(比值); // 反正弦,用对边比斜边的比值求弧度,有正负,比值必须为-1~1之间的数,否则输出NaN

Math.cos(弧度); // 余弦,求邻边比斜边的比值,无正负,另外cos(0)等于1

Math.acos(比值); // 反余弦,用邻边比斜边的比值求弧度,无正负,比值必须为-1~1之间的数,否则输出NaN

Math.tan(弧度); // 正切,求对边比邻边的比值,有正负,另外tan(0)等于0

Math.atan(y/x); // 反正切,用对边比邻边的比值求弧度,有正负

Math.atan2(y1-y2,x1-x2); // 旋转物与指向物y,x坐标之差,计算旋转物0度位(影片剪辑左侧)到指向物的弧度(指向物与旋转物y,x坐标之差可直接算出影片剪辑右侧到指向物的弧度)

弧度*180/Math.PI = 角度

Math.cos(弧度)*-1 = 移动物到指向物以1为半径圆在x轴上的方向,相当于x轴距离/斜边距离

Math.sin(弧度)*-1 = 移动物到指向物以1为半径圆在y轴上的方向,相当于y轴距离/斜边距离

(x1-x2)/Math.cos(弧度) = (y1-y2)/Math.sin(弧度) = 两点间的距离

### ES6新增

Math.trunc(); // 取整不进位。相当于 number|0

Math.sign(); // 判断一个数到底是正数、负数、还是零。参数为正数，返回+1；参数为负数，返回-1；参数为0，返回0；参数为-0，返回-0；其他值，返回NaN。

Math.cbrt(); // 计算一个数的立方根

Math.hypot(x, y, z); // 返回所有参数的平方和的平方根。等同于 Math.sqrt(x*x + y*y + z*z);

Math.clz32(); // 返回一个数的32位无符号整数形式有多少个前导 0

Math.imul(a, b); // 返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数。
// 即该方法几乎等同于 (a * b)|0 的效果。但是如果计算结果为超过2的53次方的值，则会得到一个不精确的结果。此时需要使用 Math.imul()
// (0x7fffffff * 0x7fffffff)|0        //=>  0
// Math.imul(0x7fffffff, 0x7fffffff)  //=>  1

Math.fround(); // 返回一个数的单精度浮点数形式
// Math.fround(1.337)  //=> 1.3370000123977661

Math.sinh(x); // 返回x的双曲正弦（hyperbolic sine）
Math.cosh(x); // 返回x的双曲余弦（hyperbolic cosine）
Math.tanh(x); // 返回x的双曲正切（hyperbolic tangent）
Math.asinh(x); // 返回x的反双曲正弦（inverse hyperbolic sine）
Math.acosh(x); // 返回x的反双曲余弦（inverse hyperbolic cosine）
Math.atanh(x); // 返回x的反双曲正切（inverse hyperbolic tangent）

Math.expm1(); // Math.expm1(x)返回ex - 1，即Math.exp(x) - 1。
Math.log1p(); // Math.log1p(x)方法返回1 + x的自然对数，即Math.log(1 + x)。如果x小于-1，返回NaN。
Math.log10(); // Math.log10(x)返回以10为底的x的对数。如果x小于0，则返回NaN。
Math.log2(); // Math.log2(x)返回以2为底的x的对数。如果x小于0，则返回NaN。



## Number 对象

Number.MAX_VALUE; //最大数值 1.7976931348623157e+308，它的近似值为 1.7976931348623157 x 10308。
Number.MIN_VALUE; //最小数值 5e-324（接近 0 ，但不是负数），它的近似值为 5 x 10-324。

32位操作系统中最大的符号型整型常量是 -2147483648 ~ 2147483647
二进制
111 1111 1111 1111 1111 1111 1111 1111
八进制
17 777 777 777
十六进制
7FFF FFFF
在32位操作系统中，由于是二进制，其能最大存储的数据是1111111111111111111111111111111。
正因为此，体现在windows或其他可视系统中的十进制应该为2147483647。
所以一般游戏中，钱的数量最大为2147483647。

### 保留N位小数，不会改变原值，而是返回新值
// 注意，返回值是字符串类型，而非数字类型
numObj.toFixed(num);
// num 规定小数的位数，取值 0 ~ 20 之间（包括 0 和 20），过长的小数会被四舍五入截取。默认为 0（即四舍五入取整）。
// 如果小数位数不够 num 的位数，则会用 0 补足

### 检查 NaN 与 Infinite
isNaN(numObj); // 检查数字对象是否为NaN
isFinite(numObj); // 检查数字对象是否为否非无穷，即正常的数字

### 数字解析
parseInt(string, radix); //将字符串形式的数字解析为int值（字符串开头不能为非数字，但可以为空字符，遇到小数点或其它非数字字符，则解析停止并返回结果）
// radix  设置函数将字符串作为多少进制的数来解析。
//	默认值为0，表示将根据字符串的开头字符来判断数字的进制。
//	如果字符串以“0x”或“0X”开头，将被当做 16 进制数来解析。
//	如果字符串以“0”开头，将被当做 8 进制数来解析。
parseFloat(string); //将字符串形式的数字解析为float值（字符串开头不能为非数字，但可以为空字符，遇到其它非数字字符或第二个小数点，则解析停止并返回结果）


## ES6 Number 对象扩展

ES6提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。
将0b和0o前缀的字符串数值转为十进制
Number('0b111')  // 7
Number('0o10')  // 8

### Number.isFinite(), Number.isNaN()

ES6在Number对象上，新提供了 Number.isFinite() 和 Number.isNaN() 两个方法。
它们与传统的全局方法 isFinite() 和 isNaN() 的区别在于，传统方法先调用 Number() 将非数值的值转为数值，再进行判断。
而这两个新方法只对数值有效，非数值一律返回false。
isFinite(25) // true
isFinite("25") // true
Number.isFinite(25) // true
Number.isFinite("25") // false
isNaN(NaN) // true
isNaN("NaN") // true
Number.isNaN(NaN) // true
Number.isNaN("NaN") // false

### Number.parseInt(), Number.parseFloat()

ES6将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。

### Number.isInteger()

用来判断一个值是否为整数。需要注意的是，在JavaScript内部，整数和浮点数是同样的储存方法，所以3和3.0被视为同一个值。
Number.isInteger(25) // true
Number.isInteger(25.0) // true
Number.isInteger(25.1) // false
Number.isInteger("15") // false
Number.isInteger(true) // false

### Number.EPSILON

最小浮点数常量，通常如果两个浮点数的差值小于这个常量，则表明这两个浮点数可以视为相等

### 安全整数和Number.isSafeInteger()

JavaScript能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。
Math.pow(2, 53)  // 9007199254740992
9007199254740992  // 9007199254740992
9007199254740993  // 9007199254740992
Math.pow(2, 53) === Math.pow(2, 53) + 1  // true
上面代码中，超出2的53次方之后，一个数就不精确了。

ES6引入了 Number.MAX_SAFE_INTEGER 和 Number.MIN_SAFE_INTEGER 这两个常量，用来表示这个范围的上下限。
Number.MAX_SAFE_INTEGER === Math.pow(2, 53) - 1       // true
Number.MAX_SAFE_INTEGER === 9007199254740991          // true
Number.MIN_SAFE_INTEGER === -Number.MAX_SAFE_INTEGER  // true
Number.MIN_SAFE_INTEGER === -9007199254740991         // true

Number.isSafeInteger()则是用来判断一个整数是否落在这个范围之内。如果是浮点数或非数字，都会返回 false
Number.isSafeInteger(Number.MIN_SAFE_INTEGER - 1)  // false
Number.isSafeInteger(Number.MIN_SAFE_INTEGER)      // true
Number.isSafeInteger(Number.MAX_SAFE_INTEGER)      // true
Number.isSafeInteger(Number.MAX_SAFE_INTEGER + 1)  // false



## 辨别角度正负
从坐标轴开始，顺时针为正角，逆时针为负角。



## 物体延轴旋转后新坐标点的简单算法:
dx = 物体x坐标 - 轴x座标;
dy = 物体y坐标 - 轴y座标;
x = Math.cos(弧度) * dx - Math.sin(弧度) * dy;
y = Math.cos(弧度) * dy + Math.sin(弧度) * dx;
newX = x + 轴x座标;
newY = y + 轴y座标;
调换 + - 号可实现相反角度的计算。



## 余弦定理:(用于非直角三角形,角ABC,对边abc)
a2=b2+c2-2*b*c*cosA
b2=a2+c2-2*a*c*cosB
c2=a2+b2-2*a*b*cosC
ActionScript 的余弦定理： 
A=Math.acos((b*b+c*c-a*a)/(2*b*c));
B=Math.acos((a*a+c*c-b*b)/(2*a*c));
C=Math.acos((a*a+b*b-c*c)/(2*a*b));



## 动量守恒的数学表达式:(质量m,速度v)         
v0Final = ((m0 – m1) * v0 + 2 * m1 * v1) / (m0 + m1)
v1Final = ((m1 – m0) * v1 + 2 * m0 * v0) / (m0 + m1)
动量守恒的 ActionScript 表达式:
var vxTotal:Number = vx0 - vx1;
vx0 = ((ball0.mass - ball1.mass) * vx0 + 2 * ball1.mass * vx1) / (ball0.mass + ball1.mass);
vx1 = vxTotal + vx0;



## 引力的一般公式:
force = G * m1 * m2 / distance 2
ActionScript 实现万有引力:
function gravitate(partA:Ball, partB:Ball):void
{
    var dx:Number = partB.x ‐ partA.x;
    var dy:Number = partB.y ‐ partA.y;
    var distSQ:Number = dx * dx + dy * dy;
    var dist:Number = Math.sqrt(distSQ); 
    var force:Number = partA.mass * partB.mass / distSQ;
    var ax:Number = force * dx / dist;
    var ay:Number = force * dy / dist;
    partA.vx += ax / partA.mass;
    partA.vy += ay / partA.mass;
    partB.vx ‐= ax / partB.mass;
    partB.vy ‐= ay / partB.mass;
}



## 颜色

设置颜色:

颜色值为0-255之间的数

color24 = red << 16 | green << 8 | blue;
color32 = alpha << 24 | red << 16 | green << 8 | blue;

使用或(OR)运算，符号是 | 。它会将两组数的每个二进制位进行比较，如果两个之中有一个数为1，那么结果就为 1，如果两个数都为 0，那么结果就为 0。

获取颜色:

alpha = color32 >> 24;
red = color32 >> 16 & 0xFF;
green = color32 >> 8 & 0xFF;
blue = color32 & 0xFF;

这里就是要使用与(And)操作符的地方，与(OR)操作符相同，都是对两组数值的比较，可以这样解释“两个数相比较，如果两个都是1那么结果就为 1，如果其中有一个为 0，那么结果就为 0”。



## 运算符技巧

表达式1 || 表达式2; //从左向右返回第一个为真的表达式的值，其后的表达式则不再验证。如果全部表达式的值都为假，则返回最后一个表达式的值。
表达式1 && 表达式2; //从左向右返回第一个为假的表达式的值，其后的表达式则不再验证。如果全部表达式的值都为真，则返回最后一个表达式的值。

number | 0; //返回这个数的小数点前的整数部分，相当于不进位取整。
number >> 0; //返回这个数的小数点前的整数部分，相当于不进位取整。
number >> 1; //返回这个数除以2后的小数点前的整数部分，相当于不进位取整。（数值每增加1就除以一次2）
number << 1; //返回这个数乘以2后的小数点前的整数部分，相当于不进位取整。（数值每增加1就乘以一次2）
number & 1; //相当于 number % 2;

!function(){}(); //等同于 (function(){})();
!!变量; //相当与把该变量转换为 boolean 类型。

数字 + ""; //返回数字的字符串形式
字符串 - 0; //返回字符串的数字形式
+ 字符串; // 将字符串转为数字

### 指数运算符

ES7新增了一个指数运算符（**）
2 ** 2 // 2 * 2 = 4
2 ** 3 // 2 * 2 * 2 = 8
a **= 2; // 等同于 a = a * a;
b **= 3; // 等同于 b = b * b * b;
