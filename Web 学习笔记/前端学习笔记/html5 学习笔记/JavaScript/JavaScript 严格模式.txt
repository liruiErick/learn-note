除了正常运行模式，ECMAscript 5添加了第二种运行模式："严格模式"（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。

设立"严格模式"的目的，主要有以下几个：
　　- 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;
　　- 消除代码运行的一些不安全之处，保证代码运行的安全；
　　- 提高编译器效率，增加运行速度；
　　- 为未来新版本的Javascript做好铺垫。

"严格模式"体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。
另一方面，同样的代码，在"严格模式"中，可能会有不一样的运行结果；一些在"正常模式"下可以运行的语句，在"严格模式"下将不能运行。
掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。

进入"严格模式"的标志，是下面这行语句：

"use strict";

老版本的浏览器会把它当作一行普通字符串，加以忽略。

将"use strict"放在脚本文件的第一行，则整个脚本都将以"严格模式"运行。
注意，即使这个脚本文件与其他的脚本文件一同被引入一个html文件，但这个脚本文件的严格模式并不会影响到其他的脚本文件。

如果这行语句不在第一行，则无效，整个脚本以"正常模式"运行。
如果不同模式的代码文件合并成一个文件，这一点需要特别注意。

<script>
    "use strict";
    console.log("这是严格模式。");
</script>
<script>
    console.log("这是正常模式。");
</script>

将"use strict"放在函数体的第一行，则整个函数以"严格模式"运行。

function strict(){
    "use strict";
    return "这是严格模式。";
}
function notStrict() {
    return "这是正常模式。";
}

将整个脚本文件放在一个立即执行的匿名函数之中。

(function (){

    "use strict";
    // some code here

})();


* 语法和行为改变

1) 全局变量显式声明
v = 1; // 报错，v未声明

2) 禁止使用with语句
with (o){ // 语法错误 
    v = 2;
}

3) 创设eval作用域
正常模式下，Javascript语言有两种变量作用域（scope）：全局作用域和函数作用域。严格模式创设了第三种作用域：eval作用域。
"use strict";
var x = 2;
console.info(eval("var x = 5; x")); // 5
console.info(x); // 2

4) 禁止this关键字指向全局对象
function f(){
    console.log(this);
   
}
f(); // this 指向全局对象 window
function f(){
    "use strict";
    console.log(this);
}
f(); // this 的值为 undefined

5) 禁止在函数内部遍历调用栈
function f(){
    "use strict";
    f.caller; // 报错
    f.arguments; // 报错
}
f();

6) 禁止删除变量
"use strict";
var x;
delete x; // 语法错误
var o = {};
o.x = 1;
delete o.x; // 删除成功

7) 显式报错
- 正常模式下，对一个对象的只读属性进行赋值，不会报错，只会默默地失败。严格模式下，将报错。
- 严格模式下，对一个使用getter方法读取的属性进行赋值，会报错。
- 严格模式下，对禁止扩展的对象添加新属性，会报错。
- 严格模式下，删除一个不可删除的属性，会报错。
    delete Object.prototype; // 报错

8) 重名错误
- 对象不能有重名的属性
- 函数不能有重名的参数
- 禁止八进制表示法
    var n = 0100; // 语法错误

9) arguments对象的限制
- 不允许对arguments赋值
- arguments不再追踪参数的变化
    function f(a) {
        a = 2;
        return [a, arguments[0]];
    }
　　f(1); // 正常模式为[2,2]
    function f(a) {
        "use strict";
　　　　a = 2;
　　　　return [a, arguments[0]];
    }
　　f(1); // 严格模式为[2,1]
- 禁止使用arguments.callee（arguments.length 可以正常访问）
    这意味着，你无法在匿名函数内部调用自身了。
　　"use strict";
　　var f = function() { return arguments.callee; };
　　f(); // 报错

10) 函数必须声明在顶层
"use strict";
if (true) {
    function f() { } // 语法错误
}
for (var i = 0; i < 5; i++) {
　　function f2() { } // 语法错误
}

11) 保留字
为了向将来Javascript的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。
此外，ECMAscript第五版本身还规定了另一些保留字 class, enum, export, extends, import, super。
以及各大浏览器自行增加的const保留字，也是不能作为变量名的。
使用这些词作为变量名将会报错。



* 以下写法要特别注意
// 两个函数都需要声明严格模式
// 这是因为fn相当于是在第一个函数外部声明的
(function(fn) {
	'use strict';
	fn();
})(function() {
	'use strict';
});






