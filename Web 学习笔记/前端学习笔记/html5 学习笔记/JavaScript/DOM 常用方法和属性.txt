* DOM方法：

document.createAttribute("属性名"); //创建属性节点（Attr 对象）。

document.createElement("元素名"); //创建元素节点。

document.createTextNode("文本值"); //创建文本节点。

document.getElementById(id); //返回带有指定 ID 的元素。

父元素节点.querySelector(selector); //传入一个符合css选择器语法的字符串，返回第一个匹配选择器的元素。未找到则返回 null。传入空字符串会报错。（IE6/7 不支持）

父元素节点.querySelectorAll(selector); //传入一个符合css选择器语法的字符串，返回所有匹配选择器元素的集合。未找到则返回 null。传入空字符串会报错。（IE6/7 不支持）

父元素节点.getElementsByTagName(tagName); //返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）。

父元素节点.getElementsByClassName(className); //返回包含带有指定类名的所有元素的节点列表。

父元素节点.appendChild(node); //把新的子节点添加到指定父节点，并返回被添加的节点。

父元素节点.removeChild(node); //从指定父节点中删除子节点，并返回被删除的节点。

父元素节点.replaceChild(newNode, node); //替换子节点，前者替换后者，并返回被替换的节点。

父元素节点.insertBefore(newNode, node); //在指定的子节点前面插入新的子节点，并返回被插入的节点。

元素节点.getAttribute("属性名"); //返回指定的属性值（可以是自定义属性）。

注意，在获取元素的 src | href 属性值时，如果使用的是相对路径，那么使用 .getAttribute("src" | "href") 获取到的是就是相对路径，但直接访问属性获取到的却是绝对路径
另外，如果 src | href 设置为空字符串，那么直接访问属性获取到的仍然是当前页面的绝对路径。如果设置为 #，获取到的就是绝对路径 + #。而使用 .getAttribute("src" | "href") 获取到的是就是真实的设置值。

元素节点.setAttribute("属性名", "属性值"); //把指定属性设置或修改为指定的值（可以是自定义属性，如果该属性不存在则创建该属性）。

元素节点.hasAttribute("属性名"); //如果元素拥有指定属性（无论有没有定义属性值），则返回true，否则返回 false。

元素节点.removeAttribute("属性名"); //删除指定属性

元素节点.属性名 = "属性值"; //设置或返回该属性名的属性值（只有IE支持访问自定义属性，如果被赋值的属性不存在则创建该属性）。

// 获取节点的位置矩形（所有浏览器都支持该方法）
元素节点.getBoundingClientRect();
// 返回一个包含 left、right、top、bottom 属性的矩形 TextRectangle 对象。
// 在符合W3C标准的浏览器中（IE9及以上浏览器）返回的对象还包括 width 和 height。
// 其中 left、top 为边框外边缘相对于浏览器窗口的位置，right、bottom 为 left、top 加上自身的宽和高的到的值
// 无论元素如何应用2D/3D变换，该函数所得到的矩形始终是元素当前所呈现出形状的矩形边框。
// 如果元素的 display 为 none，或者元素父容器的 display 为 none，又或者该元素被移出文档，那么获取到的值全部为 0。

// 获取元素所占用矩形的列表。
元素节点.getClientRects();
// 返回一个 TextRectangle 集合，就是 TextRectangleList 对象。
// 该方法获取到的是多行文字区域的坐标偏移集合，每行文字都对应一个 TextRectangle 对象。在非IE浏览器下，只对inline的标签有反应。
// 如果元素的 display 为 none，或者元素父容器的 display 为 none，又或者该元素被移出文档，那么获取到的集合对象的 length 属性为 0。

// 将窗口跳转至当前元素节点的位置
元素节点.scrollIntoView();







* DOM属性：

// 以下属性不会受到2D/3D变换的影响，均为只读属性。如果元素的 display 为 none，那么获取到的值全部为 0。

clientWidth,clientHeight  返回元素内尺寸，是指 内边距+元素内容 大小，不包括边框、外边距、滚动条部分。

offsetWidth,offsetHeight  返回元素尺寸，是指 边框+内边距+元素内容 大小，不包括外边距和滚动条部分。

scrollWidth,scrollHeight  当内容元素小于自身时，返回自身的 内边距+元素内容 的大小。当内容元素大于自身时，返回内容元素的 外边距（不包括右侧外边距）+边框+内边距+元素内容 的大小。

clientLeft,clientTop  返回边框外边缘与内边距外边缘的距离，即左、上边框宽度。

offsetLeft,offsetTop  返回该元素的左上角（边框外边缘）与已定位的父容器（offsetParent对象）左上角（边框内边缘）的距离，如果没有则返回距离 body 边缘的距离。

scrollLeft,scrollTop  是指元素滚动条位置，即内容元素已滑过的距离，它们是可写的。

offsetParent  指元素最近的定位（relative,absolute或者perspective属性）祖先元素，递归上溯，如果没有祖先元素是定位的话，会返回null。

// 火狐和IE中获取浏览器窗口滚动条位置：
document.documentElement.scrollTop/scrollLeft;
// Chrome 中获取浏览器窗口滚动条位置：
document.body.scrollTop/scrollLeft;
// 兼容浏览器的获取滚屏距离
var scrollX = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft;
var scrollY = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;


nodeName  属性规定节点的名称。
// 元素节点的 nodeName 与标签名相同
// 属性节点的 nodeName 与属性名相同
// 文本节点的 nodeName 始终是 #text
// 文档节点的 nodeName 始终是 #document
// nodeName 始终包含 HTML 元素的大写字母标签名。

nodeValue  属性规定节点的值。
// 元素节点的 nodeValue 是 undefined 或 null
// 文本节点的 nodeValue 是文本本身
// 属性节点的 nodeValue 是属性值

nodeType  只读属性，返回节点的类型。
// 元素类型	NodeType
// 元素	    1
// 属性	    2
// 文本	    3
// 注释	    8
// 文档	    9

// 获取元素节点的标签名称
元素节点.tagName;

// 获取或设置元素节点的ID名称
元素节点.id;
// 每一个id在javascript中都对应一个同名全局变量，该变量直接引用这个元素的DOM对象。
// 如果有两个或以上的元素使用同一个id，则该变量引用一个HTMLCollection数组对象，该数组对象包含所有同名id元素的DOM对象

// 获取或设置元素节点引用的类名称
元素节点.className;

// 获取或设置元素节点内所包含的内容，如果设置的内容中包含DOM字符串，那么将会将其解析为DOM对象
元素节点.innerHTML;
元素节点.innerText; //IE专用，获取或设置将元素的innerHTML换码、解释后的最终显示结果
// 会把<br/>换成换行符，会将多个空格并成一个空格对待，而本来的换行符却并不会引起换行，IE会将其当作一个空格。

// 获取或设置元素节点内所包含的内容，无论内容是否包含DOM字符串，都按字符串解析（IE8及以下浏览器不支持）
元素节点.textContent;

// 获取或设置元素节点自身以及所包含的内容，内容为DOM节点的字符串形式（老版本的火狐浏览器不支持）
元素节点.outerHTML;

// 获取元素节点的父级元素节点
元素节点.parentElement; （IE专用）
元素节点.parentNode;

// 获取元素节点的相邻元素节点
元素节点.nextSibling;
元素节点.previousSibling;

// 获取父元素节点的第一个或最后一个子元素
// 在非IE浏览器中，如果 html 文档上的父元素标签与子元素之间是换行书写的，那么 firstChild 和 lastChild 获取到的将是一个空的文本节点（貌似是换行符）
父元素节点.firstChild;
父元素节点.lastChild;

// 获取父元素节点的子节点集合（NodeList 对象）
父元素节点.childNodes;
nodelist.length; //返回 NodeList 中的节点数。
nodelist.item(index); //返回 NodeList 中位于指定索引的节点。

// 设置或获取元素节点的样式
元素节点.style; //可读写，返回元素的style属性，即只能获取内联样式。
元素节点.style.cssText; //可读写，返回元素的所有内联样式组成的字符串。(IE6/7/8中该字符串中最后一个样式的“;”会被删除)

// 如果要获取该元素的外部样式，应使用以下方法：
style = element.currentStyle; //IE9及以下浏览器可用
style = window.getComputedStyle(元素对象, "伪类/元素"); //IE9及以上浏览器可用
style = document.defaultView.getComputedStyle(dom, ":after"); //在FireFox3.6上可用
// 返回元素的所有CSS属性的计算值，即包括内联样式和外部样式的style对象，该方法是只读的。
// 第二个参数用于获取该元素的伪元素选择器设置的样式，如传入":after"，否则直接填写null即可。

element.runtimeStyle; //IE专用，运行时样式，IE6-7下有时需要修改该样式才能够正确显示效果。但是该样式属于一种隐藏样式，无法通过调试器查看。

// 当获得样式对象后，还可以使用该方法来获取指定样式属性对应的值
style.getPropertyValue("background-image"); //IE9及以上浏览器可用
style.getAttribute("background-image"); //IE浏览器可用，且支持驼峰写法，但IE6必须使用驼峰写法

// 各浏览器的浮动属性（IE9两种属性都有）
style.cssFloat; //IE9及以上浏览器可用
style.styleFloat; //IE9及以下浏览器可用
// IE浏览器中使用下面的方法可以兼用这个问题
style.getAttribute("float");


// 对类的操作（IE9及以下浏览器不支持）
element.classList.add("newClass"); //增加一个CSS类
element.classList.remove("existingClass"); //删除一个CSS类
element.classList.contains("oneClass"); //检查是否拥有一个CSS类
element.classList.toggle("anotherClass"); //反转一个CSS类的有无



* DOM 的的其他属性与方法

element.dir; //设置或返回元素的文本方向。
element.accessKey; //设置或返回元素的快捷键。
element.lang; //设置或返回元素的语言代码。
element.namespaceURI; //返回元素的 namespace URI。
element.previousSibling; //返回位于相同节点树层级的前一个元素。
element.tabIndex; //设置或返回元素的 tab 键控制次序。
element.title; //设置或返回元素的 title 属性。
element.attributes; //返回元素属性的集合（NamedNodeMap 对象）。

element.cloneNode(); //克隆元素。如果需要克隆所有后代，请传入参数 true。
element.compareDocumentPosition(); //比较两个元素的文档位置。
element.getFeature(); //返回实现了指定特性的 API 的某个对象。
element.getUserData(); //返回关联元素上键的对象。
element.setUserData(); //把对象关联到元素上的键。
element.hasAttributes(); //如果元素拥有属性，则返回 true，否则返回 false。
element.hasChildNodes(); //如果元素拥有子节点，则返回 true，否则 false。
element.isDefaultNamespace(); //如果指定的 namespaceURI 是默认的，则返回 true，否则返回 false。
element.isEqualNode(); //检查两个元素是否相等。
element.isSameNode(); //检查两个元素是否是相同的节点。
element.isSupported(); //如果元素支持指定特性，则返回 true。
element.normalize(); //合并元素中相邻的文本节点，并移除空的文本节点。
element.ownerDocument; //返回元素的根元素（文档对象）。
element.toString(); //把元素转换为字符串。

element.getAttributeNode(); //返回指定的属性节点（Attr 对象）。
element.setAttributeNode(); //设置或更改指定属性节点（Attr 对象）。
element.removeAttributeNode(); //移除指定的属性节点，并返回被移除的节点（Attr 对象）。
element.setIdAttribute(); //不详
element.setIdAttributeNode(); //不详



* Attr 对象与 NamedNodeMap对象的属性

attr.isId; //如果属性是 id 类型，则返回 true，否则返回 false。
attr.name; //返回属性的名称。
attr.value; //设置或返回属性的值。
attr.specified; //如果已指定属性，则返回 true，否则返回 false。
nodemap.length; //返回 NamedNodeMap 中的节点数。
nodemap.getNamedItem(); //从 NamedNodeMap 返回指定的属性节点。
nodemap.item(); //返回 NamedNodeMap 中位于指定下标的节点。
nodemap.removeNamedItem(); //移除指定的属性节点。
nodemap.setNamedItem(); //设置指定的属性节点（通过名称）。



* document 其它属性与方法

document.all[index|id]; //返回文档中指定索引或id的元素，all包含文档从头到该语句处之间所有元素标签。
document.anchors; //返回文档内所有锚点对象的集合（设置有name属性的<a>）。
document.links; //返回文档内所有Area和Link对象的集合（<area>与设置有href属性的<a>）。
document.forms; //返回文档内所有表单对象的集合。
document.images; //返回文档内所有图片对象的集合。
document.documentElement; //返回全部文档，即html元素。
document.body; //返回文档的主体，即body元素。
document.activeElement; //返回当前页面上的焦点元素。如果当前页面上没有焦点，则返回document.body。
document.domain; //返回当前文档的域名。
document.URL; //返回当前文档的 URL。
document.referrer; //返回载入当前文档的文档的 URL，如果当前文档不是通过超级链接访问的，则为 null。
document.title; //设置或返回当前文档的标题。
document.lastModified; //返回文档被最后修改的日期和时间。
document.cookie; //该属性是存储于访问者的计算机中的变量，为一个字符串变量。
document.compatMode; //返回浏览器模式，值为"CSS1Compat"表示标准模式，值为"BackCompat"表示混杂模式。
document.documentMode; //IE8及以上浏览器专用，返回 IE 的版本号。因为IE8有3中不同的呈现模式，值如果是5，则表示IE5混杂模式；如果是7，则表示IE7仿真模式；如果是8，则表示IE8标准模式。
document.location; //当前页面或框架内页面的 loaction 属性，拥有和 window.loaction 一样的子属性，但是都是只读的。
document.readyState; //返回文档当前的加载状态，其值如下：
	1）uninitialized（未初始化）：对象存在但尚未初始化。
	2）loading（正在加载）：对象正在加载数据。
	3）loaded（加载完毕）：对象加载数据完成。
	4）interactive（交互）：可以操作对象了，但还没有完全加载。
	5）complete（完成）：对象已经加载完毕。
// html5新增属性：
document.designMode; //该属性有两个值：on与off。用来指定整个页面是否可被编辑，当页面可编辑时，页面中所有支持 contentEditable 属性的元素都将变成可编辑状态。
document.hidden; //返回一个布尔值，表示当前页面是否被隐藏（切换到了别的标签页），或者是被最小化。（各浏览器可能需要添加私有前缀）
document.visibilityState; //返回"visible"、"hidden"或者"prerender"，表示当前页是否为可见状态，其中"prerender"表示页面在重新生成，对用户不可见。（各浏览器可能需要添加私有前缀）


// 打开一个新的空白文档，并擦除当前文档的内容。
document.open(mimetype,replace);
// 第一个参数可选。规定正在写的文档的类型。默认值是 "text/html"。
// 第二个参数可选。当此参数设置后，可引起新文档从父文档继承历史条目。

document.write(exp1,exp2,exp3,...); //可向文档写入 HTML 表达式或 JavaScript 代码，参数必须为字符串或字符串变量。

document.writeln(); //与 write() 方法作用相同，外加可在每个表达式后写一个换行符。
// 注意，页面已经 onload 之后，再执行 document.write 将导致当前页面的内容被清空，因为它会自动触发 document.open 方法。
document.close(); //可关闭一个由 document.open() 方法打开的输出流，并显示选定的数据。

// 返回指定窗口坐标位置对应的最顶层的元素节点
document.elementFromPoint(x, y);




* DocumentFragment 文档碎片

多次使用节点方法(如：appendChild)绘制页面，每次都要刷新页面一次，这样效率也就大打折扣了
而使用 document.createDocumentFragment() 创建一个文档碎片，把所有的新结点附加在其上，然后把文档碎片的内容一次性添加到document中，这也就只需要一次页面刷新就可。

在所有节点类型中，只有DocumentFragment在文档中没有对应的标记。
DOM规定文档片段（documentfragment）是一种”轻量级“的文档，可以包含和控制节点，但不会像完整的文档那样占用额外资源。
DocumentFragment节点具有下列特征：
1) nodeType的值为11
2) nodeName的值为“#document-fragment”
3) nodeValue的值为null
4) parentNode的值为null
5) 子节点可以是Element、ProcessingInstruction、Comment、Text、CDATASection或EntityReference

// 创建方法
document.createDocumentFragment();

注意：
DocumentFragment 节点不属于文档树，继承的 parentNode 属性总是 null。
DocumentFragment 节点只支持一般的添加删除节点的操作，像 innerHTML 这种操作是不支持的。
当请求把一个 DocumentFragment 节点插入文档树时，插入的不是 DocumentFragment 自身，而是它的所有子孙节点，同时这些被插入的子孙节点就不再是它的子孙，即它被清空了。

