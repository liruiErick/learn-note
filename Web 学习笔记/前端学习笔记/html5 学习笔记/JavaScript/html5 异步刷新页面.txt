HTML5 之 pushstate、popstate 操作 history，无刷新改变当前 url。（IE9及以下浏览器不支持）
该效果已经被 pjax 封装，可直接使用

一、认识 window.history
window.history表示window对象的历史记录，是由用户主动产生，并且接受javascript脚本控制的全局对象。window对象通过history对象提供对览器历史记录的访问能力。它暴露了一些非常有用的方法和属性，让你在历史记录中自由前进和后退。

1、历史记录的前进和后退
在历史记录中后退，可以这么做：

window.history.back();
这就像用户点击浏览器的后退按钮一样。

类似的，你可以前进，就像在浏览器中点击前进按钮，像这样：

window.history.forward();
2、移动到指定历史记录点
通过指定一个相对于当前页面位置的数值，你可以使用go()方法从当前会话的历史记录中加载页面（当前页面位置索引值为0，上一页就是-1，下一页为1）。

要后退一页（相当于调用back()）：

window.history.go(-1);
向前移动一页（相当于调用forward()）：

window.history.go(1);
类似的，传递参数“2”，你就可以向前移动2个记录点。你可以查看length属性值，了解历史记录栈中一共有多少个记录点：

window.history.length;
返回历史记录有多少条

二、修改历史记录点
HTML5的新API扩展了window.history，使历史记录点更加开放了。可以存储当前历史记录点、替换当前历史记录点、监听历史记录点，下面逐一简要说明一下。

1、存储当前历史记录点
存储的方式类似于数组的入栈（Array.push()），在window.history里新增一个历史记录点，例如：

// 当前的url为：http://qianduanblog.com/index.html
var json = {time:new Date().getTime()};
// 参数1：为一个对象或null，它会在触发window的popstate事件(window.onpopstate)时，作为参数的state属性传递过去
// 参数2：为页面的标题，但当前所有浏览器都忽略这个参数
// 参数3：为页面的URL，不写则为当前页的URL。浏览器不会检查URL是否存在，只改变URL，URL必须同域，不能跨域
window.history.pushState(json, "", "http://qianduanblog.com/post-1.html");

执行了pushState方法后，页面原来的URL地址成为了前一个历史记录，当前URL地址变为http://qianduanblog.com/post-1.html。
注意，此时如果后退到前一条历史记录，将只改变URL地址，页面不会进行刷新

用一下方法可以禁止浏览器后退：
window.history.pushState(null, null, location.href);
window.onpopstate = function () { window.history.pushState(null, null, location.href); }

2、替换当前历史记录点
window.history.replaceState 和 window.history.pushState 的参数类似
不同之处在于replaceState不会在window.history里新增历史记录点，其效果类似于window.location.replace(url)，都是不会在历史记录点里新增一个记录点的。
当你为了响应用户的某些操作，而要更新当前历史记录条目的状态对象或URL时，使用replaceState()方法会特别合适。

window.history.replaceState(null, null, "http://qianduanblog.com/post-1.html");

执行了replaceState方法后，页面原来的URL地址将被清除，当前URL地址变为http://qianduanblog.com/post-1.html。

3、监听历史记录点
监听历史记录点，可以通过window.onpopstate来监听url的变化，并且可以获取存储在该历史记录点的状态对象，也就是上文说到的json对象，如：

// 当前的 url 为：http://qianduanblog.com/index.html
window.history.pushState({data: 1000}, null, http://qianduanblog.com/post-1.html);
// 执行后 url 变为：http://qianduanblog.com/post-1.html

window.onpopstate = function(e) {
	// 获得存储在该历史记录点的 json 对象
	var json = window.history.state;
	
	// 或者
	var json = e.state;
	
	// 点击一次回退到：http://qianduanblog.com/index.html
	// 由于并没为这个 url 应用 replaceState，因此获得的 json 为 null
	// 再点击一次前进到：http://qianduanblog.com/post-1.html
	// 由于并为这个 url 应用了 pushState，并设置了 json，因此获得的 json 为 {data: 1000}
}
值得注意的是：javascript脚本执行window.history.pushState和window.history.replaceState不会触发onpopstate事件。

还有一点注意的是，谷歌浏览器和火狐浏览器在页面第一次打开的反应是不同的，谷歌浏览器奇怪的是回触发onpopstate事件，而火狐浏览器则不会。

如果浏览器不支持，IE8及以上浏览器可以用 hashchange 事件用来监听 URL 的 hash 部分的变化。

注意，hash 改变时会添加新历史记录点，并且会触发 popstate 事件，只是 history.state 为 null

