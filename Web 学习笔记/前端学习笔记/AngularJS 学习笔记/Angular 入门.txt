## 控制器初始化

html:
<html ng-app="myApp" ng-controller="PhoneListCtrl">

javascript:
(function(angular){
    'use strict';

	var myApp = angular.module('myApp',[]);
	
	// run 方法用于初始化全局数据（run 在 config 之后执行）
	myApp.run(function($rootScope) {
		$rootScope.host = 'localhost';
	});

	myApp.controller('PhoneListCtrl',function($scope, $http){

		$http.get('phones.json').success(function(data) {
			$scope.phones = data;
		});

		$scope.orderProp = 'age';

	});

})(window.angular);


## 创建一个模块

angular.module(name,[requires],[configFn]);

- name：字符串，创建的模块名称。
- [requires]：字符串的数组  代表该模块依赖的其他模块列表，如果不依赖其他模块，则为空数组。
- [configFn]：对该模块的一些配置。

模块创建后可以通过模块对象的 .requires 属性获取模块的依赖列表数组，在应用启动前，可以进行修改。


## 单向绑定

属性声明在元素内
ng-bind="text"  绑定纯文本
ng-bind-html="html"  绑定html格式的文本

注意，绑定html格式的文本必须经过 $sce 服务的 $sce.trustAsHtml(html) 方法处理过之后才能渲染，否则会报错，原因是为了防止 XSS 攻击。


## 双向绑定指令

属性声明在表单元素内
ng-model="yourname"  声明一个叫 yourname 的模型变量，与表单元素的 value 绑定。


## 表单元素验证
angular 初始化完成后，每个表单元素下会有以下对象：

.$error.required; // 表单是否为空
.$error.email; // 字段是否为一个合法的邮箱
.$dirty; // 表单是否有填写记录
.$valid; // 字段内容是否合法
.$invalid; // 字段内容是是否非法
.$pristine; // 表单是否没有填写记录



## 静态方法

angular.copy(source, destination); // 则返回一个对象的深拷贝，如果指定了 destination，则会深拷贝对象复制给 destination
angular.lowercase(obj); // 转换字符串为小写
angular.uppercase(obj); // 转换字符串为大写
angular.isString(obj); // 判断给定的对象是否为字符串，如果是返回 true。
angular.isNumber(obj); // 判断给定的对象是否为数字，如果是返回 true。
angular.isArray(obj); // 判断给定的对象是否为数组，如果是返回 true。
angular.fromJson(); // 反序列化 JSON 字符串
angular.toJson(); // 序列化 JSON 字符串
angular.forEach(arr, function(v,k,arr){});
angular.extend(); // 使用方法同 $.extend()，但是只能浅拷贝。



## 编译 html 的 angular 数据

compileDomToAngular(dom, beforeCompileCallback) {
	var element = angular.element(dom),
		scope = element.scope();
	beforeCompileCallback && beforeCompileCallback.call(element, scope);
	element.injector().get('$compile')(dom)(scope);
	scope.$digest();
	return scope;
}





