AngularJS 路由 就通过 # + 标记 的形式区分不同的逻辑页面并将不同的页面绑定到对应的控制器上。

首先，引入 angular-route.js 文件

html 使用 ngView 指令。路由到的页面会被加载进 ng-view 元素中。
<div ng-view></div>


angular.module('routingDemoApp', ['ngRoute'])
	.config(['$routeProvider', function($routeProvider){
		$routeProvider
			.when('/computers', { templateUrl: 'computers.html' }) // 对应路径 '#/computers'
			.when('/printers', { templateUrl: 'printers.html' }) // 对应路径 '#/printers'
			.otherwise({ redirectTo:'/' }); // 其余url都重定向到 '/'
	}]);


路由配置对象语法规则如下：
$routeProvider.when(url, {
	template: string,
	templateUrl: string,
	controller: string, function 或 array,
	controllerAs: string,
	redirectTo: string, function,
	resolve: object<key, function>
});

- template
  ng-view 中插入简单的 HTML 内容。
- templateUrl
  在 ng-view 中插入 HTML 模板文件，值为文件路径。
- controller:
  function、string或数组类型，在当前模板上执行的controller函数，生成新的scope。
- controllerAs:
  string类型，为controller指定别名。
- redirectTo:
  重定向的地址。
- resolve:
  指定当前controller所依赖的其他模块。
  
  

## angular-ui-router

ui-sref 指令链接到特定状态
<a ui-sref="home">Home</a>
<a ui-sref="about">About</a>
<a ui-sref="contacts.list">Contacts</a>

ui-view 指令作为路由视图
<ui-view></ui-view>

<!-- 包含在 /contacts 状态内部，即其作为 parant state -->
<li ng-class="{active: $state.includes('contacts')}">
	<a ui-serif="contacts.list">Contacts</a>
</li>

ui-sref-active 查看当前激活状态并设置 Class
<li ui-sref-active="active"><a ui-sref="about">About</a></li>

初始化
angular.module('myApp', ['ui.router']);

方便获得当前状态的方法，绑到根作用域
app.run(['$rootScope', '$state', '$stateParams',
    function($rootScope, $state, $stateParams) {
        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;
    }
]);

路由设置
$stateProvider.state('about', {
	url: '/about',
	template: '<h1>Welcome to UI-Router Demo</h1>',

	params: {}, // 定义参数对象
	
	// optional below
	templateProvider: ['$timeout', function($timeout) {
		return $timeout(function() {
			return '<p class="lead">UI-Router Resource</p>' +
					'<p>The second line</p>'
		}, 100);
	}],

	templateUrl: 'about.html',

	templateUrl: function() {
		return 'about.html';
	},

	controller: 'UIRouterCtrl',

	// below is a state controller picked from UI-Router official sample
	controller: ['$scope', '$state', 'contacts', 'utils', function ($scope, $state, contacts, utils) {
		$scope.contacts = contacts;

		$scope.goToRandom = function () {
			var randId = utils.newRandomKey($scope.contacts, 'id', $state.params.contactId);

			$state.go('contacts.details', { contactId: randId });
		}
	}]
});


路由重定向 $urlRouterProvider
app.config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {
	$urlRouterProvider
		// 错误的路由重定向
		.when('/c?id', '/contacts/:id')
		.when('/user/:id', '/contacts/:id')
		.otherwise('/');
}]);


路由事件
// 注册路由事件
routeApp.run(function($rootScope){
	$rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams){
		console.log('$stateChangeStart');
    })
});

// $stateNotFound -v0.3.0- 在 transition 时通过状态名查找状态，当状态无法找到时发生。该事件将在$scope链上广播此事件。
$scope.$on('$stateNotFound', function(event, unfoundState, fromState, fromParams){ ... })

// $stateChangeStart - 当模板开始解析之前触发（此时新视图并未加载，旧视图仍在页面上）
$rootScope.$on('$stateChangeStart',function(event, toState, toParams, fromState, fromParams){ ... })

// $stateChangeSuccess - 当模板解析完成后触发（此时新视图并未加载，旧视图仍在页面上）
$rootScope.$on('$stateChangeSuccess',function(event, toState, toParams, fromState, fromParams){ ... })

// $stateChangeError - 当模板解析过程中发生错误时触发
$rootScope.$on('$stateChangeError',function(event, toState, toParams, fromState, fromParams, error){ ... })

// $viewContentLoading - 当视图开始加载，DOM渲染完成之前触发，该事件将在$scope链上广播此事件。
$scope.$on('$viewContentLoading',function(event, viewConfig){ ... })

// $viewContentLoaded - 当视图加载完成，DOM渲染完成之后触发，该事件将在$scope链上广播此事件。
$scope.$on('$viewContentLoaded',function(event){ ... });
$scope.$watch('$viewContentLoaded',function(event){ ... });


$state 服务
方法：
- go(to, params, options) // 前往指定的状态
- href(stateOrName, params, options) // 根据状态名获取 href 路径
- get(stateOrName, context)
- includes(stateOrName, params, options)
- is(stateOrName, params, options)
- reload(state) // 重载当前路由状态
- transitionTo(to, toParams, options)

属性：
- current // A reference to the state's config object. However you passed it in. Useful for accessing custom data.
- params // A param object, e.g. {sectionId: section.id)}, that you'd like to test against the current active state.
- transition // Currently pending transition. A promise that'll resolve or reject.

