更新地址：
https://github.com/seajs/seajs
css插件更新地址：
https://github.com/seajs/seajs-css

<script src="js/sea.js"></script>
<script src="js/seajs-css.js"></script>

<script src="js/sea.js" data-main="js/main"></script>
默认入口文件为 js 目录下的 main.js


* seajs.config

// seajs 的简单配置
// 注意，这里的相对路径是 seajs 的所在路径 
seajs.config({
  // 基路径（alias 中模块路径的基路径）
  base: "../sea-modules/",
  
  // 设置路径，方便跨目录调用（alias 中模块路径开头的路径名，用于指向一个绝对路径）
  paths: {
    'arale': 'https://a.alipayobjects.com/arale',
    'jquery': 'https://a.alipayobjects.com/jquery'
  },

  // 设置别名，方便调用
  alias: {
    'class': 'arale/class/1.0.0/class',
    'jquery': 'jquery/jquery/1.10.1/jquery'
  }
})

// 加载入口模块
seajs.use("../static/hello/src/main");



* define

// 所有模块都通过 define 来定义
define(function(require, exports, module) {

  // 通过 require 引入依赖
  var $ = require('jquery');
  var Spinning = require('./spinning');

  // 异步加载一个模块，在加载完成时，执行回调
  // 和 require 的区别在于，require 是在define的回调函数执行前，通过函数代码解析出所有 require 的调用，然后预先将这些模块全部加载后才执行回调函数
  require.async('./b', function(b) {
    b.doSomething();
  });

  // 异步加载多个模块，在加载完成时，执行回调
  require.async(['./c', './d'], function(c, d) {
    c.doSomething();
    d.doSomething();
  });
  
  // 对外提供 foo 属性
  exports.foo = 'bar';

  // 通过 exports 对外提供接口
  exports.doSomething = function() {};

  // 或者通过 module.exports 提供整个接口
  module.exports =  = {
    name: 'a',
    doSomething: function() {};
  };

});


* seajs.use

// 加载一个模块
seajs.use('./a');

// 加载一个模块，在加载完成时，执行回调
seajs.use('./a', function(a) {
  a.doSomething();
});

// 加载多个模块，在加载完成时，执行回调
seajs.use(['./a', './b'], function(a, b) {
  a.doSomething();
  b.doSomething();
});
