<!DOCTYPE html>
<!-- saved from url=(0040)http://lesscss.net/article/document.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title>语言特性</title>
    <meta name="description" content="LESSCSS中文官网">
    <meta name="keywords" content="LESS,LESSCSS,CSS,样式表,预处理">
    <link rel="shortcut icon" href="http://lesscss.net/favicon.ico">
<style type="text/css" media="screen" id="less:css-main">
html {
  margin: 0;
}
body {
  background-color: #262626;
  margin: 0 auto;
  font-family: Arial, hiragino sans gb, microsoft yahei, sans-serif;
  font-size: 100%;
  overflow-x: hidden;
}
nav,
header,
footer,
section,
article {
  display: block;
}
a {
  color: #b83000;
}
h1 a {
  color: black;
  text-decoration: none;
}
a:hover {
  text-decoration: underline;
}
h1,
h2,
h3,
h4 {
  margin: 0;
  font-weight: normal;
}
ul, li {
  /*list-style-type: none;*/

}
code {
  font-family: 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', 'Monaco', Courier, monospace !important;
}
code .string, code .regexp {
  color: #3d575c;
}
code .comment {
  color: rgba(0, 0, 0, 0.5);
}
code .number {
  color: #143352;
}
code .class, code .special {
  color: rgba(0, 50, 100, 0.8);
}
pre {
  padding: 0 30px;
  text-wrap: wrap;
  white-space: pre-wrap;
  /* css-3 */

  white-space: -moz-pre-wrap;
  /* Mozilla, since 1999 */

  white-space: -pre-wrap;
  /* Opera 4-6 */

  white-space: -o-pre-wrap;
  /* Opera 7 */

  word-wrap: break-word;
  /* Internet Explorer 5.5+ */

}
blockquote {
  font-style: italic;
}
body > footer {
  text-align: left;
  margin-left: 10px;
  font-style: italic;
  font-size: 18px;
  color: #888;
}
#logo {
  margin: 30px auto 0 auto;
  font-size: 48px;
  font-family: sans-serif;
  display: block;
  width: 500px;
  padding-left: 220px;
  height: 81px;
  line-height: 81px;
  background: url(/images/logo.png) no-repeat;
  color: #FFF;
  text-shadow: 1px 1px 1px #AAA;
}
nav {
  margin-left: 15px;
}
nav a, #dropdown li {
  display: inline-block;
  color: white;
  line-height: 42px;
  margin: 0;
  padding: 0px 15px;
  text-shadow: -1px -1px 1px rgba(0, 0, 0, 0.5);
  text-decoration: none;
  border: 2px solid transparent;
  border-width: 0 2px;
}
nav a:hover, #dropdown li:hover {
  border: 2px solid #140805;
  border-left-color: #3d170f;
  border-right-color: #3d170f;
  border-bottom: 0;
  border-top: 0;
  background-color: #521f14;
  text-decoration: none;
}
.twitter-follow-button {
  position: absolute;
  right: 0;
  top: 11px;
}
.dark-red {
  border: 2px solid #140805;
  border-left-color: #3d170f;
  border-right-color: #3d170f;
  border-bottom: 0;
  border-top: 0;
  background-color: #521f14;
}
.content {
  margin: 0 auto;
  width: 980px;
}
#menu {
  display: block;
  background-color: #143352;
  background-color: rgba(41, 102, 163, 0.4);
  height: 42px;
  border-bottom: 2px solid rgba(15, 38, 61, 0.5);
  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.6);
  -moz-box-shadow: 0 1px 8px rgba(0, 0, 0, 0.6);
  -webkit-box-shadow: 0 1px 8px rgba(0, 0, 0, 0.6);
  -moz-box-shadow: 0 0 0 #000;
}
#menu:hover {
  background-color: #143352;
}
#menu #dropdown {
  margin: 0 0 0 117px;
  padding: 0;
  padding-top: 5px;
  display: none;
  width: 190px;
  border-top: 2px solid #7a2e1f;
  color: #eaf2d9;
  border: 2px solid #140805;
  border-left-color: #3d170f;
  border-right-color: #3d170f;
  border-top-width: 0;
  background-color: #521f14;
  border-top-right-radius: 0;
  border-top-left-radius: 0;
  -moz-border-top-right-radius: 0;
  -moz-border-top-left-radius: 0;
  -webkit-border-top-left-radius: 0;
  -webkit-border-top-right-radius: 0;
  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.5);
  -moz-box-shadow: 0 6px 8px rgba(0, 0, 0, 0.5);
  -webkit-box-shadow: 0 6px 8px rgba(0, 0, 0, 0.5);
}
#menu #dropdown ul {
  padding: 0px;
}
#menu #dropdown li {
  font-size: 14px;
  display: block;
  text-align: left;
  padding: 0;
  border: 0;
}
#menu #dropdown li a {
  display: block;
  padding: 0px 15px;
  text-decoration: none;
  color: white;
}
#menu #dropdown li a:hover {
  background-color: #3d170f;
  text-decoration: none;
}
#main {
  margin: 0 auto;
  width: 100%;
  background-color: #79c3d2;
  border-top: 8px solid #66bbcc;
}
#main #intro {
  z-index: 2;
  font-family: 'Droid Serif', 'Georgia', 'hiragino sans bg', 'microsoft yahei';
  padding: 20px 20px 30px 30px;
  border: 0 none;
}
#main #intro #download_wrapper {
  text-align: center;
}
#main #intro #download_wrapper a {
  display: inline-block;
  width: 170px;
  height: 54px;
  color: #fff;
  text-align: center;
  line-height: 54px;
  font-size: 24px;
  font-weight: 400;
  border-radius: 5px;
  text-decoration: none;
  margin: 20px 10px;
  padding-left: 20px;
  position: relative;
}
#main #intro #download_wrapper a::after {
  display: block;
  width: 35px;
  height: 35px;
  background: url(http://lesscss.net/css/../images/icons.png) no-repeat;
  position: absolute;
  left: 15px;
  top: 13px;
  content: " ";
}
#main #intro #download_wrapper #download_less {
  background: #d55959;
  /* Old browsers */

  background: -moz-linear-gradient(top, #d55959 0%, #d25252 100%);
  /* FF3.6+ */

  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #d55959), color-stop(100%, #d25252));
  /* Chrome,Safari4+ */

  background: -webkit-linear-gradient(top, #d55959 0%, #d25252 100%);
  /* Chrome10+,Safari5.1+ */

  background: -o-linear-gradient(top, #d55959 0%, #d25252 100%);
  /* Opera 11.10+ */

  background: -ms-linear-gradient(top, #d55959 0%, #d25252 100%);
  /* IE10+ */

  background: linear-gradient(to bottom, #d55959 0%, #d25252 100%);
  /* W3C */

  border: 1px solid #C96161;
  box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2), -1px 2px 4px rgba(0, 0, 0, 0.2);
}
#main #intro #download_wrapper #download_less:hover {
  background: #e27473;
  /* Old browsers */

  background: -moz-linear-gradient(top, #e27473 0%, #de5959 100%);
  /* FF3.6+ */

  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #e27473), color-stop(100%, #de5959));
  /* Chrome,Safari4+ */

  background: -webkit-linear-gradient(top, #e27473 0%, #de5959 100%);
  /* Chrome10+,Safari5.1+ */

  background: -o-linear-gradient(top, #e27473 0%, #de5959 100%);
  /* Opera 11.10+ */

  background: -ms-linear-gradient(top, #e27473 0%, #de5959 100%);
  /* IE10+ */

  background: linear-gradient(to bottom, #e27473 0%, #de5959 100%);
  /* W3C */

}
#main #intro #download_wrapper #download_less:active {
  background: #cb2f2f;
  /* Old browsers */

  background: -moz-linear-gradient(top, #cb2f2f 0%, #d34e4e 100%);
  /* FF3.6+ */

  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #cb2f2f), color-stop(100%, #d34e4e));
  /* Chrome,Safari4+ */

  background: -webkit-linear-gradient(top, #cb2f2f 0%, #d34e4e 100%);
  /* Chrome10+,Safari5.1+ */

  background: -o-linear-gradient(top, #cb2f2f 0%, #d34e4e 100%);
  /* Opera 11.10+ */

  background: -ms-linear-gradient(top, #cb2f2f 0%, #d34e4e 100%);
  /* IE10+ */

  background: linear-gradient(to bottom, #cb2f2f 0%, #d34e4e 100%);
  /* W3C */

}
#main #intro #download_wrapper #download_koala {
  background: #347fc8;
  /* Old browsers */

  background: -moz-linear-gradient(top, #347fc8 0%, #336fad 100%);
  /* FF3.6+ */

  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #347fc8), color-stop(100%, #336fad));
  /* Chrome,Safari4+ */

  background: -webkit-linear-gradient(top, #347fc8 0%, #336fad 100%);
  /* Chrome10+,Safari5.1+ */

  background: -o-linear-gradient(top, #347fc8 0%, #336fad 100%);
  /* Opera 11.10+ */

  background: -ms-linear-gradient(top, #347fc8 0%, #336fad 100%);
  /* IE10+ */

  background: linear-gradient(to bottom, #347fc8 0%, #336fad 100%);
  /* W3C */

  border: 1px solid #4879AA;
  box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2), -1px 2px 4px rgba(0, 0, 0, 0.2);
}
#main #intro #download_wrapper #download_koala::after {
  background-position: -40px 0;
}
#main #intro #download_wrapper #download_koala:hover {
  background: #5895d1;
  /* Old browsers */

  background: -moz-linear-gradient(top, #5895d1 0%, #4985c2 100%);
  /* FF3.6+ */

  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #5895d1), color-stop(100%, #4985c2));
  /* Chrome,Safari4+ */

  background: -webkit-linear-gradient(top, #5895d1 0%, #4985c2 100%);
  /* Chrome10+,Safari5.1+ */

  background: -o-linear-gradient(top, #5895d1 0%, #4985c2 100%);
  /* Opera 11.10+ */

  background: -ms-linear-gradient(top, #5895d1 0%, #4985c2 100%);
  /* IE10+ */

  background: linear-gradient(to bottom, #5895d1 0%, #4985c2 100%);
  /* W3C */

}
#main #intro #download_wrapper #download_koala:active {
  background: #28639e;
  /* Old browsers */

  background: -moz-linear-gradient(top, #28639e 0%, #3677b8 100%);
  /* FF3.6+ */

  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #28639e), color-stop(100%, #3677b8));
  /* Chrome,Safari4+ */

  background: -webkit-linear-gradient(top, #28639e 0%, #3677b8 100%);
  /* Chrome10+,Safari5.1+ */

  background: -o-linear-gradient(top, #28639e 0%, #3677b8 100%);
  /* Opera 11.10+ */

  background: -ms-linear-gradient(top, #28639e 0%, #3677b8 100%);
  /* IE10+ */

  background: linear-gradient(to bottom, #28639e 0%, #3677b8 100%);
  /* W3C */

}
#main #intro #download-info {
  text-align: center;
  font-size: 12px;
  color: #476685;
}
#main #intro #download-info a {
  text-decoration: none;
  color: #143352;
  border-bottom: 1px dashed rgba(255, 255, 255, 0.2);
}
#main #intro #download-info a:hover {
  text-decoration: none;
  border-bottom: 1px dashed #143352;
}
#main h2 {
  color: #143352;
  margin: 20px 0;
  font-size: 24px;
  line-height: 1.2em;
}
#main h2 span {
  color: #7a2e1f;
}
#main h3 {
  color: #143352;
  line-height: 1.4em;
  margin: 30px 0 15px 0;
  font-size: 1em;
  text-shadow: 0px 0px 0px #e6ebe0;
}
#main h3 span {
  color: #7a2e1f;
}
#main #example {
  height: 282px;
  background: url(http://lesscss.net/css/../images/banner_code.png) center 0 no-repeat;
}
.page {
  margin: 0 auto;
  font-family: 'Georgia', serif;
  font-size: 18px;
  line-height: 26px;
  padding: 0 60px;
}
.page .content {
  width: 870px;
  padding: 45px;
}
.page code {
  font-size: 16px;
}
.page pre {
  border-width: 1px;
  border-style: dashed;
  padding: 15px;
  margin: 15px 0;
}
.page h1 {
  text-align: left;
  font-size: 40px;
  margin-top: 15px;
  margin-bottom: 35px;
}
.page p + h1 {
  margin-top: 60px;
}
.page h2, .page h3 {
  margin: 30px 0 15px 0;
}
.page p + h2, .page pre + h2, .page code + h2 {
  border-top: 6px solid rgba(255, 255, 255, 0.1);
  padding-top: 30px;
}
.page h3 {
  margin: 15px 0;
}
.page h1,
.page h2,
.page h3,
.page h4,
.page h5,
.page h6 {
  font-family: hiragino sans gb,microsoft yahei,serif;
}
.page-light {
  border-top: 2px solid #9fd5df;
  color: #143352;
  background-color: #79c3d2;
  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.2);
  -moz-box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.2);
  -webkit-box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.2);
}
.page-light ul li {
  list-style-type: circle;
}
.page-light h1 {
  font-family: 'Droid Serif', 'Georgia', serif;
  padding-top: 30px;
  padding-left: 45px;
  font-size: 44px;
  text-align: left;
  margin: 30px 0 !important;
  text-shadow: 0px 1px 1px #e6ebe0;
  font-weight: bold;
}
.page-light .content {
  clear: both;
  border-color: transparent;
  background-color: #d9eef2;
  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.4);
  -moz-box-shadow: 0 5px 5px rgba(0, 0, 0, 0.4);
  -webkit-box-shadow: 0 5px 5px rgba(0, 0, 0, 0.4);
}
.page-light pre {
  color: #1f4c7a;
  background-color: #ffffff;
  border-color: #d9eef2;
  border-width: 2px;
}
.page-light pre code .attribute {
  color: #735926;
}
.page-light pre code .variable {
  color: #455445;
}
.page-light pre code .element {
  color: #3d5c57;
}
.page-light pre code .string, .page-light pre .regexp {
  color: #70862d;
}
.page-light pre code .class {
  color: #6b572e;
  font-weight: normal;
}
.page-light pre code .id {
  color: #6b612e;
  font-weight: normal;
}
.page-light pre code .comment {
  color: rgba(0, 0, 0, 0.4);
}
.page-light pre code .number, .page-light pre .color {
  color: #6b382e;
}
.page-light pre code .class, .page-light pre code .mixin, .page-light pre .special {
  color: #3d575c;
}
.page-light pre code {
  font-size: 15px;
}
.page-light p + h2, .page-light pre + h2, .page-light code + h2 {
  border-top-color: rgba(0, 0, 0, 0.1);
}
.page-light h3,
.page-light h4,
.page-light h5,
.page-light h6 {
  border-left: 3px solid #143352;
  padding-left: 10px;
}
#reference .content h1 {
  padding: 0;
  font-size: 1.6em;
}
#reference .content h3 {
  font-weight: bold;
}
#reference .content p + h1, #reference .content pre + h1, #reference .content code + h1 {
  border-top: 6px solid rgba(0, 0, 0, 0.1);
  padding-top: 30px;
}
#reference .content p + h3, #reference .content pre + h3, #reference .content code + h3 {
  border-top: 2px solid rgba(0, 0, 0, 0.1);
  padding-top: 10px;
}
td {
  padding-right: 30px;
}
#synopsis {
  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.2);
  -moz-box-shadow: 0 5px 5px rgba(0, 0, 0, 0.2);
  -webkit-box-shadow: 0 5px 5px rgba(0, 0, 0, 0.2);
}
#synopsis h2, #about h2, #translations h2 {
  font-size: 30px;
  padding: 10px 0;
}
#synopsis h1 + h2, #about h1 + h2, #translations h1 + h2 {
  margin-top: 15px;
}
#synopsis h3, #about h3, #translations h3 {
  font-size: 22px;
}
#synopsis .code-example, #about .code-example, #translations .code-example {
  border-spacing: 0;
  border-width: 1px;
  border-style: dashed;
  padding: 0;
}
#synopsis .code-example pre, #about .code-example pre, #translations .code-example pre {
  border: 0;
  margin: 0;
}
#synopsis .code-example td, #about .code-example td, #translations .code-example td {
  border: 0;
  margin: 0;
  background-color: #191919;
  vertical-align: top;
  padding: 0;
}
#synopsis .code-example tr, #about .code-example tr, #translations .code-example tr {
  padding: 0;
}
#synopsis .css-output td, #about .css-output td, #translations .css-output td {
  border-left: 0;
}
#synopsis .css-output,
#about .css-output,
#translations .css-output,
#synopsis .less-example,
#about .less-example,
#translations .less-example {
  width: 390px;
}
#synopsis pre, #about pre, #translations pre {
  padding: 20px;
  line-height: 20px;
  font-size: 14px;
}
.page-dark {
  text-shadow: 0 -1px 1px #262626;
  color: #eaf2d9;
  background-color: #191919;
}
.page-dark a {
  text-decoration: none;
  color: #fbfbcb;
  border-bottom: 1px dashed rgba(255, 255, 255, 0.2);
}
.page-dark a:hover {
  text-decoration: none;
  border-bottom: 1px dashed #fbfbcb;
}
.page-dark .content {
  background-color: #262626;
  clear: both;
  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.4);
  -moz-box-shadow: 0 5px 5px rgba(0, 0, 0, 0.4);
  -webkit-box-shadow: 0 5px 5px rgba(0, 0, 0, 0.4);
}
.page-dark h1, .page-dark h2, .page-dark h3 {
  color: #e2e2b1;
}
.page-dark pre {
  background-color: #191919;
  border-color: #f9f9b3;
}
.page-dark pre code .attribute {
  color: #d9bf8c;
}
.page-dark pre code .variable {
  color: #738c73;
}
.page-dark pre code .element {
  color: #669991;
}
.page-dark pre code .string, .page-dark pre .regexp {
  color: #bcd279;
}
.page-dark pre code .class {
  color: #c2a770;
  font-weight: normal;
}
.page-dark pre code .id {
  color: #c2b470;
  font-weight: normal;
}
.page-dark pre code .comment {
  color: rgba(255, 255, 255, 0.2);
}
.page-dark pre code .number, .page-dark pre .color {
  color: #b35e4d;
}
.page-dark pre code .class, .page-dark pre code .mixin, .page-dark pre .special {
  color: #669199;
}
.page-dark code {
  color: #dcdc9e;
}
.page-dark code .string, .page-dark code .regexp {
  color: #87bbc5;
}
.page-dark code .keyword {
  color: #735926;
  font-weight: normal;
}
.page-dark code .comment {
  color: rgba(255, 255, 255, 0.2);
}
.page-dark code .number {
  color: #1f4c7a;
}
.page-dark code .class, .page-dark code .special {
  color: #669199;
}
.page-dark h3,
.page-dark h4,
.page-dark h5,
.page-dark h6 {
  border-left: 3px solid #eaf2d9;
  padding-left: 10px;
}
#usage {
  background-color: #262626;
}
#usage .content {
  background-color: transparent;
}
#about, #translations {
  background-color: #262626 !important;
}
#about .content, #translations .content {
  background-color: #2e2e2e;
}
#synopsis {
  background-color: #2e2e2e !important;
}
#synopsis .content {
  background-color: #2e2e2e;
}
#synopsis .content, #usage .content {
  box-shadow: 0 0px 0px rgba(0, 0, 0, 0);
  -moz-box-shadow: 0 0px 0px rgba(0, 0, 0, 0);
  -webkit-box-shadow: 0 0px 0px rgba(0, 0, 0, 0);
}
#about footer {
  margin-top: 30px;
  padding-top: 30px;
  border-top: 6px solid rgba(0, 0, 0, 0.1);
  text-align: center;
  font-size: 16px;
  color: rgba(255, 255, 255, 0.35);
  text-shadow: -1px -1px 1px rgba(0, 0, 0, 0.02);
}
#about footer #copy {
  font-size: 12px;
}
</style>
  </head>
  <body>
    <section id="menu">
      <div class="content">
        <nav><a href="http://lesscss.net/article/home.html">首页</a><a href="http://lesscss.net/article/usage.html">使用说明</a><a href="http://lesscss.net/article/document.html">语言特性</a><a href="http://lesscss.net/article/reference.html">函数手册</a><a href="http://lesscss.net/article/changelog.html">更新日志</a><a href="http://lesscss.net/article/resource.html">资源汇总</a><a href="https://github.com/cloudhead/less.js" target="_blank">Github(源)</a><a href="https://github.com/feichang/lesscss.net" target="_blank">Github(中文)</a><a href="http://veryless.org/" target="_blank">VeryLess</a></nav>
      </div>
    </section>
    <section id="docs" class="page page-light">
      <div class="content"><p>作为CSS的一种扩展，LESSCSS不仅向下兼容CSS的语法，而且连新增的特性也是使用CSS的语法。这样的设计使得学习LESS很轻松，而且你可以在任何时候回退到CSS。</p>

<h2>变量</h2>

<p>很容易理解：</p>

<pre><code><span class="variable">@nice-blue</span>: <span class="color">#5B83AD</span>;
<span class="variable">@light-blue</span>: <span class="variable">@nice-blue </span>+ <span class="color">#111</span>;

<span class="id">#header</span> { <span class="attribute">color</span>: <span class="variable">@light-blue</span>; }
</code></pre>

<p>输出：</p>

<pre><code><span class="id">#header</span> { <span class="attribute">color</span>: <span class="color">#6c94be</span>; }
</code></pre>

<p>甚至可以在定义变量值时使用其它的变量：</p>

<pre><code><span class="variable">@fnord</span>: <span class="string">"I am fnord."</span>;
<span class="variable">@var</span>: <span class="string">'fnord'</span>;
<span class="attribute">content</span>: <span class="variable">@@var</span>;
</code></pre>

<p>解析后：</p>

<pre><code><span class="attribute">content</span>: <span class="string">"I am fnord."</span>;
</code></pre>

<p>如果对同一个变量定义两次的话，在当前作用域中最后一次定义的将被使用。这与CSS的机制类似，最后一次定义的值会成为这个属性的值。</p>

<p>比如：</p>

<pre><code><span class="variable">@var</span>: <span class="number">0</span>;
<span class="class">.class1</span> {
    <span class="variable">@var</span>: <span class="number">1</span>;
    <span class="class">.class</span> {
        <span class="variable">@var</span>: <span class="number">2</span>;
        <span class="attribute">three</span>: <span class="variable">@var</span>;
        <span class="variable">@var</span>: <span class="number">3</span>;
    }
    <span class="attribute">one</span>: <span class="variable">@var</span>;
}
</code></pre>

<p>会编译成：</p>

<pre><code><span class="class">.class1</span> <span class="class">.class</span> {
    <span class="attribute">three</span>: <span class="number">3</span>;
}
<span class="class">.class1</span> {
    <span class="attribute">one</span>: <span class="number">1</span>;
}
</code></pre>

<p>变量是“按需加载”（lazy loaded）的，因此不必强制在使用之前声明。</p>

<p>下面是一个有效的LESS代码片段：</p>

<pre><code><span class="element">lazy</span>-<span class="element">eval</span> {
    <span class="attribute">width</span>: <span class="variable">@var</span>;
}

<span class="variable">@var</span>: <span class="variable">@a</span>;
<span class="variable">@a</span>: <span class="number">9%</span>;
</code></pre>

<p>下面这个片段也是有效的：</p>

<pre><code><span class="class">.lazy-eval-scope</span> {
    <span class="attribute">width</span>: <span class="variable">@var</span>;
    <span class="variable">@a</span>: <span class="number">9%</span>;
}

<span class="variable">@var</span>: <span class="variable">@a</span>;
<span class="variable">@a</span>: <span class="number">100%</span>;
</code></pre>

<p>这两个片段都会编译成：</p>

<pre><code><span class="class">.lazy-eval-scope</span> {
    <span class="attribute">width</span>: <span class="number">9%</span>;
}
</code></pre>

<h2>混合（Mixins）</h2>

<p>在 LESS 中我们可以定义一些通用的属性集为一个 class，然后在另一个 class 中去调用这些属性，下面有这样一个 class：</p>

<pre><code><span class="class">.bordered</span> {
    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;
    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;
}
</code></pre>

<p>那如果我们现在需要在其他 class 中引入那些通用的属性集，那么我们只需要在任何 class 中像下面这样调用就可以了：</p>

<pre><code><span class="id">#menu</span> <span class="element">a</span> {
    <span class="attribute">color</span>: <span class="color">#111</span>;
    <span class="mixin">.bordered</span>;
}
<span class="class">.post</span> <span class="element">a</span> {
    <span class="attribute">color</span>: red;
    <span class="mixin">.bordered</span>;
}
</code></pre>

<p><code>.bordered</code> class 里面的属性样式都会在 <code>#menu a</code> 和 <code>.post a</code> 中体现出来：</p>

<pre><code><span class="id">#menu</span> <span class="element">a</span> {
    <span class="attribute">color</span>: <span class="color">#111</span>;
    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;
    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;
}
<span class="class">.post</span> <span class="element">a</span> {
    <span class="attribute">color</span>: red;
    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;
    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;
}
</code></pre>

<p>任何 CSS class, id 属性集都可以以同样的方式引入。</p>

<blockquote>
  <p>注意：变量也会被混合，也就是说变量会被带到当前的作用域。这个特性还有争议，也许在未来会有变化。</p>
</blockquote>

<h3>带参数混合</h3>

<p>在 LESS 中，你还可以像函数一样定义一个带参数的属性集合：</p>

<pre><code><span class="class">.border-radius</span> (<span class="variable">@radius</span>) {
    <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;
    <span class="attribute">-moz-border-radius</span>: <span class="variable">@radius</span>;
    <span class="attribute">-webkit-border-radius</span>: <span class="variable">@radius</span>;
}
</code></pre>

<p>然后在其他 class 中像这样调用它：</p>

<pre><code><span class="id">#header</span> {
    <span class="mixin">.border-radius</span>(<span class="number">4px</span>);
}
<span class="class">.button</span> {
    <span class="mixin">.border-radius</span>(<span class="number">6px</span>);
}
</code></pre>

<p>我们还可以像这样给参数设置默认值：</p>

<pre><code><span class="class">.border-radius</span> (<span class="variable">@radius</span>: <span class="number">5px</span>) {
    <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;
    <span class="attribute">-moz-border-radius</span>: <span class="variable">@radius</span>;
    <span class="attribute">-webkit-border-radius</span>: <span class="variable">@radius</span>;
}
</code></pre>

<p>所以现在如果我们像这样调用它的话：</p>

<pre><code><span class="id">#header</span> {
    <span class="mixin">.border-radius</span>;
}
</code></pre>

<p><code>radius</code> 的值就会是 5px。</p>

<p>你也可以定义不带参数属性集合，如果你想隐藏这个属性集合，不让它暴露到 CSS 中去，但是你还想在其他的属性集合中引用，你会发现这个方法非常的好用：</p>

<pre><code><span class="class">.wrap</span> () {
    <span class="attribute">text-wrap</span>: wrap;
    <span class="attribute">white-space</span>: pre-wrap;
    <span class="attribute">white-space</span>: -moz-pre-wrap;
    <span class="attribute">word-wrap</span>: break-word;
}

<span class="element">pre</span> { <span class="mixin">.wrap</span> }
</code></pre>

<p>输出：</p>

<pre><code><span class="element">pre</span> {
    <span class="attribute">text-wrap</span>: wrap;
    <span class="attribute">white-space</span>: pre-wrap;
    <span class="attribute">white-space</span>: -moz-pre-wrap;
    <span class="attribute">word-wrap</span>: break-word;
}
</code></pre>

<h3>多参数混合</h3>

<p>多个参数可以使用分号或者逗号分隔，推荐使用分号分隔，因为逗号有两重含义：它既可以表示混合的参数，也可以表示一个参数中一组值的分隔符。</p>

<p>使用分号作为参数分隔符意味着可以将逗号分隔的一组值作为一个变量处理。换句话说，如果编译器在混合的定义或者是调用中找到至少一个分号，就会假设参数是使用分号分隔的，所有的逗号都属于参数中的一组值的分隔符。</p>

<p>2个参数，每个参数都含有通过逗号分隔的一组值的情况：<code><span class="mixin">.name</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; something, else)</code>。</p>

<p>3个参数，每个参数只含一个数字的情况：<code>.name(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</code>。</p>

<p>使用一个象征性的分号可以创建一个只含一个参数，但参数包含一组值的混合：<code><span class="mixin">.name</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>;)</code>。</p>

<p>逗号分隔的一组值参数的默认值：<code><span class="mixin">.name</span>(<span class="variable">@param1</span>: red, blue;)</code>。</p>

<p>使用同样的名字和同样数量的参数定义多个混合是合法的。在被调用时，LESS会应用到所有可以应用的混合上。比如你调用混合时只传了一个参数<code>.mixin(green)</code>，那么所有只强制要求一个参数的混合都会被调用：</p>

<pre><code><span class="class">.mixin</span>(<span class="variable">@color</span>) {
    color<span class="number">-1</span>: <span class="variable">@color</span>;
}
<span class="mixin">.mixin</span>(<span class="variable">@color</span>; <span class="variable">@padding</span>:<span class="number">2</span>) {
    color<span class="number">-2</span>: <span class="variable">@color</span>;
    padding<span class="number">-2</span>: <span class="variable">@padding</span>;
}
<span class="mixin">.mixin</span>(<span class="variable">@color</span>; <span class="variable">@padding</span>; <span class="variable">@margin</span>: <span class="number">2</span>) {
    color<span class="number">-3</span>: <span class="variable">@color</span>;
    padding<span class="number">-3</span>: <span class="variable">@padding</span>;
    <span class="attribute">margin</span>: <span class="variable">@margin </span><span class="variable">@margin </span><span class="variable">@margin </span><span class="variable">@margin</span>;
}
<span class="class">.some</span> <span class="class">.selector</span> <span class="element">div</span> {
    <span class="mixin">.mixin</span>(<span class="color">#008000</span>);
}
</code></pre>

<p>编译结果：</p>

<pre><code><span class="class">.some</span> <span class="class">.selector</span> <span class="element">div</span> {
    color<span class="number">-1</span>: <span class="color">#008000</span>;
    color<span class="number">-2</span>: <span class="color">#008000</span>;
    padding<span class="number">-2</span>: <span class="number">2</span>;
}
</code></pre>

<h3>@arguments 变量</h3>

<p>@arguments包含了所有传递进来的参数。 如果你不想单独处理每一个参数的话就可以像这样写：</p>

<pre><code><span class="class">.box-shadow</span> (<span class="variable">@x</span>: <span class="number">0</span>, <span class="variable">@y</span>: <span class="number">0</span>, <span class="variable">@blur</span>: <span class="number">1px</span>, <span class="variable">@color</span>: #<span class="number">000</span>) {
    <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;
    <span class="attribute">-moz-box-shadow</span>: <span class="variable">@arguments</span>;
    <span class="attribute">-webkit-box-shadow</span>: <span class="variable">@arguments</span>;
}
<span class="mixin">.box-shadow</span>(<span class="number">2px</span>, <span class="number">5px</span>);
</code></pre>

<p>将会输出：</p>

<pre><code><span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">5px</span> <span class="number">1px</span> <span class="color">#000</span>;
<span class="attribute">-moz-box-shadow</span>: <span class="number">2px</span> <span class="number">5px</span> <span class="number">1px</span> <span class="color">#000</span>;
 <span class="attribute">-webkit-box-shadow</span>: <span class="number">2px</span> <span class="number">5px</span> <span class="number">1px</span> <span class="color">#000</span>;
</code></pre>

<h3>高级参数用法与 <code><span class="variable">@rest</span></code> 变量</h3>

<p>如果需要在 mixin 中不限制参数的数量，可以在变量名后添加 ...，表示这里可以使用 N 个参数。</p>

<pre><code><span class="class">.mixin</span> (...) {        <span class="comment">// 接受 0-N 个参数</span>
<span class="class">.mixin</span> () {           <span class="comment">// 不接受任何参数</span>
<span class="class">.mixin</span> (<span class="variable">@a</span>: <span class="number">1</span>) {      <span class="comment">// 接受 0-1 个参数</span>
<span class="class">.mixin</span> (<span class="variable">@a</span>: <span class="number">1</span>, ...) { <span class="comment">// 接受 0-N 个参数</span>
<span class="class">.mixin</span> (<span class="variable">@a</span>, ...) {    <span class="comment">// 接受 1-N 个参数</span>
</code></pre>

<p>此外：</p>

<pre><code><span class="class">.mixin</span> (<span class="variable">@a</span>, <span class="variable">@rest</span>...) {
    <span class="comment">// @rest 表示 @a 之后的参数</span>
    <span class="comment">// @arguments 表示所有参数</span>
}
</code></pre>

<h3>　<code><span class="special">!important</span></code>关键字</h3>

<p>调用时在混合后面加上<code><span class="special">!important</span></code>关键字表示将混合带来的所有属性标记为<code><span class="special">!important</span></code>：</p>

<pre><code><span class="class">.mixin</span> (<span class="variable">@a</span>: <span class="number">0</span>) {
    <span class="attribute">border</span>: <span class="variable">@a</span>;
    <span class="attribute">boxer</span>: <span class="variable">@a</span>;
}
<span class="class">.unimportant</span> {
    <span class="mixin">.mixin</span>(<span class="number">1</span>); 
}
<span class="class">.important</span> {
    <span class="mixin">.mixin</span>(<span class="number">2</span>) <span class="special">!important</span>; 
}
</code></pre>

<p>编译成：</p>

<pre><code><span class="class">.unimportant</span> {
    <span class="attribute">border</span>: <span class="number">1</span>;
    <span class="attribute">boxer</span>: <span class="number">1</span>;
}
<span class="class">.important</span> {
    <span class="attribute">border</span>: <span class="number">2</span> <span class="special">!important</span>;
    <span class="attribute">boxer</span>: <span class="number">2</span> <span class="special">!important</span>;
}
</code></pre>

<h3>模式匹配与Guard表达式</h3>

<p>LESS 提供了通过参数值控制 mixin 行为的功能，让我们先从最简单的例子开始：</p>

<pre><code><span class="class">.mixin</span> (<span class="variable">@s</span>, <span class="variable">@color</span>) { ... }

<span class="class">.class</span> {
    <span class="mixin">.mixin</span>(<span class="variable">@switch</span>, <span class="color">#888</span>);
}
</code></pre>

<p>如果要根据 <code><span class="variable">@switch</span></code> 的值控制 <code>.mixin</code> 行为，只需按照下面的方法定义 <code>.mixin</code>：</p>

<pre><code><span class="class">.mixin</span> (dark, <span class="variable">@color</span>) {
    <span class="attribute">color</span>: darken(<span class="variable">@color</span>, <span class="number">10%</span>);
}
<span class="class">.mixin</span> (light, <span class="variable">@color</span>) {
    <span class="attribute">color</span>: lighten(<span class="variable">@color</span>, <span class="number">10%</span>);
}
<span class="class">.mixin</span> (<span class="variable">@_</span>, <span class="variable">@color</span>) {
    <span class="attribute">display</span>: block;
}
</code></pre>

<p>然后调用：</p>

<pre><code><span class="variable">@switch</span>: light;

<span class="class">.class</span> {
    <span class="mixin">.mixin</span>(<span class="variable">@switch</span>, <span class="color">#888</span>);
}
</code></pre>

<p>将会得到以下 CSS：</p>

<pre><code><span class="class">.class</span> {
    <span class="attribute">color</span>: <span class="color">#a2a2a2</span>;
    <span class="attribute">display</span>: block;
}
</code></pre>

<p>传给 <code>.mixin</code> 的颜色将执行 <code>lighten</code> 函数，如果 <code><span class="variable">@switch</span></code> 的值是 <code>dark</code>，那么则会执行 <code>darken</code> 函数输出颜色。</p>

<p>以下是整个过程如何发生的：</p>

<ul>
<li>第一个 <code>.mixin</code> 没有匹配，因为不满足 <code>dark</code> 条件；</li>
<li>第二个 <code>.mixin</code> 可以被匹配，因为它满足了 <code>light</code> 条件；</li>
<li>第三个 <code>.mixin</code> 也可以被匹配，因为它接受任何参数。</li>
</ul>

<p>只有满足匹配要求的混合才会被使用。混合中的变量可以匹配任何值，非变量形式的值只有与传入的值完全相等时才可以匹配成功。</p>

<p>我们也可以根据参数的数量进行匹配，比如：</p>

<pre><code><span class="class">.mixin</span> (<span class="variable">@a</span>) {
    <span class="attribute">color</span>: <span class="variable">@a</span>;
}
<span class="class">.mixin</span> (<span class="variable">@a</span>, <span class="variable">@b</span>) {
    <span class="attribute">color</span>: fade(<span class="variable">@a</span>, <span class="variable">@b</span>);
}
</code></pre>

<p>调用 <code>.mixin</code> 时，如果使用了一个参数，输出第一个 <code>.mixin</code>，使用了两个参数，则输出第二个。</p>

<h4>Guards</h4>

<p>与上面匹配值或者匹配参数数量的情况不同，Guards 被用来匹配表达式 (expressions)。如果你很熟悉编程函数的用法，那么很可能你已经掌握它的用法了。</p>

<p>为了尽可能地符合 CSS 的语言结构，LESS 选择使用 guard混合（guarded mixins）（类似于 <code><span class="variable">@media</span></code> 的工作方式）执行条件判断，而不是加入 <code>if/else</code> 声明。</p>

<p>首先通过下面的例子开始介绍：</p>

<pre><code><span class="class">.mixin</span> (<span class="variable">@a</span>) when (lightness(<span class="variable">@a</span>) &gt;= <span class="number">50%</span>) {
    <span class="attribute">background-color</span>: black;
}
<span class="class">.mixin</span> (<span class="variable">@a</span>) when (lightness(<span class="variable">@a</span>) &lt; <span class="number">50%</span>) {
    <span class="attribute">background-color</span>: white;
}
<span class="class">.mixin</span> (<span class="variable">@a</span>) {
    <span class="attribute">color</span>: <span class="variable">@a</span>;
}
</code></pre>

<p>要点在于关键词 <code>when</code>，它引入了一个 guard 条件 （这里只用到一个 guard）。现在如果运行下面的代码：</p>

<pre><code><span class="class">.class1</span> { <span class="mixin">.mixin</span>(<span class="color">#ddd</span>) }
<span class="class">.class2</span> { <span class="mixin">.mixin</span>(<span class="color">#555</span>) }
</code></pre>

<p>将会得到以下输出结果：</p>

<pre><code><span class="class">.class1</span> {
    <span class="attribute">background-color</span>: black;
    <span class="attribute">color</span>: <span class="color">#ddd</span>;
}
<span class="class">.class2</span> {
    <span class="attribute">background-color</span>: white;
    <span class="attribute">color</span>: <span class="color">#555</span>;
}
</code></pre>

<p>Guards 支持的运算符包括：<code>&gt;</code> <code>&gt;=</code> <code>=</code> <code>=&lt;</code> <code>&lt;</code>。说明一下，<code>true</code>关键字是唯一被判断为真的值，也就是这两个混合是相等的：</p>

<pre><code><span class="class">.truth</span> (<span class="variable">@a</span>) when (<span class="variable">@a</span>) { ... }
<span class="class">.truth</span> (<span class="variable">@a</span>) when (<span class="variable">@a </span>= true) { ... }
</code></pre>

<p>其他不为 <code>true</code> 的值都判为假：</p>

<pre><code><span class="class">.class</span> {
    <span class="mixin">.truth</span>(<span class="number">40</span>); <span class="comment">// 不会匹配上面的 mixin</span>
}
</code></pre>

<p>多个Guards可以通过逗号表示分隔，如果其中任意一个结果为 <code>true</code>，则匹配成功：</p>

<pre><code><span class="class">.mixin</span> (<span class="variable">@a</span>) when (<span class="variable">@a </span>&gt; <span class="number">10</span>), (<span class="variable">@a </span>&lt; -<span class="number">10</span>) { ... }
</code></pre>

<p>值得注意的是不同的参数之间也可以比较，而参与比较的也可以一个参数都没有：</p>

<pre><code><span class="variable">@media</span>: mobile;

<span class="class">.mixin</span> (<span class="variable">@a</span>) when (<span class="variable">@media </span>= mobile) { ... }
<span class="class">.mixin</span> (<span class="variable">@a</span>) when (<span class="variable">@media </span>= desktop) { ... }

<span class="class">.max</span> (<span class="variable">@a</span>, <span class="variable">@b</span>) when (<span class="variable">@a </span>&gt; <span class="variable">@b</span>) { <span class="attribute">width</span>: <span class="variable">@a </span>}
<span class="class">.max</span> (<span class="variable">@a</span>, <span class="variable">@b</span>) when (<span class="variable">@a </span>&lt; <span class="variable">@b</span>) { <span class="attribute">width</span>: <span class="variable">@b </span>}
</code></pre>

<p>如果需要根据值的类型匹配混合，可以使用 <code>is*</code> 函数：</p>

<pre><code><span class="class">.mixin</span> (<span class="variable">@a</span>, <span class="variable">@b</span>: <span class="number">0</span>) when (isnumber(<span class="variable">@b</span>)) { ... }
<span class="class">.mixin</span> (<span class="variable">@a</span>, <span class="variable">@b</span>: black) when (iscolor(<span class="variable">@b</span>)) { ... }
</code></pre>

<p>几个检查基本类型的函数：</p>

<ul>
<li><code>iscolor</code></li>
<li><code>isnumber</code></li>
<li><code>isstring</code></li>
<li><code>iskeyword</code></li>
<li><code>isurl</code></li>
</ul>

<p>如果需要检查一个值（数字）使用了哪个单位，可以使用下面三个函数：</p>

<ul>
<li><code>ispixel</code></li>
<li><code>ispercentage</code></li>
<li><code>isem</code></li>
</ul>

<p>最后，你可以使用关键词 <code>and</code> 在 <code>guard</code> 中加入额外的条件:</p>

<p>.mixin (@a) when (isnumber(@a)) and (@a &gt; 0) { ... }</p>

<p>或者，使用关键词 <code>not</code> 否定条件：</p>

<p>.mixin (@b) when not (@b &gt; 0) { ... }</p>

<h2>嵌套规则</h2>

<p>LESS 可以让我们以嵌套的方式编写层叠样式。 让我们先看下下面这段 CSS：</p>

<pre><code><span class="id">#header</span> { <span class="attribute">color</span>: black; }

<span class="id">#header</span> <span class="class">.navigation</span> {
<span class="attribute">font-size</span>: <span class="number">12px</span>;
}

<span class="id">#header</span> <span class="class">.logo</span> {
<span class="attribute">width</span>: <span class="number">300px</span>;
}

<span class="id">#header</span> <span class="class">.logo</span><span class="class">:hover</span> {
<span class="attribute">text-decoration</span>: none;
}
</code></pre>

<p>在 LESS 中, 我们就可以这样写：</p>

<pre><code><span class="id">#header</span> {
    <span class="attribute">color</span>: black;

    <span class="class">.navigation</span> {
        <span class="attribute">font-size</span>: <span class="number">12px</span>;
    }

    <span class="class">.logo</span> {
        <span class="attribute">width</span>: <span class="number">300px</span>;
        &amp;<span class="class">:hover</span> { <span class="attribute">text-decoration</span>: none }
    }
}
</code></pre>

<p>或者这样写：</p>

<pre><code><span class="id">#header</span> { <span class="attribute">color</span>: black;
    <span class="class">.navigation</span> { <span class="attribute">font-size</span>: <span class="number">12px</span> }
    <span class="class">.logo</span> { <span class="attribute">width</span>: <span class="number">300px</span>;
        &amp;<span class="class">:hover</span> { <span class="attribute">text-decoration</span>: none }
    }
}
</code></pre>

<p>代码更简洁了，而且感觉跟 DOM 结构格式有点像。</p>

<p>注意 <code>&amp;</code> 符号的使用 — 如果你想写串联选择器，而不是写后代选择器，就可以用到 <code>&amp;</code> 了。这点对伪类尤其有用如 <code>:hover</code> 和 <code>:focus</code>。</p>

<p>例如：</p>

<pre><code><span class="class">.bordered</span> {
    &amp;<span class="class">.float</span> {
        <span class="attribute">float</span>: left;
    }
    <span class="class">.top</span> {
        <span class="attribute">margin</span>: <span class="number">5px</span>;
    }
}
</code></pre>

<p>会输出：</p>

<pre><code><span class="class">.bordered</span><span class="class">.float</span> {
    <span class="attribute">float</span>: left;
}
<span class="class">.bordered</span> <span class="class">.top</span> {
    <span class="attribute">margin</span>: <span class="number">5px</span>;
}
</code></pre>

<h3>嵌套 Media Queries</h3>

<p>Media query也可以使用同样的方式进行嵌套。</p>

<pre><code><span class="class">.one</span> {
    <span class="variable">@media </span>(width: <span class="number">400px</span>) {
        <span class="attribute">font-size</span>: <span class="number">1.2em</span>;
        <span class="variable">@media </span><span class="element">print</span> <span class="element">and</span> <span class="element">color</span> {
            <span class="attribute">color</span>: blue;
        }
    }
}
</code></pre>

<p>输出：</p>

<pre><code><span class="variable">@media </span>(width: <span class="number">400px</span>) {
    <span class="class">.one</span> {
        <span class="attribute">font-size</span>: <span class="number">1.2em</span>;
    }
}
<span class="variable">@media </span>(width: <span class="number">400px</span>) <span class="element">and</span> <span class="element">print</span> <span class="element">and</span> <span class="element">color</span> {
    <span class="class">.one</span> {
        <span class="attribute">color</span>: blue;
        }
}
</code></pre>

<h3><code>&amp;</code> 的高级用法</h3>

<p>用在选择器中的<code>&amp;</code>还可以反转嵌套的顺序并且可以应用到多个类名上。</p>

<p>例如：</p>

<pre><code><span class="class">.child</span>, <span class="class">.sibling</span> {
    <span class="class">.parent</span> &amp; {
        <span class="attribute">color</span>: black;
    }
    &amp; + &amp; {
        <span class="attribute">color</span>: red;
    }
}
</code></pre>

<p>输出：</p>

<pre><code><span class="class">.parent</span> <span class="class">.child</span>,
<span class="class">.parent</span> <span class="class">.sibling</span> {
    <span class="attribute">color</span>: black;
}
<span class="class">.child</span> + <span class="class">.child</span>,
<span class="class">.child</span> + <span class="class">.sibling</span>,
<span class="class">.sibling</span> + <span class="class">.child</span>,
<span class="class">.sibling</span> + <span class="class">.sibling</span> {
    <span class="attribute">color</span>: red;
}
</code></pre>

<p><code>&amp;</code>也可以用在混合中用于指示嵌套这个混合的父选择器。</p>

<h2>运算</h2>

<p>任何数字、颜色或者变量都可以参与运算，运算应该被包裹在括号中。来看一组例子：</p>

<pre><code><span class="variable">@base</span>: <span class="number">5%</span>;
<span class="variable">@filler</span>: (<span class="variable">@base </span>* <span class="number">2</span>);
<span class="variable">@other</span>: (<span class="variable">@base </span>+ <span class="variable">@filler</span>);

<span class="attribute">color</span>: (<span class="color">#888</span> / <span class="number">4</span>);
<span class="attribute">background-color</span>: (<span class="variable">@base-color </span>+ <span class="color">#111</span>);
<span class="attribute">height</span>: (<span class="number">100%</span> / <span class="number">2</span> + <span class="variable">@filler</span>);
</code></pre>

<p>LESS 的运算已经超出了我们的期望，如果像下面这样的话，它能够分辨出颜色和单位：</p>

<pre><code><span class="variable">@var</span>: (<span class="number">1px</span> + <span class="number">5</span>);
</code></pre>

<p>LESS 将会使用出现的单位，最终输出 <code><span class="number">6px</span></code>。</p>

<p>也可以使用括号：</p>

<pre><code><span class="attribute">width</span>: ((<span class="variable">@var </span>+ <span class="number">5</span>) * <span class="number">2</span>);
</code></pre>

<h2>函数</h2>

<p>LESS 提供了多种函数用于控制颜色变化、处理字符串、算术运算等等。这些函数在<a href="http://lesscss.net/article/reference.html">函数手册</a>中有详细介绍。</p>

<p>函数的用法非常简单，下面这个例子将介绍如何将 <code><span class="number">0.5</span></code> 转换为 <code><span class="number">50%</span></code>，将颜色饱和度增加 <code><span class="number">5%</span></code>,以及颜色亮度降低 <code><span class="number">25%</span></code> 色相值增加 <code><span class="number">8</span></code> 等用法：</p>

<pre><code><span class="variable">@base</span>: <span class="color">#f04615</span>;
<span class="variable">@width</span>: <span class="number">0.5</span>;

<span class="class">.class</span> {
    <span class="attribute">width</span>: percentage(<span class="number">0.5</span>); <span class="comment">// returns `50%`</span>
    <span class="attribute">color</span>: saturate(<span class="variable">@base</span>, <span class="number">5%</span>);
    <span class="attribute">background-color</span>: spin(lighten(<span class="variable">@base</span>, <span class="number">25%</span>), <span class="number">8</span>);
}
</code></pre>

<h2>命名空间</h2>

<p>有时候，你可能为了更好组织 CSS 或者单纯是为了更好的封装，将一些变量或者混合模块打包起来，你可以像下面这样在 <code>#bundle</code> 中定义一些属性集之后可以重复使用：</p>

<pre><code><span class="id">#bundle</span> {
    <span class="class">.button</span> () {
        <span class="attribute">display</span>: block;
        <span class="attribute">border</span>: <span class="number">1px</span> solid black;
        <span class="attribute">background-color</span>: grey;
        &amp;<span class="class">:hover</span> { <span class="attribute">background-color</span>: white }
    }
    <span class="class">.tab</span> { ... }
    <span class="class">.citation</span> { ... }
}
</code></pre>

<p>你只需要在 <code>#header a</code> 中像这样引入 <code>.button</code>：</p>

<pre><code><span class="id">#header</span> <span class="element">a</span> {
    <span class="attribute">color</span>: orange;
    <span class="mixin">#bundle</span> &gt; <span class="mixin">.button</span>;
}
</code></pre>

<h2>作用域</h2>

<p>LESS 中的作用域跟其他编程语言非常类似，首先会从本地查找变量或者混合模块，如果没找到的话会去父级作用域中查找，直到找到为止。</p>

<pre><code><span class="variable">@var</span>: red;

<span class="id">#page</span> {
    <span class="variable">@var</span>: white;
    <span class="id">#header</span> {
        <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// white</span>
    }
}

<span class="id">#footer</span> {
    <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// red</span>
}
</code></pre>

<h2>注释</h2>

<p>CSS 的注释格式在 LESS 中依然有效：</p>

<pre><code><span class="comment">/* Hello, I'm a CSS-style comment */</span>
<span class="class">.class</span> { <span class="attribute">color</span>: black }
</code></pre>

<p>LESS 同样也支持双斜线的注释，但是编译成 CSS 的时候自动过滤掉：</p>

<pre><code><span class="comment">// Hi, I'm a silent comment, I won't show up in your CSS</span>
<span class="class">.class</span> { <span class="attribute">color</span>: white }
</code></pre>

<h2>导入（Import）</h2>

<p>在LESS中，你既可以导入CSS文件，也可以导入LESS文件。但只有导入的LESS文件才会被处理（编译），导入的CSS文件会保持原样。如果你希望导入一个CSS文件，保留<code>.css</code>后缀即可：</p>

<pre><code><span class="variable">@import </span><span class="string">"lib.css"</span>;
</code></pre>

<p>编译过程中，对导入CSS文件只做一处处理：将导入的语句提到最前，紧跟在<code><span class="variable">@charset</span></code>之后。</p>

<p>例如输入的文件有导入语句：</p>

<pre><code><span class="element">h1</span> { <span class="attribute">color</span>: green; }
<span class="variable">@import </span><span class="string">"import/official-branding.css?urlParameter=23"</span>;
</code></pre>

<p>导入语句将被提到最前：</p>

<pre><code><span class="variable">@import </span><span class="string">"import/official-branding.css?urlParameter=23"</span>;
<span class="element">h1</span> { <span class="attribute">color</span>: green; }
</code></pre>

<p>被导入的LESS文件会被复制到含导入语句的文件中，然后一起编译。导入和被导入的文件共享所有的混合、命名空间、变量以及其它结构。</p>

<p>另外，如果导入语句是通过media query指定的，那么导入的语句编译之后会被包裹在@Media声明中。</p>

<p>例如有被导入的文件<code>library.less</code>：</p>

<pre><code><span class="variable">@imported-color</span>: red;
<span class="element">h1</span> { <span class="attribute">color</span>: green; }
</code></pre>

<p>主样式文件导入了上面的<code>library.less</code>：</p>

<pre><code><span class="variable">@import </span><span class="string">"library.less"</span> screen and (<span class="attribute">max-width</span>: <span class="number">400px</span>); <span class="comment">// 通过media query指定的import</span>
<span class="variable">@import </span><span class="string">"library.less"</span>; <span class="comment">// 无media query的import</span>

<span class="class">.class</span> {
    <span class="attribute">color</span>: <span class="variable">@imported</span>Color; <span class="comment">// 使用导入的变量</span>
}
</code></pre>

<p>将会编译出：</p>

<pre><code><span class="comment">// 对应通过media query指定的import</span>
<span class="variable">@media </span>screen and (max-width: <span class="number">400px</span>) {
    <span class="element">h1</span> { <span class="attribute">color</span>: green; }
}

<span class="comment">// 对应无media query的import</span>
<span class="element">h1</span> { <span class="attribute">color</span>: green; }
<span class="class">.class</span> {
    <span class="comment">// 使用导入的变量</span>
    <span class="attribute">color</span>: <span class="color">#ff0000</span>;
}
</code></pre>

<p>LESS文件的导入语句并不强制要求在顶部，它可以被入在规则内部、混合中或者其它的结构中。</p>

<p>例如放在规则内部：</p>

<pre><code><span class="element">pre</span> {
    <span class="variable">@import </span><span class="string">"library.less"</span>;
    <span class="attribute">color</span>: <span class="variable">@imported</span>Color;
}
</code></pre>

<p>在<code>library.less</code>中定义的变量和规则都会被投篮到<code>pre</code>的规则中：</p>

<pre><code><span class="element">pre</span> {
    <span class="attribute">color</span>: <span class="color">#ff0000</span>; <span class="comment">// 定义在library.less中的变量可用</span>
}
<span class="element">pre</span> <span class="element">h1</span> { <span class="comment">// 定义在library.less中的样式规则被嵌套到pre中</span>
    <span class="attribute">color</span>: green;
}
</code></pre>

<p>在v1.3.0 - v1.3.3中，<code><span class="variable">@import</span></code>允许多次导入同一个文件，可以使用<code><span class="variable">@import-once</span></code>让同一文件只导入一次。</p>

<p>在v1.4.0中，移除了<code><span class="variable">@import-once</span></code>，<code><span class="variable">@import</span></code>的行为就是同一文件只导入一次了。这意味着，如果代码是这样的：</p>

<pre><code><span class="variable">@import </span>“file<span class="mixin">.less</span>”; <span class="variable">@import </span>“file<span class="mixin">.less</span>”;
</code></pre>

<p>那么第二个文件将被忽略。</p>

<p>任何不以<code>.css</code>结尾的文件都被认为是less文件，将被处理。另外，如果文件名没有后缀，LESS会自动在结尾加上<code>.less</code>。下面两种写法是等价的：</p>

<pre><code><span class="variable">@import </span><span class="string">"lib.less"</span>;
<span class="variable">@import </span><span class="string">"lib"</span>;
</code></pre>

<p>在v1.4.0中，你可以强制某个文件使用特写的方式来处理，比如：</p>

<pre><code><span class="variable">@import </span>(css) <span class="string">"lib"</span>;
</code></pre>

<p>将会输出：</p>

<pre><code><span class="variable">@import </span><span class="string">"lib"</span>;
</code></pre>

<p>而</p>

<pre><code><span class="variable">@import </span>(less) <span class="string">"lib.css"</span>;
</code></pre>

<p>会将<code>lib.css</code>引入，并当作LESS文件处理。如果你指定了某个文件是less但是没有包含后缀名，LESS将不会自动添加后缀。</p>

<h2>字符串插值</h2>

<p>变量可以用像 <code>@{name}</code> 这样的结构，以类似 ruby 和 php 的方式嵌入到字符串中：</p>

<pre><code><span class="variable">@base-url</span>: <span class="string">"http://assets.fnord.com"</span>;
<span class="attribute">background-image</span>: url(<span class="string">"@{base-url}/images/bg.png"</span>);
</code></pre>

<h2>避免编译</h2>

<p>有时候我们需要输出一些不正确的 CSS 语法或者使用一些 LESS 不认识的专有语法。</p>

<p>要输出这样的值我们可以在字符串前加上一个 ~，例如：</p>

<pre><code><span class="class">.class</span> {
    <span class="attribute">filter</span>: ~<span class="string">"ms:alwaysHasItsOwnSyntax.For.Stuff()"</span>;
}
</code></pre>

<p>这叫作“避免编译”，输出结果为：</p>

<pre><code><span class="class">.class</span> {
    <span class="attribute">filter</span>: <span class="attribute">ms</span>:alwaysHasItsOwnSyntax<span class="mixin">.For</span><span class="mixin">.Stuff</span>();
}
</code></pre>

<p>在避免编译的值中间也可以像字符串一样插入变量：</p>

<pre><code><span class="class">.class</span> {
    <span class="variable">@what</span>: <span class="string">"Stuff"</span>;
    <span class="attribute">filter</span>: ~<span class="string">"ms:alwaysHasItsOwnSyntax.For.@{what}()"</span>;
}
</code></pre>

<h2>选择器插值</h2>

<p>如果需要在选择器中使用 LESS 变量，只需通过使用和字符串插件一样的 <code>@{selector}</code> 即可，例如：</p>

<pre><code><span class="variable">@name</span>: blocked;
.@{name} {
    <span class="attribute">color</span>: black;
}
</code></pre>

<p>输出：</p>

<pre><code><span class="class">.blocked</span> {
    <span class="attribute">color</span>: black;
}
</code></pre>

<p>注意：<code>(~<span class="string">"@{name}"</span>)</code> 语句可以在 LESS 1.3.1 等之前版本中使用，但 1.4.0 版将不再支持这种用法。</p>

<h2>media query作为变量</h2>

<p>如果你希望在media query中使用LESS变量，你可以直接使用普通的变量方式。例如：</p>

<pre><code><span class="variable">@single</span>Q<span class="attribute">uery</span>: ~<span class="string">"(max-width: 500px)"</span>;
<span class="variable">@media </span><span class="element">screen</span>, <span class="variable">@single</span>Query {
    <span class="element">set</span> {
        <span class="attribute">padding</span>: <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span>;
    }
}
</code></pre>

<p>被编译为：</p>

<pre><code><span class="variable">@media </span>screen, (max-width: <span class="number">500px</span>) {
    <span class="element">set</span> {
        <span class="attribute">padding</span>: <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span>;
    }
}
</code></pre>

<p>变量必须包含完整的media query。这样写会导致报错：<code><span class="variable">@media </span><span class="element">screen</span> <span class="element">and</span> <span class="variable">@partial </span>{</code>。</p>

<p>在1.4.0中，在开启严格运算模式的情况下，你也可以在media query的条件中插入变量。如<code><span class="variable">@media </span>screen, (max-width: <span class="variable">@width</span>) {</code>。</p>

<h2>JavaScript求值</h2>

<p>在LESS中还可以使用JavaScript表达式来求值。我们不建议谨慎使用这个特性，因为它会使得LESS在其它平台的可编译性变低，也会使得LESS更难维护。如果可能，试着想想能否用一个函数来完成相同的事情，在github上这样的库很多。我们有计划开放对函数的扩展。但，如果你仍然想用的话，你可以通过反引号的方式使用：</p>

<pre><code><span class="variable">@var</span>: `<span class="string">"hello"</span><span class="mixin">.toUpperCase</span>() + <span class="string">'!'</span>`;
</code></pre>

<p>输出：</p>

<pre><code><span class="variable">@var</span>: <span class="string">"HELLO!"</span>;
</code></pre>

<p>注意你也可以同时使用字符串插值和避免编译：</p>

<pre><code><span class="variable">@str</span>: <span class="string">"hello"</span>;
<span class="variable">@var</span>: ~`<span class="string">"@{str}"</span><span class="mixin">.toUpperCase</span>() + <span class="string">'!'</span>`;
</code></pre>

<p>输出：</p>

<pre><code><span class="variable">@var</span>: HELLO!;
</code></pre>

<p>它也可以访问 JavaScript 环境：</p>

<pre><code><span class="variable">@height</span>: `document<span class="mixin">.body</span><span class="mixin">.clientHeight</span>`;
</code></pre>

<p>如果你想将一个 JavaScript 字符串解析成16进制的颜色值，你可以使用 color 函数：</p>

<pre><code><span class="variable">@color</span>: color(`window<span class="mixin">.colors</span><span class="mixin">.baseColor</span>`);
<span class="variable">@darkcolor</span>: darken(<span class="variable">@color</span>, <span class="number">10%</span>);
</code></pre></div>
    </section>
    <section class="page page-dark">
      <div class="content">
        <h2>About</h2>
        <p><a href="http://cloudhead.io/">Alexis Sellier(LESS作者)</a><span>&nbsp;|&nbsp;</span><a href="http://veryued.org/">飞长(LESS中国官网发起人)</a>
          <!--span &nbsp|&nbsp-->
          <!--a(href='http://ued.taobao.com', target='_blank') TaoBao UED-->
        </p>
        <p>QQ交流群：248796244</p>
        <p>贡献者：<a href="http://veryued.org/">飞长</a><span>&nbsp;|&nbsp;</span><a href="http://www.toobug.net/">TooBug</a><span>&nbsp;|&nbsp;</span><a href="https://github.com/yuyucongcong">郁郁葱葱</a><span>&nbsp;|&nbsp;</span><a href="http://peters-playground.com/">Peter</a><span>&nbsp;|&nbsp;</span><a href="http://weibo.com/iwillwen">小问</a></p>
        <p><a href="https://me.alipay.com/lesscss" target="_blank">赞助</a><span>(感谢赞助：星星、*海经、*德文 )</span><span>&nbsp;|&nbsp;</span><a href="https://github.com/feichang/lesscss.net">参与中文官网建设</a></p>
        <footer></footer>
      </div>
    </section>
    <script src="./src/hiless.js"></script>
    <script type="text/javascript" src="./src/tongji.js"></script><img src="./src/tongji.do" border="0" width="1" height="1">
    <noscript>&lt;a href="http://www.linezing.com"&gt;&lt;img src="http://img.tongji.linezing.com/2707131/tongji.gif"&gt;&lt;/a&gt;</noscript>
    <script src="./src/stats" charset="UTF-8"></script>
  
</body></html>