* 标签定义及使用说明
<video> 标签定义视频，比如电影片段或其他视频流。

目前，<video> 元素支持三种视频格式：MP4、WebM、Ogg。

浏览器			MP4	WebM	Ogg
Internet Explorer 9+	YES	NO	NO
Chrome 6+		YES	YES	YES
Firefox 3.6+		NO	YES	YES
Safari 5+		YES	NO	NO
Opera 10.6+		NO	YES	YES

MP4 = MPEG 4文件使用 H264 视频编解码器和 AAC 音频编解码器
WebM = WebM 文件使用 VP8 视频编解码器和 Vorbis 音频编解码器
Ogg = Ogg 文件使用 Theora 视频编解码器和 Vorbis音频编解码器

视频格式的 MIME 类型
格式	MIME-type
MP4	video/mp4; codecs='avc1.42E01E, mp4a.40.2'
WebM	video/webm; codecs='vp8, vorbis'
Ogg	video/ogg; codecs='theora, vorbis'



* 播放视频
<video src="视频路径" controls>
您的浏览器不支持video标签。
</video>

// 浏览器会自动选择第一个可识别的格式
// 如果不支持video则用flash代替
<video controls="controls" width="100%" height="100%">
	<source src="视频文件名.ogg" type="video/ogg; codecs='theora, vorbis'">
	<source src="视频文件名.mp4" type="video/mp4; codecs='avc1.42E01E, mp4a.40.2'">
	<object data="fl/video.swf" type="application/x-shockwave-flash" width="100%" height="100%">
		<param name="src" value="fl/video.swf">
		<param name="wmode" value="opaque">
		<param name="quality" value="high">
		<param name="allowfullscreen" value="true">
		<!-- url 为相对于 swf 播放器的路径（IE6 下必须为绝对路径） -->
		<param name="flashvars" value="url=../media/test.mp4">	
	</object>
</video>

// 如果需要在网页中实现flash全屏显示，需要在HTML代码中添加以下参数：
如果在<embed>标签中，需要为标签添加全屏属性<embed allowfullscreen="true">
如果在<object>标签中，需要为标签内添加子标签参数<object><param name="allowfullscreen" value="true"></object>

// 设备自适应
<video class="video" poster="../media/poster.jpg" width="618" height="347" controls preload>
	<source src="../media/video.mp4" media="only screen and (min-device-width: 568px)"></source>
	<source src="../media/video.iphone.mp4" media="only screen and (max-device-width: 568px)"></source>
	<source src="../media/video.ogv"></source>
</video>


// video元素的全屏播放
// Safari不支持全屏播放API，即使是iOS8也不例外。但是能通过一个特殊的方法解决这个问题，在<video>元素中增加一段js。
<input type="button" value="Go Full screen"  onclick='document.querySelector("video").webkitEnterFullScreen()'> 



* 播放音频
<audio src="音频路径" controls>
您的浏览器不支持audio标签。
</audio>

// 浏览器会自动选择第一个可识别的格式
<audio controls="controls">
    <source src="音频文件名.ogg" type="audio/ogg">
    <source src="音频文件名.mp3" type="audio/mpeg">
您的浏览器不支持audio标签。
</audio>

// 循环播放音乐
<audio src="音频路径" autoplay loop></audio>



* audio,video元素支持以下方法：

load();//重新加载媒体资源

play();//播放媒体资源

pause();//暂停媒体资源

canPlayType(type);//该函数可检测音视频元素是否支持给定的类型，有3个返回值：
// "probably"  表示浏览器确认支持此媒体类型
// "maybe"  表示浏览器可能支持此媒体类型
// ""  空字符，表示浏览器不支持此媒体类型
type 常用值：
video/ogg
video/mp4
video/webm
audio/mpeg
audio/ogg
audio/mp4
type 常用值，包括编解码器：
video/ogg; codecs="theora, vorbis"
video/mp4; codecs="avc1.4D401E, mp4a.40.2"
video/webm; codecs="vp8.0, vorbis"
audio/ogg; codecs="vorbis"
audio/mp4; codecs="mp4a.40.5"
注释：如果包含编解码器，则只能返回 "probably"。


应用示例：
// 视频控制，同样适用于音频
<video onmouseover="this.play()" onmouseout="this.pause()" autobuffer="true" width="400px" height="300px"></video>



* audio,video元素支持以下属性：

// video 元素的宽和高只能设置number值，默认为像素
// 无论设置 "100px" 或者 "100%" 都是无效的

src;//指定媒体资源的url地址

poster;//指定一张图片的url地址，当src初始化或无效时，用于预览或替换的图片

controls="true";//是否提供控制条
// audio元素没有设置controls时，在ios和android上会占据空间大小，而在PC端chrome是不会占据任何空间

autobuffer="true";//自动缓冲，默认为flase

autoplay="true";//自动播放，默认为flase，如果设置为"true"或"autoplay"，则autobuffer属性将无效
// audio元素的autoplay属性在ios和andriod上无法使用的，在PC端上正常
// ios和andriod设备会阻止任何非触摸事件设置的媒体播放程序

loop="true";//循环播放，默认为flase

currentTime;//用于获取或设置当前播放位置，单位秒

volume;//用于获取或设置当前媒体资源的播放音量，范围为0.0~1.0

muted;//用于获取或设置当前媒体是否开始静音

defaultPlaybackRate;//用于获取或设置当默认放速率，前提是用户没有使用快进或快退

playbackRate;//用于获取或设置媒体播放的当前速率

preload;//用于定义是否预加载，该属性有3个可选值：
// "auto"  默认值，全部预加载
// "metadata"  部分预加载，包括尺寸、第一帧、曲目列表、持续时间等
// "none"  不进行预加载

currentSrc;//只读属性，返回媒体的url地址，如果地址未定，则返回一个空字符串

seeking;//只读属性，返回一个布尔值，判断浏览器是否正在请求某以播放位置的媒体数据

seekable;//只读属性，返回一个TimeRanges对象，表明可以对当前媒体资源进行请求

buffered;//只读属性，返回一个TimeRanges对象，确认浏览器已经缓存的媒体文件时间范围

played;//只读属性，返回一个TimeRanges对象，确认浏览器已播放的时间范围
// TimeRanges对象包含以下属性与方法
var tr = TimeRanges对象
tr.length;//返回TimeRanges对象包含多少个时间段
tr.start(tr[索引]);//返回该时间段的开始时间，单位秒
tr.end(tr[索引]);//返回该时间段的结束时间，单位秒

duration;//只读属性，获取当前媒体的时长，单位秒

initialTime;//只读属性，获取最早的可用于回放的位置，单位秒

paused;//只读属性，返回一个布尔值，判断媒体播放是否暂停

ended;//只读属性，返回一个布尔值，判断媒体播放是否结束

error;//只读属性，返回一个MediaError对象以表明当前的错误状态，如果没有错误则返回null
// MediaError对象包含4各状态：
// 返回值1，媒体数据下载过程因用户操作而终止
// 返回值2，在媒体数据已经就绪时用户停止了媒体下载资源的过程
// 返回值3，在媒体数据已经就绪时解码过程中出现错误
// 返回值4，媒体格式不被支持

networkState;//只读属性，用于返回媒体的网络状态，共有4各值：
// 返回值0，元素尚未初始化
// 返回值1，加载完成，网络空闲
// 返回值2，媒体数据加载中
// 返回值3，因为不存在支持的编码格式，加载失败

readyState;//只读属性，用于返回媒体当前播放位置的就绪状态，共有5各值：
// 返回值0，当前播放位置没有有效的播放资源
// 返回值1，媒体资源确认存在且加载中，但当前位置没有能够加载到有效的媒体数据以进行播放
// 返回值2，以获取到当前播放数据，但没有足够的数据进行播放
// 返回值3，在当前位置以获取到后续播放的媒体数据，可进行播放
// 返回值4，媒体数据可以进行播放，且浏览器确认媒体数据正以某一种速率加载，并有足够的后续数据以继续进行播放，而不会使浏览器的播放进度赶上加载数据的末端



* 媒体事件
abort  当发生中止事件时触发该事件
canplay  当媒介能够开始播放但可能因缓冲而需要停止时触发该事件
canplaythrough  当媒介能够无需因缓冲而停止即可播放至结尾时触发该事件
durationchange  当媒介长度改变时触发该事件
emptied  当媒介资源元素突然为空时（网络错误、加载错误等）触发该事件
ended  当媒介已抵达结尾时触发该事件
error  当在元素加载期间发生错误时触发该事件
loadeddata  当加载媒介数据时触发该事件
loadedmetadata  当媒介元素的持续时间以及其他媒介数据已加载时触发该事件
loadstart  当浏览器开始加载媒介数据时触发该事件
pause  当媒介数据暂停时触发该事件
play  当媒介数据将要开始播放时触发该事件
playing  当媒介数据已开始播放时触发该事件
progress  当浏览器正在取媒介数据时触发该事件
ratechange  当媒介数据的播放速率改变时触发该事件
readystatechange  当就绪状态（ready-state）改变时触发该事件
seeked  当媒介元素的定位属性不再为真且定位已结束时触发该事件
seeking  当媒介元素的定位属性为真且定位已开始时触发该事件
stalled  当取回媒介数据过程中（延迟）存在错误时触发该事件
suspend  当浏览器已在取媒介数据但在取回整个媒介文件之前停止时触发该事件
timeupdate  当媒介改变其播放位置时触发该事件
volumechange  当媒介改变音量亦或当音量被设置为静音时触发该事件
waiting  当媒介已停止播放但打算继续播放时触发该事件





