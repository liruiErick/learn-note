## 创建一个正则表达式
// 直接量语法
var patt = /pattern/attributes;
// 创建对象语法
var patt = new RegExp(pattern, attributes);
// pattern  是一个字符串或其他正则表达式。如果是 RegExp 对象，但没有省略 attributes 参数，则抛出 TypeError 异常。
// attributes  是一个可选的字符，用于指定匹配模式，包含如下值：
//	i  执行对大小写不敏感的匹配。
//	g  执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。
//	m  执行多行匹配。更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。
// 如果 pattern 不是合法的正则表达式，或 attributes 含有 "g"、"i" 和 "m" 之外的字符，则抛出 SyntaxError 异常。


## 创建正则表达式的字符串规则

方括号用于查找某个范围内的字符：

[abc]	查找方括号之间的任何字符。
[^abc]	查找任何不在方括号之间的字符。
[0-9]	查找任何从 0 至 9 的数字。
[a-z]	查找任何从小写 a 到小写 z 的字符。
[A-Z]	查找任何从大写 A 到大写 Z 的字符。
[A-z]	查找任何从大写 A 到小写 z 的字符。
[adgk]	查找给定集合内的任何字符。
[^adgk]	查找给定集合外的任何字符。
(red|blue|green)	从左向右逐个查找 | 分隔的规则，直到匹配到后停止。

元字符（Metacharacter）是拥有特殊含义的字符：

.	查找单个字符。匹配除换行符以外的任意字符。
\w	查找单词字符。匹配字母或数字或下划线。(\w 匹配汉字只是 .net 下支持)
\W	查找非\w的字符。
\d	查找数字。
\D	查找非\d的字符。
\s	查找空白字符。包括空格，制表符(Tab)，换行符，中文全角空格等。
\S	查找非\s的字符。
\b	匹配以该元字符后的字符开头，或以该元字符前的字符结尾的字符串。(只支持字母和数字)
\B	匹配不是以该元字符后的字符开头，或不是以该元字符前的字符结尾的字符串。
\A	匹配以该元字符后的字符开头的字符串。(类似^，但不受处理多行选项的影响)
\z	匹配以该元字符前的字符结尾的字符串。(类似$，但不受处理多行选项的影响)
\Z	字符串结尾或行尾(不受处理多行选项的影响)
\0	查找 NUL 字符。
\n	查找换行符。
\f	查找换页符。
\r	查找回车符。
\t	查找制表符。
\v	查找垂直制表符。
\xxx	查找以八进制数 xxx 规定的字符。
\xdd	查找以十六进制数 dd 规定的字符。
\uxxxx	查找以十六进制数 xxxx 规定的 Unicode 字符。

量词（n为任意字符或元字符）

n+	    匹配任何包含至少一个 n 的字符串。但尽可能多重复
n*	    匹配任何包含零个或多个 n 的字符串。但尽可能多重复
n?	    匹配任何包含零个或一个 n 的字符串。但尽可能多重复
n+?	    匹配任何包含至少一个 n 的字符串。但尽可能少重复
n*?	    匹配任何包含零个或多个 n 的字符串。但尽可能少重复
n??	    匹配任何包含零个或一个 n 的字符串。但尽可能少重复
n{X}        匹配包含 X 个 n 的字符串。但尽可能多重复
n{X,Y}      匹配包含至少 X 个，至多 Y 个 n 的字符串。但尽可能多重复
n{X,}       匹配包含至少 X 个 n 的字符串。但尽可能多重复
n{X,Y}?     匹配包含至少 X 个，至多 Y 个 n 的字符串。但尽可能少重复
n{X,}?      匹配包含至少 X 个 n 的字符串。但尽可能少重复
n$	    匹配任何结尾为 n 的字符串。
^n	    匹配任何开头为 n 的字符串。

exp 指一个正则表达式片段
(exp)         匹配exp，并捕获文本到自动命名的组里
(?<name>exp)  匹配exp，并捕获文本到名称为name的组里，也可以写成(?'name'exp)
(?:exp)       匹配exp，不捕获匹配的文本，也不给此分组分配组号
(?=exp)       匹配结尾是exp的文本，不捕获匹配的文本（javascript 中似乎与 ?: 作用相同）
(?!exp)       匹配结尾不是exp的文本，不捕获匹配的文本（javascript 中表示取反）
(?<=exp)      匹配开头是exp的文本，不捕获匹配的文本（javascript 中似乎不支持 ?<=）
(?<!exp)      匹配开头不是exp的文本，不捕获匹配的文本（javascript 中似乎不支持 ?<!）



## 正则表达式的常用方法与属性

.test(string); //方法检索字符串中的指定值。返回值是 true 或 false。
.exec(string); //方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null。
.compile("新的正则表达式", "匹配模式"); //方法用于改变 RegExp 的匹配规则。
例如：
var regExp = new RegExp("[a-z]+");
// 更改regExp的正则表达式模式
regExp.compile("\\d+");
// 这与下列语句的作用是相同的
regExp = /\d+/;

.global; //RegExp 对象是否具有标志 g。
.ignoreCase; //RegExp 对象是否具有标志 i。
.multiline; //RegExp 对象是否具有标志 m。
.lastIndex; //一个整数，标示开始下一次匹配的字符位置。
.source; //正则表达式的源文本。

.match 与 .exec 的区别
主要区分match具有g和没有g的区别.然后没有g的时候与exec是等价的.
而exec返回的串类型不受g影响但具有g时候会驱动lastIndex可以模拟遍历所有匹配.可以与match具有g的时候等价


## ES6 扩展

ES6对正则表达式添加了u修饰符，含义为“Unicode模式”，用来正确处理大于\uFFFF的Unicode字符。
也就是说，会正确处理四个字节的UTF-16编码。
/^.$/.test('𠮷') // false
/^.$/u.test('𠮷') // true
上面代码表示，如果不添加u修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。

ES6新增了使用大括号表示Unicode字符，这种表示法在正则表达式中必须加上u修饰符，才能识别。
/\u{61}/.test('a') // false
/\u{61}/u.test('a') // true
/\u{20BB7}/u.test('𠮷') // true
上面代码表示，如果不加u修饰符，正则表达式无法识别\u{61}这种表示法，只会认为这匹配61个连续的u。

ES6还为正则表达式添加了y修饰符，叫做“粘连”（sticky）修饰符。
y修饰符的作用与g修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。
不同之处在于，g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。
var s = 'aaa_aa_a';
var r1 = /a+/g;
var r2 = /a+/y;
r1.exec(s) // ["aaa"]
r2.exec(s) // ["aaa"]
r1.exec(s) // ["aa"]
r2.exec(s) // null
这两个正则表达式各执行了两次，第一次执行的时候，两者行为相同，剩余字符串都是_aa_a。
由于g修饰没有位置要求，所以第二次执行会返回结果，而y修饰符要求匹配必须从头部开始，所以返回null。

ES6的正则对象多了sticky属性，表示是否设置了y修饰符。
var r = /hello\d/y;
r.sticky // true

ES6为正则表达式新增了flags属性，会返回正则表达式的修饰符。
/abc/ig.flags
// 'gi'


