# 本地存储

## window.localStorage 对象
## window.sessionStorage 对象
// 在编写时可以不使用 window 这个前缀

// 数据存储跟cookie一样受到跨域的限制，不能跨域，子域也不行。
// 客户端的数据存储，如果数据不是字符串对象，则会储存该数据对象toString()方法返回的字符串。
localStorage.任意属性名 = 要储存的数据; //永久数据储存，没有时间限制的数据存储。
sessionStorage.任意属性名 = 要储存的数据; //临时数据存储，当用户关闭浏览器窗口后，数据会被删除。

// 以上对象还拥有如下属性和方法
.length; //返回对象所保存key的数量
.setItem("key", "value");  //为指定key设置指定的value
.getItem("key"); //获取指定key对应的value
.removeItem("key"); //移除指定key和其对应的value
.clear(); //移除全部key-value对
.key(index); //想数组一样返回指定索引对应的value


## WebStorage事件 

storage 存储空间中WebStorage区域的数据发生变化时触发该事件（本地环境无法触发该事件）
// event 对象有几个相应的属性：
.key; //localStorage中被影响的键
.newValue; //为这个键所赋的新值
.oldValue; //这个键修改前的值
.url; //当前发生改变事件页面的 URL
.storageArea; //储存数据的存储对象，即 localStorage 或者 sessionStorage 的引用
注意，url 属性早期的规范中为uri属性。有些浏览器发布较早，没有包含这一变更。为兼容性考虑，使用url属性前，你应该先检查它是否存在，如果没有url属性，则应该使用uri属性
如果调用clear()方法，那么key、oldValue和newValue都会被设置为null。


## 通过localStorage实现浏览器的跨标签页通信（sessionStorage貌似只作用于自身窗口，因此是不可以的）

具体地说，不论其中的哪一项在另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件。
实际上，这就意味着不论在哪个浏览器的标签页里访问了 localStorage，所有其它的标签页都能通过 window 对象监听到这个事件，
就像这样：
```js
window.addEventListener('storage', function (event) {
	console.log(event.key, event.newValue);
});
```

PS.在firefox和chrome中存储和读取都是正常的，但是对storage事件的触发似乎有点问题，自身页面进行setItem后没有触发window的storage事件？
但是同时访问A.html和B.html时，在A页面中进行 setItem能触发B页面中window的storage事件，同样的在B页面中进行setItem能触发A页面中window的storage事件。
在IE9中，页面自身的设值能触发当前页面的storage事件，同样当前页面的设值能触发同一”起源”下其他页面window的storage事件，这看起来似乎更让人想的通些.

解决方法是：在能引起storage变更时间的操作接口中，手动触发StorageEvent事件即可。
var se = document.createEvent("StorageEvent");
se.initStorageEvent('storage', false, false, key, oldval, newval, localStorage);
window.dispatchEvent(se);

关于initStorageEvent的定义
```js
void initStorageEvent(
  in DOMString typeArg,
  in boolean canBubbleArg,
  in boolean cancelableArg,
  in DOMString keyArg,
  in DOMString oldValueArg,
  in DOMString newValueArg,
  in DOMString urlArg,
  in nsIDOMStorage storageAreaArg
);
```


## 异常
localStorage在iOS Safari、chrome和UC浏览器中的隐私模式（也叫无痕模式）下无法使用，手机Safari浏览器中具体表现是：

localStorage对象仍然存在
但是setItem会报异常：QuotaExceededError
getItem和removeItem直接忽略

判断浏览器是否支持localStorage的方法:
```js
function isLocalStorageSupported() {
	var testKey = 'test',
		storage = window.sessionStorage;
	try {
		storage.setItem(testKey, 'testValue');
		storage.removeItem(testKey);
		return true;
	} catch (error) {
		return false;
	}
}
```
