## 创建数组
var arr = new Array(element0, element1, ..., elementn);
var arr = [element0, element1, ..., elementn];

arr.length; // 返回数组长度。注意，数组的长度取决于最大索引的数值减一，而非其包含的对象数量。

注意，Boolean([]) == true，[] == false
这里因为==符号会把两边的类型转换成一样的。这里会转成number
false转为number等于0
array的valueOf/toString获取基本类型，等于""，空字符串转成数字之后是0


## 静态方法
Array.isArray(obj); //判断对象是否为数组（IE8及以下浏览器不支持）


## 数组方法

arr.push(object); //将一个或多个指定对象加入数组放入尾部。
arr.unshift(object); //将一个或多个指定对象加入数组放入头部。
arr.pop(); //将数组尾部对象移出，改变原数组，并返回被移出对象。
arr.shift(); //将数组头部对象移出，改变原数组，并返回被移出对象。

arr.splice(index, count, object, ...); //在数组中index位置，去除count个对象，如果有第3个或更多参数，则将这些参数对象插入该位置，返回包含被移出对象的新数组，改变原数组。index可为负数，能够从倒数开始插入。
arr.slice(index, endIndex); //返回从index开始（包括第index）到endIndex结束（不包括endIndex）的元素数组，不改变原数组，参数可为负数，能够从倒数开始截取。

arr.reverse(); //颠倒数组中元素的顺序。
arr.sort(); //对数组的元素进行排序，默认按 toString() 后的字母顺序进行排序。
arr.sort(比较函数); //函数有两个参数A和B，让A在B前返回负数，让A在B后返回正数，A=B返回0。
arr.sort(function(a,b){ return a - b; }); //对数字由小到大排序。

arr.concat(arr2); //返回一个新数组，该数组为 arr 与 arr2 的合并。如果不传参则相当于克隆数组。
arr.join(); //返回一个字符串，多用于字符数组，将数组中每个元素以逗号隔开，并返回改字符串。如果传入"a"，则在数组的每个对象之间插入字符a，如果传入""，则相当于将每个元素相连。


## ES5中新增数组方法（IE8及以下浏览器不支持），如下：

(js v1.6)
.forEach(function(value, index, array),[ thisObject]); // 遍历数组
// 除了接受一个必须的回调函数参数，还可以接受一个可选的上下文参数（改变回调函数里面的this指向）
.map(function(value, index, array),[ thisObject]); // 遍历数组，生成返回值所组成的新数组
.filter(function(value, index, array),[ thisObject]); // 遍历数组，生成返回值为true的项所组成的新数组
.some(function(value, index, array),[ thisObject]); // 遍历数组，当遇到第一个返回值为true的项时停止遍历，并返回true
.every(function(value, index, array),[ thisObject]); // 遍历数组，当遇到第一个返回值为false的项时停止遍历，并返回false
.indexOf(value, startIndex); //从前往后，返回第一个匹配该值的索引，未找到则返回-1。startIndex可选，表示从这个位置开始搜索，若缺省或格式不合要求，使用默认值 0
.lastIndexOf(value, lastIndex); //从后往前，返回第一个匹配该值的索引，未找到则返回-1。lastIndex可选，表示从这个位置开始搜索，若缺省或格式不合要求，使用默认值 array.length - 1

(js v1.8)
.reduce(function (previous, current, index, array[, initialValue]); // 迭代遍历
// callback函数接受4个参数：之前值、当前值、索引值以及数组本身。
// initialValue参数可选，表示初始值。若指定，则当作最初使用的previous值；如果缺省，则使用数组的第一个元素作为previous初始值，同时current往后排一位，相比有initialValue值少一次迭代。
// 之后每一次迭代就将前一次的返回值作为 previous，直到 current 为最后一个值时退出
.reduceRight(callback[, initialValue]); // 与 .reduce() 类似，只是从数组末尾开始反方向迭代遍历


## ES6 扩展

Array.from(obj, func, context); // 将具有数据特性的对象转换为数组。如具有 length 属性。
// 还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。
// 如果 map 函数里面用到了this关键字，还可以传入第三个参数，用来绑定this。
// 与扩展运算符 [...obj] 效果相当，但是扩展运算符只能转换具有 Symbol.iterator 的对象。
Array.from() 的另一个应用是，将字符串转为数组，然后返回字符串的长度。
因为它能正确处理各种Unicode字符，可以避免JavaScript将大于\uFFFF的Unicode字符，算作两个字符的bug。
function countSymbols(string) {
	return Array.from(string).length;
}

Array.of(); // 用于将一组值，转换为数组。
Array.of(3, 11, 8) // [3,11,8]

.copyWithin(); // 在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。会修改当前数组。
// 它接受三个参数。
// target（必需）：从该位置开始替换数据。
// start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。
// end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。
[1, 2, 3, 4, 5].copyWithin(0, 3) //=> [4, 5, 3, 4, 5]
上面代码表示将从3号位直到数组结束的成员（4和5），复制到从0号位开始的位置，结果覆盖了原来的1和2。

.find(); // 用于找出第一个符合条件的数组成员。
// 它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。
.find(function(value, index, arr) {
  return value > 9;
});

.findIndex(); // 用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。
// .find() 与 .findIndex() 这两个方法都可以接受第二个参数，用来绑定回调函数的this对象。
// 另外，这两个方法都可以发现NaN，弥补了数组的IndexOf方法的不足。
[NaN].indexOf(NaN) // -1
[NaN].findIndex(y => Object.is(NaN, y)) // 0

.fill(); // 使用给定值，填充一个数组。
['a', 'b', 'c'].fill(7) // [7, 7, 7]
// 还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。
['a', 'b', 'c'].fill(7, 1, 2) // ['a', 7, 'c']

.entries(); // 返回对键值对的遍历器对象
.keys(); // 返回对键的遍历器对象
.values(); // 返回对值的遍历器对象
// 它们都返回一个遍历器对象，可以用 for...of 循环进行遍历

.includes(); // 返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。同时它不会存在无法找到 NaN 的问题。
// 该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。



## 遍历数组

!注意，在遍历不连续数组时推荐用 for in 进行遍历，例如：
var arr = [];
arr[1000] = 1;
for (var i in arr) { // for in 中的 i 为字符串
	console.log(arr[i]); // 这里只会输出一次
}

var l = arr.length;
while (l--) {
	// l 为索引
	break; //打破for循环
	continue; //结束这次循环,进行下次循环
}

// 让数组内每个对象执行一次指定函数（IE8 及以下浏览器不支持）
arr.forEach(function, obj);
// function  包含3个参数 item（当前对象）、index（当前对象索引）、arr（数组本身）。
// obj  可选参数，指定函数中 this 指向为 obj。

// 让IE8及以下浏览器兼容forEach方法
if (!Array.prototype.forEach) {  
	Array.prototype.forEach = function(fun, context){
		if(typeof fun !== "function") {
			throw "输入正确函数!";
			return;
		}
		var len=this.length;
		for(var i=0; i<len; i++){
			fun.call(context, this[i], i, this);
		}
	}; 
}



## 跳出多重循环

outerloop://命名外圈语句
for(i=0; i<10; i++)
{
    innerloop://命名内圈语句
    
    for(j=0; j<10; j++)
    {
        // 跳出内圈循环
        if(j>3){break;}
        
        // 跳出内圈循环
        if(i==2){break innerloop;}
        
        // 跳出外圈循环
        if(i==4){break outerloop;}
        
        // 跳过本次外圈循环继续
        if(i==4){continue outerloop;}
        
    	console.log("j: "+ j)
    }
    
	console.log("i: "+ i)
}


## JS中判断一个对象是否为数组
function isArray(obj) {
	return Object.prototype.toString.call(obj) === "[object Array]";
}
// 借鉴 jQuery 的写法（但是在IE下，obj如果为简单数据类型，toString.call(obj) 就会报错）
function isArray(obj) {
	return toString.call(obj) === "[object Array]";
}