// 创建字符串对象
var str = new String("字符串");
// 创建字符串常量
var str = "字符串";
// 返回字符串长度
str.length;
// 返回执行索引位置的字符
str[0];

## 以下方法将字符串转换为HTML格式的字符串（全浏览器支持）
str.anchor("锚点名称"); //创建 HTML 锚点。相当于<a name="锚点名称">元素。
str.link("url"); //将字符串显示为链接。相当于<a href="url">元素。
str.blink(); //显示闪动字符串。相当于<blink>元素。
str.bold(); //使用粗体显示字符串。相当于<b>元素。
str.fixed(); //以打字机文本显示字符串。相当于<tt>元素。
str.fontcolor("red"); //使用指定的颜色来显示字符串。相当于<font color="red">元素。
str.fontsize(4); //使用指定的尺寸来显示字符串，必须为1~7的数字。相当于<font size="4">元素。
str.italics(); //使用斜体显示字符串。相当于<i>元素。
str.big(); //用大号字体显示字符串。相当于<big>元素。
str.small(); //使用小字号来显示字符串。相当于<small>元素。
str.strike(); //使用删除线来显示字符串。相当于<strike>元素。
str.sub(); //把字符串显示为下标。相当于<sub>元素。
str.sup(); //把字符串显示为上标。相当于<sup>元素。


## String 的实例方法

str.substr(0,5); //从第1个字符开始，截取5个字符。（第二个参数不传，则表示截取到末尾）
str.substring(0,5); //截取从第1个字符开始（包括第1个）到第6个字符结束（不包括第6个）。（第二个参数不传，则表示截取到末尾）
str.slice(-1,str.length); //与 substring 作用相同，区别在于支持负数索引，表示从倒数第几个开始，并截取至倒数第几个。

str.indexOf(searchvalue,fromindex); //返回指定的子字符串在字符串中首次出现的位置索引，未找到则返回-1。
str.lastIndexOf(searchvalue,fromindex); //返回指定的子字符串在字符串中最后出现的位置索引，未找到则返回-1。
str.charAt(index); //返回在指定位置的字符。
str.match(searchvalue/regexp); //检查字符串是否包含指定字符串，或者是否匹配该正则表达式，并返回一个包含所有匹配值的数组或者 null。
str.search(searchvalue/regexp); //返回指定的子字符串值或者匹配该正则表达式的子字符串在字符串中首次出现的位置索引，未找到则返回-1。
 
// 替换指定的子字符串，或者与正则表达式匹配的子字符串。不会改变原字符串，而是返回一个替换后的新字符串
str.replace(regexp/substr,replacement);
// 如果需要全文替换，需要借助正则表达式，设置匹配模式为g，表示全局匹配

例1：
name.replace(/([A-Z])/g, "-$1");
其中：
$1,$2...是表示的小括号里的内容 
$1是第一个小括号里的 ,$2是第2个小括号里的 

$1、$2、...、$99  与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。
$&                与 regexp 相匹配的子串。
$`                位于匹配子串左侧的文本。
$'                位于匹配子串右侧的文本。
$$                直接量符号。

比如：
/gai([\w]+?)over([\d]+)/
匹配 gainover123 
$1= 括号里的 n 
$2= 第2个括号里的 123

例2：
可以利用函数遍历匹配到的内容，return 替换的内容
name.replace(/([a-zA-Z0-9]+)\((.*?)\)/g, function(x, $1, $2, ..., index, str) {
	x     // 正则表达式匹配到的全部内容
	$1    // 匹配到第一个括号内的内容
	$2    // 匹配到第二个括号内的内容
	index // 第一个匹配到的位置索引
	str   // 原字符串
	return "my";
});

str.toLowerCase(); //把字符串转换为小写。
str.toUpperCase(); //把字符串转换为大写。
str.toLocaleLowerCase(); //把字符串转换为小写。
str.toLocaleUpperCase(); //把字符串转换为大写。
// 与 toUpperCase() 不同的是，toLocaleUpperCase() 方法按照本地方式把字符串转换为大写。
// 只有几种语言（如土耳其语）具有地方特有的大小写映射，所有该方法的返回值通常与 toUpperCase() 一样。

str.charCodeAt(index); //返回在指定的位置的字符的 Unicode 编码。
String.fromCharCode(numX,numX,...,numX); //静态方法，将字符编码转化为字符串，必需一个或多个 Unicode 值。
str.concat(字符串); //连接字符串，并返回新的字符串。
str.split(字符串/正则,正整数); //返回一个数组，将字符串按该字符分割后传入数组（不包含该字符），第二参数可选，用来限定数组的长度。

// 用本地特定的顺序来比较两个字符串（一般按照首字母的顺数进行比较）
// 如果字符串1位于字符串2之前，则返回小于0的数。如果字符串1位于字符串2之后，则返回大于0的数。如果两个字符串相等，则返回0。
字符串1.localeCompare(字符串2);

// 对字符串数组进行排序
字符串数组.sort(function(a,b){return a.localeCompare(b);});


## ES6 扩展

### codePointAt()

JavaScript内部，字符以UTF-16的格式储存，每个字符固定为2个字节。
对于那些需要4个字节储存的字符（Unicode码点大于0xFFFF的字符），JavaScript会认为它们是两个字符。
var s = "𠮷";
s.length // 2
s.charAt(0) // ''
s.charAt(1) // ''
s.charCodeAt(0) // 55362
s.charCodeAt(1) // 57271

ES6提供了 codePointAt 方法，能够正确处理4个字节储存的字符，返回一个字符的码点。
var s = '𠮷a';
s.codePointAt(0) // 134071
s.codePointAt(1) // 57271
s.charCodeAt(2) // 97

### String.fromCodePoint()

ES5提供String.fromCharCode方法，用于从码点返回对应字符，但是这个方法不能识别32位的UTF-16字符（Unicode编号大于0xFFFF）。
ES6提供了String.fromCodePoint方法，可以识别0xFFFF的字符，弥补了String.fromCharCode方法的不足。在作用上，正好与codePointAt方法相反。

### at()

ES5对字符串对象提供charAt方法，返回字符串给定位置的字符。该方法不能识别码点大于0xFFFF的字符。
'abc'.charAt(0) // "a"
'𠮷'.charAt(0) // "\uD842"

目前，有一个提案，提出字符串实例的at方法，可以识别Unicode编号大于0xFFFF的字符，返回正确的字符。
'abc'.at(0) // "a"
'𠮷'.at(0) // "𠮷"

### includes(), startsWith(), endsWith()

传统上，JavaScript只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6又提供了三种新方法。
includes()：返回布尔值，表示是否找到了参数字符串。
startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。
endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。

### repeat()

repeat方法返回一个新字符串，表示将原字符串重复n次。
'x'.repeat(3) // "xxx"

参数如果是小数，会被取整。
参数如果是负数或者Infinity，会报错。

### padStart()，padEnd()

ES7推出了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。
padStart用于头部补全，padEnd用于尾部补全。
'x'.padStart(5, 'ab') // 'ababx'
'x'.padStart(4, 'ab') // 'abax'
'x'.padEnd(5, 'ab') // 'xabab'
'x'.padEnd(4, 'ab') // 'xaba'
'1'.padStart(3, '0') // "001"

### trim()，trimLeft，trimRight

移除字符串两侧的空格
' 呵呵 '.trim() //=> ' 呵呵 '
' 呵呵 '.trimLeft() //=> '呵呵 '
' 呵呵 '.trimRight() //=> ' 呵呵'

### String.raw()

该方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。
String.raw`Hi\n${2+3}!`; // "Hi\\n5!"
// 等同于
String.raw(['Hi\n', '!', ''], 5);
// 这里第一个参数为数组，该数组有一个raw属性，保存的是转义后的原字符串。
['Hi\n', '!', ''].raw === ['Hi\\n', '!', '']






















