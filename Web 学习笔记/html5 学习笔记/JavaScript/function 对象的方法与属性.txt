## ES6 扩展

### length属性

函数的length属性，将返回没有指定默认值的参数个数。也就是返回必填参数的个数。
(function (a) {}).length // 1
(function (a = 5) {}).length // 0
(function (a, b, c = 5) {}).length // 2

### rest参数

rest参数（形式为“...变量名”），用于获取函数的多余参数，这样就不需要使用arguments对象了。
rest参数搭配的变量是一个数组，该变量将多余的参数放入数组中。
function add(...values) {}
注意，rest参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。
函数的length属性，不包括rest参数。

### 扩展运算符

扩展运算符（spread）是三个点（...）。它好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列。
console.log(...[1, 2, 3]) //=> 1 2 3
var args = [4, 38];
add(...args) === add(4, 38)
任何Iterator接口的对象，都可以用扩展运算符。

### name 属性

返回该函数的函数名
const bar = function foo() {};
bar.name // "foo"

Function构造函数返回的函数实例，name属性的值为“anonymous”。
(new Function).name // "anonymous"

bind()返回的函数，name属性值会加上“bound ”前缀。
function foo() {};
foo.bind({}).name // "bound foo"
(function(){}).bind({}).name // "bound "

如果使用了取值函数，则会在方法名前加上get。如果是存值函数，方法名的前面会加上set。
var person = {
	sayName() {},
	get firstName() { return "Nicholas"; }
};
person.sayName.name   // "sayName"
person.firstName.name // "get firstName"

如果对象的方法是一个Symbol值，那么name属性返回的是这个Symbol值的描述。
const key1 = Symbol('description');
const key2 = Symbol();
let obj = {
	[key1]() {},
	[key2]() {},
};
obj[key1].name // "[description]"
obj[key2].name // ""

### 箭头函数

ES6允许使用“箭头”（=>）定义函数。
var sum = (num1, num2) => num1 + num2;
// 等同于
var sum = function(num1, num2) {
	return num1 + num2;
};

箭头函数有几个使用注意点。
（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。
（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。
（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。
（4）不可以使用yield命令，因此箭头函数不能用作Generator函数。
上面四点中，第一点尤其值得注意。this对象的指向是可变的，但是在箭头函数中，它是固定的。
其实根本原因是，箭头函数体内根本没有this对象，这也是为什么它不可以被当做构造函数。

除了this，以下三个变量在箭头函数之中也是不存在的：
指向外层函数的对应变量：arguments、super、new.target。

### “函数绑定”运算符

ES7提出了“函数绑定”（function bind）运算符，用来取代call、apply、bind调用。虽然该语法还是ES7的一个提案，但是Babel转码器已经支持。
函数绑定运算符是并排的两个双冒号（::），双冒号左边是一个对象，右边是一个函数。
该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。
foo::bar;
// 等同于
bar.bind(foo);

::bar;
// 等同于
bar.bind(bar);

foo::bar(...arguments);
// 等同于
bar.apply(foo, arguments);


### 函数的“尾调用”优化

函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。
如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。
如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。
所有的调用帧，就形成一个“调用栈”（call stack）。

尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。
如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。

尾调用的意义更多在于递归中，递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。
如果使用尾调用的递归，也叫尾递归，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。

最后，ES6的尾调用优化只在严格模式下开启，正常模式是无效的。




## js 的 call apply bind 方法以及 callee calle 属性

-------------------------------------------------------------------------------------------

call 方法
调用一个对象的一个方法，以另一个对象替换当前对象。

call([thisObj[,arg1[, arg2[, [,.argN]]]]])
参数：
thisObj  可选参数。将被用作当前函数的 this。
         如果没有提供 thisObj 参数，或者传入 null/undefined，则不改变函数的原有 this。
         注意，在IE中如果传入 null/undefined，thisObj 会被改变成 null/undefined，依赖 this 的函数就会报错。
         但是打开IE的控制台就没有这个问题。
arg1、arg2、argN  可选参数。被传递给函数的参数序列。

使用方法：
obj1.method1.call(obj2,arg1,arg2);
如上，call的作用就是把obj1的方法放到obj2上使用，后面的argument1..这些做为参数传入．

举一个具体的例子：
function add(a,b)
{
	alert(a+b);
}
function sub(a,b)
{
	alert(a-b);
}

add.call(sub,3,1); 

这个例子中 add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4)。没有感觉出有什么作用？

再看另一个的例子：
function Class1()
{
	this.name = "class1";

	this.showNam = function()
	{
		alert(this.name);
	}
}

function Class2()
{
	this.name = "class2";
}

var c1 = new Class1();
var c2 = new Class2();

c1.showNam.call(c2); //输出 "class2"

执行的结果就是 alert("class2")。很显然 c1.showNam 方法在执行时 this 指向的是 c2。作用一目了然了！

-------------------------------------------------------------------------------------------

在这里顺便提一下 bind 方法（IE8 及以下浏览器不支持）

源代码为：
Function.prototype.bind = function(obj) { 
	var method = this;
	temp = function() { 
		return method.apply(obj, arguments); 
	};
	return temp; 
}

使用方法：
var method2 = obj1.method1.bind(obj2);
bind 方法可以返回一个使用指定对象作为调用 bind 方法的函数对象的 this 的新方法。

继续用上面的 Class1 和 Class2 举例：
var showNam2 = c1.showNam.bind(c2);
showNam2(); //输出 "class2"

该方法多用于再给某些函数传参时，参数中需要指定一个回调函数，而此时需要改变回调函数中 this 的指向。
例如使用 jQuery 时：
setTimeout(function() {
	alert(this.name);
}.bind(c1), 3000);

执行的结果就是 alert("class1")。

有一点需要特别注意：
如果在注册事件时使用 bind 方法，那么实际的事件监听函数为 bind 方法的返回值（函数），再用相同的方式是无法移除该事件的。
因此必须保存 bind 方法的返回值（函数）引用，并使用该（函数）引用来作为事件的监听器函数。

-------------------------------------------------------------------------------------------

怎么样，觉得有意思了吧，可以让a对象来执行b对象的方法，这是java程序员所不敢想的。还有更有趣的，可以用 call 来实现继承

function Class1()
{
	this.showTxt = function(txt)
	{
		alert(txt);
	}
}

function Class2()
{
	Class1.call(this);
}

var c2 = new Class2();

c2.showTxt("cc");

这样 Class2 就继承Class1了，c2 对象就能够直接调用Class1 的方法以及属性了，执行结果就是：alert("cc")。

这就是 javaScript 如何来模拟面向对象中的继承的，还可以实现多重继承。

function Class10()
{
	this.showSub = function(a,b)
	{
		alert(a-b);
	}
}

function Class11()
{
	this.showAdd = function(a,b)
	{
		alert(a+b);
	}
}

function Class2()
{
	Class10.call(this);
	Class11.call(this);
}

很简单，使用两个 call 就实现多重继承了
当然，js的继承还有其他方法，例如使用原型链，这个不属于本文的范畴，只是在此说明call 的用法

-------------------------------------------------------------------------------------------

apply 方法

说了call ，当然还有 apply，这两个方法基本上是一个意思
区别在于两者传参的方式不同
call 传参是从第二个参数开始向后可以添加无数个参数，每个可以是任意类型。
apply 传参是为第二个参数传入一个数组，数组包含所有的参数，相当于是arguments。

-------------------------------------------------------------------------------------------

caller 属性

Function.caller  返回函数对象执行时所在的作用域对象。

说明：
caller 属性只有在函数执行时才有定义。
如果函数是在顶层方法中调用的，例如：在window中，那么 caller 就是 null。
如果函数是在某个函数对象中调用，那么 caller 就是该函数对象。

下面的例子说明了 caller 属性的用法：

function callerDemo() {
	if (callerDemo.caller) {
		var a = callerDemo.caller.toString();
		alert(a);
	} else {
		alert("this is a top function");
	}
}
function handleCaller() {
	callerDemo();
}
handleCaller(); //输出 handleCaller 对象

注意，caller 与 this 的区别在于，一般情况下this指向的是函数的调用者。
如上面的例子
无论 callerDemo() 是在全局作用域中执行还是在 handleCaller() 中被执行，this 始终指向的 window 对象

-------------------------------------------------------------------------------------------

callee 属性
  
[function.]arguments.callee  返回正被执行的 Function 对象，也就是所指定的 Function 对象的正文。
function 可选参数，是当前正在执行的 Function 对象的名称。

说明：
callee 属性是 arguments 对象的一个属性，它表示对函数对象本身的引用

这里说明一下 arguments 对象：arguments 对象为该函数中传递进的实参所组成的数组。
arguments.callee 返回函数自身
arguments.length 返回函数的实参长度
arguments.callee.length 返回函数的形参长度
arguments.callee.caller 返回 arguments.callee 函数对象执行时所在的作用域对象
arguments.callee.name 返回函数的函数名。但如果是匿名函数，则返回一个空字符串

示例：

//用于验证参数
function calleeLengthDemo(arg1, arg2) {
    if (arguments.length==arguments.callee.length) {
         window.alert("验证形参和实参长度正确！");
        return;
     } else {
         alert("实参长度：" +arguments.length);
         alert("形参长度：" +arguments.callee.length);
     }
}

//匿名函数的递归计算
var sum = function(n){
	if (n <= 0) return 1;
	else return n + arguments.callee(n - 1);
}