// 创建当前日期的 date 对象
var today = new Date();

// 昨天的同一时刻，8.64e7 等于 24 * 3600 * 1000
Date.now() - 8.64e7;

// 传入一个表示日期和时间的字符串，创建一个指定日期的 date 对象
// datestring 为一个日期格式的字符串，例如：2014/04/01、2014/4/1 等
var myDate = new Date(datestring);
// 参数中时间字符串的格式有很多，例如：
// 在火狐下，如果格式是日期加上时间，那么"2014-04-01 09:16:40"这种日期格式是无法被火狐解析的。必须使用"2014/04/01 09:16:40"或者"2014 04 01 09:16:40"这两种格式
new Date("2014-04-01 09:16:40"); 
new Date("2014/04/01");
new Date("2014 04 01");
new Date("2014 4 1");
new Date("4 1 2014");
new Date("4 1, 2014");

// 两个日期可直接进行比较
var d1 = new Date();
d1.setFullYear(2014,2,14);
var d2 = new Date();
if (d1>d2) d1在d2之后;
else if (d1<d2) d1在d2之前;
else d1等于d2


* Date 的类方法
Date(); //返回当前日期的字符串形式
Date.now(); //返回 1970 年 1 月 1 日至 Date 对象创建的毫秒数。（貌似IE8及以下浏览器不支持，但效率最高）
+ new Date(); //同样返回 1970 年 1 月 1 日至 Date 对象创建的毫秒数。（貌似不存在兼容问题，也是jQuery采用的方法，但效率比上面方法慢3倍）

Date.parse(datestring); //必需参数，传入一个表示日期和时间的字符串，返回1970年1月1日午夜到指定日期（字符串）的毫秒数。
// 参数中时间字符串的格式有很多，例如：
// 在火狐下，如果格式是日期加上时间，那么"2014-04-01 09:16:40"这种日期格式是无法被火狐解析的。必须使用"2014/04/01 09:16:40"或者"2014 04 01 09:16:40"这两种格式
Date.parse("2014-04-01 09:16:40");
Date.parse("2014/04/01");
Date.parse("2014 04 01");
Date.parse("2014 4 1");
Date.parse("4 1 2014");
Date.parse("4 1, 2014");

Date.UTC(); //根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。


* Date 的实例方法

getDate(); //返回 Date 对象的所在月中的几号 (1 ~ 31)。
getDay(); //返回 Date 对象的所在周中星期几 (0 ~ 6)，0为星期天。
getMonth(); //返回 Date 对象的所在年中的月份索引 (0 ~ 11)。
getFullYear(); //返回 Date 对象的四位数字的年份。
getYear(); //请使用 getFullYear() 方法代替（2014年返回114？）。
getHours(); //返回 Date 对象所在天中的小时 (0 ~ 23)。
getMinutes(); //返回 Date 对象所在小时中的分钟 (0 ~ 59)。
getSeconds(); //返回 Date 对象所在分钟中的秒数 (0 ~ 59)。
getMilliseconds(); //返回 Date 对象所在秒钟中的毫秒(0 ~ 999)。

getUTCDate(); //根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。
getUTCDay(); //根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。
getUTCMonth(); //根据世界时从 Date 对象返回月份 (0 ~ 11)。
getUTCFullYear(); //根据世界时从 Date 对象返回四位数的年份。
getUTCHours(); //根据世界时返回 Date 对象的小时 (0 ~ 23)。
getUTCMinutes(); //根据世界时返回 Date 对象的分钟 (0 ~ 59)。
getUTCSeconds(); //根据世界时返回 Date 对象的秒钟 (0 ~ 59)。
getUTCMilliseconds(); //根据世界时返回 Date 对象的毫秒(0 ~ 999)。

getTime(); //返回 1970 年 1 月 1 日至 Date 对象创建的毫秒数。
getTimezoneOffset(); //返回本地时间与格林威治标准时间 (GMT) 的分钟差。

setDate(1~31); //设置 Date 对象中月的某一天 (1 ~ 31)。
setMonth(0~11); //设置 Date 对象中月份 (0 ~ 11)。
setFullYear(2014); //设置 Date 对象中的年份（四位数字）。
setYear(2014); //请使用 setFullYear() 方法代替。
setHours(0~23); //设置 Date 对象中的小时 (0 ~ 23)。	
setMinutes(0~59); //设置 Date 对象中的分钟 (0 ~ 59)。
setSeconds(0~59); //设置 Date 对象中的秒钟 (0 ~ 59)。
setMilliseconds(0~999); //设置 Date 对象中的毫秒 (0 ~ 999)。

setUTCDate(); //根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。
setUTCMonth(); //根据世界时设置 Date 对象中的月份 (0 ~ 11)。
setUTCFullYear(); //根据世界时设置 Date 对象中的年份（四位数字）。
setUTCHours(); //根据世界时设置 Date 对象中的小时 (0 ~ 23)。
setUTCMinutes(); //根据世界时设置 Date 对象中的分钟 (0 ~ 59)。
setUTCSeconds(); //根据世界时设置 Date 对象中的秒钟 (0 ~ 59)。
setUTCMilliseconds(); //根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。

setTime(); //以 1970 年 1 月 1 日开始的毫秒设置 Date 对象。

toTimeString(); //把 Date 对象的时间部分转换为字符串。
toDateString(); //把 Date 对象的日期部分转换为字符串。
toGMTString(); //请使用 toUTCString() 方法代替。
toUTCString(); //根据世界时，把 Date 对象转换为字符串。
toLocaleString(); //根据本地时间格式，把 Date 对象转换为字符串。
toLocaleTimeString(); //根据本地时间格式，把 Date 对象的时间部分转换为字符串。
toLocaleDateString(); //根据本地时间格式，把 Date 对象的日期部分转换为字符串。



