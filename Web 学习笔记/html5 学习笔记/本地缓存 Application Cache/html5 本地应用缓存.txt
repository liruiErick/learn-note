* 应用缓存

所有主流浏览器均支持应用程序缓存，除了 Internet Explorer。

如需启用应用程序缓存

首先创建 manifest 文件
manifest 文件是简单的文本文件，文件扩展名为.manifest，它告知浏览器被缓存的内容（以及不缓存的内容）。

然后在文档的 <html> 标签中声明 manifest 属性：
<html manifest="demo.manifest">
注意，声明了 manifest 属性的页面自身也会被缓存，如果是动态页面则无法更新。
并且，只要该页面被缓存过，即使移除 <html> 标签中的 manifest 属性，页面依然无法主动更新。
只有在 manifest 文件修改后才会更新一次，因此如果需要回复页面自动更新，就必须删除 manifest 文件。


manifest 文件可分为三个部分：
CACHE - 在此标题下列出的文件将在首次下载后进行缓存。
NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存。
FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）。

第一行，CACHE MANIFEST，是必需的：
CACHE MANIFEST
# VERSION /* 这里是注释，可以指定版本号 */

CACHE:（必须）
/theme.css
/logo.gif
/main.js
当 manifest 文件加载后，浏览器会从网站的根目录下载这三个文件。

下面的 NETWORK 规定文件 "login.asp" 永远不会被缓存，且离线时是不可用的：
NETWORK:（必须）
login.asp
但一般需要使用星号来指示所有其他资源/文件都需要因特网连接，否则第二次加载页面时，所有文件都会默认读取缓存，导致其他未被缓存的文件都无法获取：
NETWORK:
*

下面的 FALLBACK 小节规定如果无法建立因特网连接，则用 "offline.html" 替代 /html5/ 目录中的所有文件：
FALLBACK:（可选）
/html5/ /404.html


* 更新缓存

一旦应用被缓存，它就会保持缓存直到发生下列情况：
1. 用户清空浏览器缓存
2. manifest 文件被修改（参阅下面的提示）
3. 由程序来更新应用缓存

CACHE MANIFEST
# 2012-02-21 v1.0.0

CACHE:
/theme.css
/logo.gif
/main.js

NETWORK:
*

FALLBACK:
/html5/ /404.html

以 "#" 开头的是注释行，但也可满足其他用途。
应用的缓存会在其 manifest 文件更改时被更新。
如果您编辑了一幅图片，或者修改了一个 JavaScript 函数，这些改变都不会被重新缓存。
更新注释行中的日期和版本号是一种使浏览器重新缓存文件的办法。

注释：浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。

关于更新
    1.自动更新：浏览器除了在第一次访问 Web 应用时缓存资源外，只会在 cache manifest 文件本身发生变化（即使是注释变化）时更新缓存。而 cache manifest 中的资源文件发生变化并不会触发更新。
    2.手动更新：开发者也可以使用 window.applicationCache 的接口更新缓存。方法是检测 window.applicationCache.status 的值，如果是 UPDATEREADY，那么可以调用 window.applicationCache.update() 更新缓存。示范代码如下。

if (window.applicationCache.status == window.applicationCache.UPDATEREADY){
        window.applicationCache.update();   
}

浏览器的更新策略：
浏览器检测到 manifest 文件有变化时，会更新缓存，但更新策略是先读取缓存显示出来，然后再更新。
新页面使用 manifest 文件，初次访问时，不会造成缓存数据更新，並且加载的是事实的线上资源。再次访问时将使用缓存数据。

