// 添加一个网页小图标
<link rel="shortcut icon" href="img/icon.png">
// 添加一个放置在 apple 设备主屏幕上的快捷图标
<link rel="apple-touch-icon" href="img/apple-icon.png">
// 添加一个放置在 android 设备主屏幕上的快捷图标
<link rel="apple-touch-icon-precomposed" href="img/apple-icon.png">

判断用户是否是“将网页添加到主屏后，再从主屏幕打开这个网页”的
navigator.standalone; //IOS中浏览器直接访问站点时，navigator.standalone为false。从主屏启动webapp时，navigator.standalone为true。

我们需要记住所有非视网膜屏的 iPhone-因子设备无法使用 iOS 7 。如果我们没提供新的图标尺寸，设备还会用 iOS 6 相关的图标。如果我们想覆盖所有可能的 iOS 图标，使用下面的代码：
<!-- 非视网膜 iPhone 低于 iOS 7 -->
<link rel="apple-touch-icon" href="icon57.png" sizes="57x57">
<!-- 非视网膜 iPad 低于 iOS 7 -->
<link rel="apple-touch-icon" href="icon72.png" sizes="72x72">
<!-- 非视网膜 iPad iOS 7 -->
<link rel="apple-touch-icon" href="icon76.png" sizes="76x76">
<!-- 视网膜 iPhone 低于 iOS 7 -->
<link rel="apple-touch-icon" href="icon114.png" sizes="114x114">
<!-- 视网膜 iPhone iOS 7 -->
<link rel="apple-touch-icon" href="icon120.png" sizes="120x120">
<!-- 视网膜 iPad 低于 iOS 7 -->
<link rel="apple-touch-icon" href="icon144.png" sizes="144x144">
<!-- 视网膜 iPad iOS 7 -->
<link rel="apple-touch-icon" href="icon152.png" sizes="152x152">

为WebApp设置启动图
// 以下分别为 iphone6 与 iphone6 plus 适配的启动图
<link rel="apple-touch-startup-image" href="launch6.png" media="(device-width: 375px)"> 
<link rel="apple-touch-startup-image" href="launch6plus.png" media="(device-width: 414px)"> 

可以让该网页在 iOS 桌面直接打开时全屏显示（IOS9中似乎已经失效）
<meta name="apple-touch-fullscreen" content="yes" />



* Google Chrome ，iOS Safari 不再支持 datetime 的 input 类型 ，它将退化成 text 。
这个类型将被标准废弃，标准赞成使用两个 input ， date 和 time 达到同样的目的。
问题是 datetime 兼容 iOS 5.0 至 iOS 6.1 ；如果使用它要多加小心！



* 无缝 iframe
在 iOS 7 上，新的布尔属性 seamless 用于创建无边界的 iframe 。iframe 将没有滚动条，默认情况，它会取到内部内容的高度，作为 DOM 中其它块级元素的使用空间。
<iframe seamless src="mypage.html"></iframe>



* 屏蔽移动设备页面的一些默认行为
告诉设备是否将页面中的电话号码显示为拨号的超链接，默认为 yes。
<meta name="format-detection" content="telephone=no" />
告诉设备是否将页面中的电子邮箱显示为邮箱的超链接，默认为 yes。
<meta name="format-detection" content="email=no" />
告诉设备是否允许页面链接跳转到地图应用，默认为 yes。
<meta name="format-detection" content="adress=no" />

将它们写在一起
<meta name="format-detection" content="telephone=no, email=no, date=no, address=no">



* 隐藏工具条，使页面看起来更像应用（不幸的是 IOS 8 中被删除）
iOS 7.1的Safari为meta标签新增minimal-ui属性，在网页加载时隐藏地址栏与导航栏
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui" />

另外，当设定 width=device-width 时，Chrome,Opera和UC9浏览器会取消click的300ms延迟。
当设定 initial-scale=1,minimum-scale=1,maximum-scale=1 时，UC9和海豚浏览器会取消click的300ms延迟。
当设定 user-scalable=no 时，Chrome,Opera,黑莓,和Firefox Android浏览器会取消click的300ms延迟。




* 网页添加到主屏幕后的增强体验设置
<!-- android -->
<meta name="mobile-web-app-capable" content="yes" /><!-- 隐藏工具栏和菜单栏 -->
<!-- IOS（IOS9又重新支持） -->
<meta name="apple-mobile-web-app-capable" content="yes" /><!-- 隐藏工具栏和菜单栏 -->
<meta name="apple-mobile-web-app-title" content="My App" /><!-- 在主屏幕上的标题 -->
<!-- 设置状态栏（显示电量的那个黑条）样式为全透明，且不在占据屏幕位置，即和页面重叠 -->
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />



* 打开IE清晰字体
在IE-based浏览器可以打开清晰字体,文本的小屏幕上你的手机应用程序看起来更好。
<meta http-equiv="cleartype" content="on">



* 禁止用户选择，以及禁止长按菜单

CSS样式：
user-select: none;
-{prefix}-user-select: none;
-webkit-touch-callout: none;

Javascript代码：
在Android上,阻止菜单的显示:
if(navigator.userAgent.match(/Android/i)) {
	noContextMenu.addEventListener('contextmenu', function (e) { e.preventDefault() })
}



* 如何去除iOS和Android中的输入URL的控件条
我们可以利用一句简单的javascript代码来实现这个效果
setTimeout(scrollTo,0,0,0);
请注意，这句代码必须放在window.onload里才能够正常的工作，而且你的当前文档的内容高度必须是高于窗口的高度时，这句代码才能有效的执行。
（目前在IOS8上测试没有效果了）



* 如何检测用户是通过主屏启动你的webapp
window对像中的navigator子对象的一个standalone属性。
iOS中浏览器直接访问站点时，navigator.standalone为false
从主屏启动webapp时，navigator.standalone为true
我们可以通过navigator.standalone这个属性获知用户当前是否是从主屏访问我们的webapp的。
在Android中从来没有添加到主屏这回事！



* 如何关闭iOS中键盘自动大写和自动修正
我们知道在iOS中，当虚拟键盘弹出时，默认情况下键盘是开启首字母大写的功能的，根据某些业务场景，可能我们需要关闭这个功能
移动版本webkit为input元素提供了autocapitalize属性，通过指定autocapitalize="off"来关闭键盘默认首字母大写。
同时英文输入法有一个自动修正错误单词的功能，可以通过指定autocorrect="off"来关闭英文输入法的自动修正



* iOS中如何获取滚动条的值
桌面浏览器中想要获取滚动条的值是通过document.scrollTop和document.scrollLeft得到的
但在iOS中你会发现这两个属性是未定义的，为什么呢？因为在iOS中没有滚动条的概念
在Android中通过这两个属性可以正常获取到滚动条的值
那么在iOS中我们该如何获 取滚动条的值呢？
通过window.scrollY和window.scrollX我们可以得到当前窗口的y轴和x轴滚动条的值。



* iOS广告条Smart App Banner 
如果你的网站同时提供的有app在itunes app store，可以通过一个简单的meta标签来提示用户，让用户下载安装你的native app(或者是hybrid app)：

<meta name="apple-itunes-app" content="app-id=xxx">

也支持itunes affiliate program（推广联盟）：

<meta name="apple-itunes-app" content="app-id=9999999, app-argument=xxxxxx">
<meta name="apple-itunes-app" content="app-id=9999999, app-argument=xxxxxx, affiliate-data=partnerId=99&siteID=XXXX">

需要注意的是，app banner占位为156px的高度——高分屏为312px。 



* Andriod 上去掉语音输入按钮
input::-webkit-input-speech-button {display: none}



* 清除点击高亮
当你点击一个链接或者通过Javascript定义的可点击元素的时候，它就会出现一个半透明的灰色背景

IOS设备中需要用样式来设置清除：
-webkit-tap-highlight-color: rgba(0, 0, 0, 0);

而Windows手机上需要用 meta 声明来清除：
<meta name="msapplication-tap-highlight" content="no" />




* 常见问题

1、Android 有些版本（例如4.2.2）不支持 CSS3 选择器中的 nth-child(n) 这种写法，请使用 nth-child(1n) 代替

2、Android 浏览器不支持 CSS3 选择器中的 :checked 与 ~ 相连的写法
虽然 Android 浏览器支持 :checked，同时也支持 ~，但是两者写在一起时却不能识别
解决方法：可以的话，请使用 :checked + * 代替

3、三星手机会无视 <meta name="format-detection" content="telephone=no" /> 标签的声明，将电话号码转化成 <a> 标签，所以在书写样式时需要注意

4、IOS设备上某些的CSS伪类无效，比如":active"。这可能是一个bug。这时只要给body添加一个空的touch事件即可解决该问题，如：<body ontouchstart>

5、在IOS中，当非label绑定表单元素触发的click事件冒泡到label层时，label都会使自己绑定的表单元素单独再触发一次click事件

6、某些Android浏览器下，如果元素设置了圆角，并且该元素内没有文本节点，则这个圆角会产生锯齿，圆形边框最为明显

7、某些Android浏览器下，如果在touchend事件中执行了 e.preventDefault(); 那么，当点击设置了readonly的文本框元素时，仍然会呼出系统自带的虚拟键盘

8、某些Android微信浏览器下，如果为一个宽度或者高度auto的元素设置了overflow: auto，当该元素内有文本框元素获得焦点，并弹出虚拟键盘，这时候如果该元素内容溢出，则可能导致滚动条出不来，且页面严重卡顿

9、在移动设备上为CSS属相赋值时要避免使用“1.1368683772161603e-13”这一类过长的数值，否则会产生未知的BUG

10、在移动设备上，尤其是Android设备，当为一个元素重置了宽高时，该元素的offsetWidth/offsetHeight并不会立即更新，导致相关的js程序出现错误，因此需要手动将元素重新add进父节点，迫使浏览器强制更新元素的宽高。

11、在IOS中，虚拟键盘左上方有一对左右切换箭头，其可以在页面中所有输入框元素间进行正反向切换。
但是单页面 webApp 中，正向切换会导致本不应该出现的页面被切换出来。
为了禁止它，必须需要按文档结构的顺序从第一个input开始，依次设置 tabindex 为 -1、-2、-3...来禁止正向切换。
虽然反向切换依然有效，但是不会导致本不应该出现的页面被切换出来。

12、在Android浏览器下，容器设置圆角并 overflow: hidden 时，子元素无法被裁剪成圆角，而当为容器设置一个边框时，该bug消失。

13、在有些Android浏览器下，如果一个定位容器的高度为0，而padding-top/bottom有值，此时绝对定位的子元素高度为100%时，其实际高度仍为0。因此如果需要子元素的高度填满容器，则需要设置 height: auto; top: 0; bottom: 0;

14、Android 原生浏览器的 touchmove 只会执行1次，这导致很多问题。解决它的方案是在事件回调中执行 e.preventDefault(); 但这也会导致其他一些浏览器行为上的问题

