* inline 元素（包括 inline-block 元素）之间会存在“4px”的空白间距(IE6-7没有该问题)。

如果行内元素间在文档中是换行书写：
<span>第一个</span>
<span>第二个</span>
<span>第三个</span>
那么浏览器解析时是会把换行符也算作一个 text 文本节点元素。时间上间隙就是由该文本节点产生。

解决方法：
1、将父容器 font-size 设置为 0，再将子元素的 font-size 设置为需要的字体大小。
2、设置 margin-left 负值。
3、改变HTML结构，将行内元素首尾相连书写。
4、只要能解决掉该文本节点的方法都可以...



* inline-block 元素，在父容器高度为 auto 时，会使父容器高度多出至少 3px。

该 bug 只有在 inline-block 元素以及其后代元素中未包含任何文本节点时才会触发。
尤其在制作 banner 横幅这种不包含文本节点的布局中最为常见。
经过计算，字体大小从 12px 开始，平均每增加 4.3px，父容器多出的高度就会在 3px 的基础上多增加 1px。

解决方法：
1、将父容器 font-size 设置为 0，再将子元素的 font-size 设置为需要的字体大小。
2、将父容器 line-height 设置为 0，再将子元素的 line-height 设置为需要大小。
3、可以的话，将该子元素设置成 display:block;

另外，当 body 设置为 inline-block 元素时，如果高度设置为 100%，整个窗口仍然会出现滚动条。
即使设置了 overflow: hidden; 也仅仅是隐藏了滚动条，而页面仍然可以滚动几像素。

解决方法：目前没有办法解决该 bug，所以不要设置 body 为 inline-block 元素！


* 火狐浏览器下按钮元素的默认 height 会比 font-size 大 2px，默认 width 会比 font-size 大 6px。

这是由于火狐浏览器为按钮元素内置了 padding 和 border，而这两个属性并不是通常的 padding 和 border，不能通过直接设置这两个属性来消除。

解决方法：
利用火狐的内置伪类来设置它们
button::-moz-focus-inner,
input::-moz-focus-inner {
	padding: 0;
	border: 0;
}



* webkit 浏览器下所有表单元素都有默认的 margin:2px

解决方法：手动设置 margin 值为 0。




* 360 浏览器下 <body> 中最后一个子元素的 margin-bottom 无效

解决方法：
1、如果可以的话，使用 padding-bottom 代替。
2、为 <body> 添加一个 :after 伪元素，且该伪元素的高度不能为零。




* webkit 浏览器在特定情况下，父元素宽度自动时，不会跟随子元素的宽度进行调整的 BUG。
父元素首先必须为行内块元素、浮动元素或者绝对定位元素的其中一种；
当子元素为 <img>，其的高度为 100%，宽度为 auto，那么如果父元素的高度也为百分比；
当窗口调整时，<img> 的宽度会随父元素的高度变化而等比例调整，但此时父元素的宽度缺不会被 <img> 的宽度影响

解决方法：只能利用 js，获取 <img> 宽度，然后为父元素设置相等的宽度

代码样例
// 元素宽度与子图片宽度都为auto，且元素高度与子图片高度都为百分比时，元素宽度不会根据子图片的宽度变化而变化，因此这里需要特殊处理
if ($elem.css("overflow") == "visible") { //只有设置了溢出显示的元素，才可能宽高不等于实际显示的宽高
	var cssW = $elem.config.style["width"],
		cssH = $elem.config.style["height"];
				
	var $img = $elem.children("img");
	if ($img.length) {
		// 获取子图片的样式宽高值
		$elem.hide();
		var imgCssW = $img.css("width"),
			imgCssH = $img.css("height");
		$elem.show();
	}
				
	if (!this._isPercent(cssW)) { //元素宽度不为百分比时，那么就可能为 auto
		// 如果子图片的宽度不为百分比，则绝对为 auto，此时需要将元素宽度置为零，以便获取正确的 scrollWidth
		// 否则获取到的 scrollWidth 可能大于实际子图片的宽度
		if ($img.length && !this._isPercent(imgCssW)) $elem.width(0);
		var sw = $elem[0].scrollWidth;

		// 如果样式宽度不等于滑动区域宽度，只可能为两种情况
		// 1、上面提到的元素宽度不会根据子图片宽度变化的bug
		// 2、子元素为绝对定位，则该元素无法根据子元素的宽度定宽
		if (cssW != sw) $elem.width(sw); // 在这里重新设置元素宽度等于滑动区域宽度
	}
	if (!this._isPercent(cssH)) { //高度同理
		if ($img.length && !this._isPercent(imgCssH)) $elem.height(0);
		var sh = $elem[0].scrollHeight;
		if (cssH != sh) $elem.height(sh);
	}
}



* 两栏自适应的浮动方法中
自适应栏中某个元素（包括伪元素）如果使用的清除浮动，将会导致其和后面的元素折行到与固定栏底部平行的位置，导致整个父元素被撑开
这可能是一个bug，因此需要设置自适应栏不与浮动固定栏重叠
解决方法：
1、清除浮动元素的容器是否为block或者inline-block元素，如果是inline元素，将其设置成inline-block即可
2、为清除浮动元素的容器设置 overflow: hidden;



* 在容器设置圆角的情况下，overflow: hidden 隐藏圆角部分失效的bug
主要原因是，子元素设置了opacity不等于0或1，或者子元素为非 position: static 的定位元素时，此bug就会出现
但是超出容器矩形范围的其它部分仍然可以正常的被隐藏
解决方法：暂时没有较好的解决方案，如果可以的话，尽量在子元素上来设置圆角，而不是用圆角容器来裁剪它



* 父容器的 transform 属性，会使子元素的 position: fixed; 失效
原因：不明
解决方法：不明






