print_r($arr); // 打印数组

htmlentities(html); // 返回不被浏览器解析的html源代码

count($arr); // 获取数组长度

strlen($str); // 获取字符串长度

// 查询字符串位置，返回第一次出现位置的索引，未找到则返回空
strpos(string, find, start); // 查找字符串在另一字符串中第一次出现的位置索引（区分大小写）
stripos(string, find, start); // 查找字符串在另一字符串中第一次出现的位置索引（不区分大小写）
strrpos(string, find, start); // 查找字符串在另一字符串中最后一次出现的位置索引（区分大小写）
strripos(string, find, start); // 查找字符串在另一字符串中最后一次出现的位置索引（不区分大小写）
string 表示源字符串
find 表示要查找的字符串
start 表示查找的起始索引

// 查询字符串位置，返回查找的字符串第一次出现之后的字符串部分（包括自身），未找到则返回空
strstr(string, search, before_search); // 区分大小写
stristr(string, search, before_search); // 不区分大小写
string 表示源字符串
search 表示要查找的字符串
before_search 可选。默认值为 "false" 的布尔值。如果设置为 "true"，它将返回 search 参数第一次出现之前的字符串部分。

// 字符串替换
str_replace(find, replace, string, count); // 区分大小写
str_ireplace(find, replace, string, count); // 不区分大小写
find 表示被替换掉的字符串
replace 表示将要替换上去的字符串
string 表示源字符串
count 可选。放入一个变量，用于记录替换次数
// 同时替换方法的3个参数也接受数组参数，如果参数为数组，则会按照3个参数数组中值的顺序进行对应替换

preg_replace(preg, replace, string, limit, count); // 正则替换
preg 表示一个正则表达式
limit 进行替换的最大次数。默认是 -1(无限)

// 字符串的截取
substr(string, start, length);
string 表示源字符串
start 表示截取的起始索引
	正数 - 在字符串的指定位置开始
	负数 - 在从字符串结尾开始的指定位置开始
	0 - 在字符串中的第一个字符处开始
length 可选。规定被返回字符串的长度。默认是直到字符串的结尾。
	正数 - 从 start 参数所在的位置返回的长度
	负数 - 从字符串末端返回的长度

substr_replace(string, replacement, start, length); // 截取替换字符串指定索引位置之后的字符串
string 表示源字符串
replacement 表示将要替换上去的字符串
start 表示截取替换的起始索引
	正数 - 在字符串中的指定位置开始替换
	负数 - 在从字符串结尾的指定位置开始替换
	0 - 在字符串中的第一个字符处开始替换
length 可选。规定要替换多少个字符。默认是与字符串长度相同。
	正数 - 被替换的字符串长度
	负数 - 表示待替换的子字符串结尾处距离 string 末端的字符个数。
	0 - 插入而非替换

// 将字符串以指定字符分割成数组，相当于js中的split()
explode(separator, string, limit);
separator 表示分割字符
string 表示源字符串
limit 可选。用于限制返回数组元素的长度

// 将数组通过指定的字符连接成字符串，相当于js中的join()
join(separator, array);
implode(separator, array);
separator 表示连接字符

// 去除字符串两端空格
trim(" 空格 "); // 去除一个字符串两端空格
rtrim("空格 "); // 去除一个字符串右部空格， 
ltrim(" 空格"); // 去除一个字符串左部空格。



// php编解码
urlencode($url); // 返回编码后的结果
urldecode($url); // 返回解码后的结果 


// 遍历对象
foreach ($_G as $value) {
	echo "<br>".$value;
}

foreach ($_G as $key => $value) {
	echo "<br>".$key." => ".$value;
}

// 删除数组中的键值对
unset($array[1]);


// 根据数组中对象的属性值排序，并返回排好序的新数组
// $up 表示是否由小到大排序
function propertySort($arr, $prop, $up = false) {
	global $property, $smallToBig;
	$property = $prop;
	$smallToBig = $up;
	usort($arr, function($a, $b) {
		global $property, $smallToBig;
		$a_value = $a[$property];
		$b_value = $b[$property];
		return ($smallToBig) ? $a_value - $b_value : $b_value - $a_value;
	});
	return $arr;
}

// 在数组第一位插入元素
array_unshift($array, 要插入的元素);



// php输出一个文件（必须有写入权限）
file_put_contents('/var/www/html/vrwanjia/1.txt', $post['message']);




