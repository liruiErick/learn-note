* jQuery 常用函数（所有函数所返回的集合都是 jQuery 对象）

！注意，jQuery对象包含多少个DOM元素，则动画结束后的回调将会被执行多少次，即每个元素动画结束都将调用一次回调

// 隐藏/显示函数，可以设定如下两个参数：
// duration  可选参数，规定 hide/show 效果的持续时间，默认是 "0"。可能的值：毫秒（比如 1500）、"slow"(600)、"normal"、"fast"(200)。
// easing  可选参数，规定动画的缓动效果，必须设置 duration 后才会有效果，内置只有 "swing"、"linear" 两种类型，默认为 "swing"。
// callback  可选参数，当方法完成时执行的函数。

.hide(duration, easing, callback); //隐藏
.show(duration, easing, callback); //显示
.toggle(duration, easing, callback); //切换隐藏与显示

.fadeIn(duration, easing, callback); //淡入
.fadeOut(duration, easing, callback); //淡出
.fadeToggle(duration, easing, callback); //切换淡入与淡出
.fadeTo(duration, opacity, easing, callback); //渐变到指定的不透明度（duration 和 opacity 为必需参数）

.slideDown(duration, easing, callback); //滑下（显示）
.slideUp(duration, easing, callback); //滑上（隐藏）
.slideToggle(duration, easing, callback); //切换滑下与滑上



// 动画函数
.animate({styles}, duration, easing, callback);
// 默认地，所有 HTML 元素都有一个静态位置，且无法移动。
// 如需对位置进行操作，要记得首先把元素的 CSS position 属性设置为 relative、fixed 或 absolute！
// styles  参数是必需的，定义形成动画的 CSS 属性键值对集合，键是 CSS 属性名的字符串形式，也可以是js版本（驼峰命名法）的 CSS 属性或 DOM 元素的可写属性。
// duration  可选参数，规定动画效果的持续时间，默认是 "400"。可能的值：毫秒（比如 1500）、"slow"(600)、"normal"、"fast"(200)。
// easing  可选参数，规定动画的缓动效果，必须设置 duration 后才会有效果，内置只有 "swing"、"linear" 两种类型，默认为 "swing"。
// callback  可选参数，当方法完成时执行的函数。
// 例如：
$("div").animate({
	'margin-left':'250px',
	'opacity':'0.5',
});
// 可以使用相对值，例如：
$("div").animate({
	marginLeft:'+=250px',
	opacity:'0.5',
});
// 甚至可以把属性的动画值设置为 "show"、"hide" 或 "toggle"，例如：
$("div").animate({
	height:'toggle'
});
// 先后定义多个动画函数，可形成队列动画，即第一个执行完接着执行第二个，例如：
$("div").slideDown("slow");
$("div").animate({left:'100px'},"slow");
$("div").animate({fontSize:'3em'},"slow");
$("div").slideUp("slow");

// 高级用法
.animate({styles}, options);
// options参数如下：
duration  动画效果的持续时间
easing  动画的缓动效果
queue  是否加入正常动画队列，默认为true。如果为flase，则动画立即开始。也可以设置一个动画队列的字符串名称，设置了名称的动画队列必须先调用.dequeue("queuename")才可以执行
specialEasing  一个对象包含一个或多个CSS属性定义的属性参数和相应的缓动函数或名称
start 动画开始前的回调函数 Function( Promise animation )
step  每一步动画的回调函数 Function( Number now, Tween tween )
progress  每一步动画的回调函数 Function( Promise animation, Number progress, Number remainingMs )
complete  动画完成后的回调函数 Function()
done  动画完成后的回调函数 Function( Promise animation, Boolean jumpedToEnd )
fail  动画失败时的回调函数 Function( Promise animation, Boolean jumpedToEnd )
always  动画完成后或停止没有完成的回调函数 Function( Promise animation, Boolean jumpedToEnd )




// 延时函数
.delay(duration[, queueName]);
// duration 表示要延迟的毫秒数
// queueName 可选参数，表示将要延迟动画队列的名称。
// 使用延时函数来延时动画的执行，例如：
$("div").slideDown("slow").delay(3000).slideUp("slow");
$("div").delay(3000).animate({left:'100px'},"slow");
//注意，延迟只对带有动画效果的函数有效，不带参数的 .show() 或者 .hide()不会延迟，因为他们没有使用效果队列



// 停止函数
.stop( [clearQueue] [, jumpToEnd] )
.stop( [queueName] [, clearQueue ] [, jumpToEnd] )
// 默认地，stop() 会清除在被选元素上当前的所有动画（包括不在同一队列中的并行动画），如果队列中还有其他动画，则立即执行下一个动画。
// 注意，.stop()对.queue()无效，但是.stop(true)却能清除掉.queue()队列，导致.queue()中的函数不执行
// queueName  将要停止动画队列的名称。
// clearQueue  可选，参数规定是否应该清除动画队列里的全部动画。默认是 false。
// jumpToEnd  可选，参数规定是否立即完成当前动画。默认是 false。
如果用到 jQuery.delay().animate(callback) 制作动画，当响应用户事件时需要停止动画，并要阻止callback函数执行时需要注意：
在animate执行之前，即delay的过程中，调用 .stop(true)，delay似乎并没有被清除，如果再次设置延迟动画时，delay可能会从上次清除的位置继续？
如果需要保证在delay的过程中完全停止动画队列，则必须连续调用两次不带参数的 .stop().stop()。



// 完成函数
.finish(); //动画立即停止，并将动画队列中的所有属性值跳转到目标值
// .finish()会清除掉.queue()队列，导致.queue()中的函数不执行
// .finish()方法和.stop(true, true)很相似。
// .stop(true, true)将清除队列，并且当前的动画跳转到其最终值。但是动画队列中只有最后一个动画的完成回调会执行
// .finish() 会使所有排队的动画的CSS属性跳转到他们的最终值。而且所有的动画队列都会执行自己的完成回调。（注意，这里.queue()插入的函数不会执行）

// 案例：
.delay(2000)
.queue(function(next){ next();console.log(111)})
.animate({top: 100}, 5000,function(){ console.log(222)});
// 如果需要立即停止队列，并输出“111”和“222”
// 这时finish()是无效的，因为它只能让输出“222”
// 而.stop().stop(true,true)可以得到我们想要的结果
// 原理是因为.queue()无法被.stop()终止，在第一个.stop()终止掉延时后，.queue()瞬间执行，第二的.stop(true,true)正好作用于.animate()



// 队列函数
.queue();
// 第一个参数可以设置一个动画队列的名称，默认为"fx"。如果使用默认动画名称，则第一个参数可以省略
// 下一个参数为一个函数或者函数组成的数组
// 当这个参数为一个函数时，那么这个函数将被插入到函数队列中，函数执行完后，才会继续执行后面的动画
// 当这个参数为一个函数组成的数组时，那么这个函数数组将会替换掉当前对象的函数队列，成为新的函数队列
// 有一点值得注意，.finish()方法和.stop(true, true)并不会执行队列函数.queue()中的函数
$("div").slideDown("slow");
$("div").queue(function(){
	// 执行的语句...
	$(this).dequeue(); // 该方法用于在函数执行完后，让队列继续执行下面动画。如果没有该方法，队列将会在这里停止运行。默认值为"fx"。
});
$("div").slideUp("slow");

// 从jQuery 1.4开始，$(this).dequeue()可以被.queue(function(next){})中的一个默认参数next()代替，例如：
$("div").queue(function(next) {
    // 执行的语句...
    next();
});

// 如果参数为"fx"（默认动画名称），则返回当前 jQuery 对象上还未执行的函数队列对象（对象为一个数组）
$("div").queue("fx"); //参数可以为空，实际上默认值就是 "fx"，表示标准的效果序列。
$("div").queue("fx").length; //返回队列中为执行函数的个数（包括正在执行的函数）
// 删除当前 jQuery 对象上还未执行的函数队列
$("div").clearQueue("fx"); //参数可以为空，实际上默认值就是 "fx"，表示标准的效果序列。
// 也可以通过设置一个空的队列数组来达到删除剩余队列的目的
$("div").queue("fx", []);

// 使用静态方法来设置queue队列，可以省去创建 jQuery 对象的步骤
$.queue(element [,queueName]); //显示在匹配的元素上的已经执行的函数列队
$.queue(element, queueName [,queueName | callback]); //操作匹配元素上将要执行的函数队列
// newQueue  一个替换当前函数列队内容的数组
// callback  添加到列队的新函数




// 隐藏显示、淡入淡出、自定义动画等效果的控制
// 禁用或启用动画效果
$.fx.off = true; // 禁用动画，所有动画没有过度，直接显示结果。效果和 finish() 相同。
// 设置动画的帧频率，默认为13毫秒
$.fx.interval = 每帧的毫秒数




// 给 callback 函数传参
// 在给 callback 参数传入一个原型方法时，出现了一个问题，例如：
function People(name, age){
	this.name=name;
	this.age=age;
}
People.prototype.say = function(){
	console.log("我的名字叫："+this.name+"，\n我今年"+this.age+"岁。");
};
var man = new People("小白", 28);
// 这里使用 man 对象的 say() 方法作为动画结束时执行的函数
$("div").animate({left:'100px'},"slow",man.say);
// 当动画结束时，man.say() 方法中的 this 不是该原型的实例 man，而是调用者的 DOM 对象 <div>，输出将会报错。

// 为了解决这个问题，用下列格式给 callback 函数传参
// 该函数将 say() 方法的持有者 man 传递给返回函数，该函数的返回函数作为结束动画时的运行函数
$("div").animate({left:'100px'},"slow",
	(function(self){
		return function(){ self.say(); }
	})(man)
);





* jQuery Easing 缓动函数扩展

// 新增以下缓动函数：
def			swing
easeInSine		easeOutSine		easeInOutSine
easeInQuad		easeOutQuad		easeInOutQuad
easeInCubic		easeOutCubic		easeInOutCubic
easeInQuart		easeOutQuart 		easeInOutQuart
easeInQuint		easeOutQuint		easeInOutQuint
easeInExpo		easeOutExpo		easeInOutExpo
easeInCirc		easeOutCirc		easeInOutCirc
easeInElastic		easeOutElastic		easeInOutElastic
easeInBack		easeOutBack		easeInOutBack
easeInBounce		easeOutBounce		easeInOutBounce

Sine ~ Expo：依次按缓动变速的幅度由小到大的顺序排列
In：是指动画开始的时候具有这个效果（先慢后快）
Out：是指动画结束的时候具有这个效果（先快后慢）
InOut：是指动画开始和结束的时候都具有这个效果（先慢中快后慢）
Elastic：弹簧效果
Back：折返效果
Bounce：碰撞反弹效果
def：目前来看没有实际作用，没有动画效果，而且会使动画队列停止不前，如同调用了 queue(function(){})，而没有调用 dequeue()。

用法一：
$(element).slideUp(1000,easing,callback);
用法二：
$(element).slideUp({
	duration:1000,
	easing:method,
	complete:callback
});
用法三：
$(element).animate({
	width:200,
	height:200
},{
	duration:1000,
	easing:method,
	complete:callback
});

// 如果你使用 jQuery 1.4 以上的版本，还可以这样：
$(element).animate({ 
    width:[200,"easeInOutBack"], 
    height:[200,"easeOutBack"] 
},1000); 

// 覆盖 jQuery 的 easing 默认值 "swing"（实际上是改变了"swing"值所指向的缓动函数，默认值依然是"swing"）
$.easing.def="扩展函数名称字符串";





* jQuery Color animation 色彩动画扩展

// jQuery 的动画方法（animate）支持各种属性的过渡，但是默认并不支持色彩的过渡，该插件正是来补足这一点！
PS: 该插件支持 RGBA 颜色的过渡，但是请注意，IE8以下的版本不支持 RGBA 颜色。
// 支持以下属性：
color
backgroundColor
borderColor
borderBottomColor
borderLeftColor
borderRightColor
borderTopColor
outlineColor

