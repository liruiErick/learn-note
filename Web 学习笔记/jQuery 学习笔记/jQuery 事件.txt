* jQuery 通用事件函数（1.7以上版本）

// 新的添加事件函数，可以实现 .bind()、.delegate() 和 .live() 的全部功能
.on(events[, selector][, data], handler(eventObject));
// events  必需参数，一个或多个空格分隔的事件类型和可选的命名空间，或仅仅是命名空间，比如"click", "keydown.myPlugin", 或者 ".myPlugin"。
//		或者为一个对象，键是由一个或多个由空格分隔的事件类型及可选的名字空间字符串，值是这些事件类型所对应的事件处理函数（handler(eventObject)参数将可以省略）。
// selector  可选参数，一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 null 或者忽略了该选择器，那么被选中的元素总是能触发事件。
// data  可选参数，一个对象，它包含的数据键值对将被传递给事件处理程序的 event.data。
// handler(eventObject)  必需参数（如果 events 是一个对象，则此参数省略），每次事件触发时会执行的函数，如果该函数仅仅是返回 flase，则可以直接将 false 作为参数代替。

使用方法一：
$("div").on("click", {name: "bjj"}, function(e){alert(e.data.name)})
使用方法二：
$("div").on({
  "click": function(){},
  "mouseenter": function(){},
  "mouseleave": function(){}
});

// 替代 bind() 向当前匹配元素添加一个或多个事件处理器
$("div").on("click mouseout",function(){});
// 替代 delegate() 向匹配元素的当前或未来的子元素添加一个或多个事件处理器
$("div").on("click mouseout","p",function(){});
// 替代 live() 为当前或未来的匹配元素添加一个或多个事件处理器
$("p").parent().on("click mouseout","p",function(){});

// 新的移除事件函数，参数定义与 .on() 基本相同，可以移除用 .on() 绑定的事件处理程序
.off(events[, selector][, handler(eventObject)]);
// 可以通过提供组合的事件名，名字空间，选择器或处理函数来移除绑定在元素上指定的事件处理函数。
// 当有多个过滤参数时，只有与这些参数完全匹配的事件处理函数才会被移除。因此 handler 必须是添加事件时监听函数的引用，如果是匿名函数，则无法移除任何事件。

// 注意，当对一个对象注册了多个相同事件类型的事件监听函数时，如果该函数是在 prototype 中定义的原型方法，那么等同于注册了同一个监听函数。
// 此时，即使使用 $.proxy 来对监听函数进行包装，但 off 仍然会一次移除掉所有监听函数，因为jQuery可能给它们指定了共同的事件ID。
// 解决这个问题最好的方法是在每一次注册事件时，为事件类型指定各自的命名空间，例如 "touchstart.1"、"touchstart.2"、"touchstart.3"...

使用方法一：
$("p").off(); //移除所有段落上的全部事件
使用方法二：
$("p").off("click"); //移除所有段落上的 click 事件
使用方法三：
$("form").on("click.bjj", "button", function(){});
$("form").on("keypress.bjj", "input[type='text']", function(){});
$("form").off(".bjj"); //移除所有指定名字空间的代理事件


// 检查元素是否绑定了指定的事件，jQuery 本身没有提供该接口，因此可以使用一个它的私有接口来实现
$._data(elem,"events"); // elem 是一个 DOM 对象
返回值：一个Object，包含了所有已注册的事件对象，可以用for in来遍历。或者undefined。

$._data(elem,"events")[type]; // type 是事件类型。
例如：
$._data($a[0],"events")["click"]; //返回 click 的事件对象，包含所有已注册的 click 事件监听




* jQuery 常用事件函数（与js事件基本相同）

// 使用方法：
$(selector).事件函数([eventData], handler(eventObject));
// eventData  可选参数，一个对象，它包含的数据键值对将被传递给事件处理程序。
// handler(eventObject)  必须参数，每次事件触发时会执行的函数。


.hover(handlerIn(e)[, handlerOut(e)]); //绑定鼠标移入和移出事件处理函数
// 当鼠标移入时执行第一个函数。当鼠标移出时，如果有第二个函数，则执行第二个函数，否则再执行一次第一个函数


.toggle(); //绑定两个或多个事件处理函数，当发生 click 事件时轮流执行。
用法一：$(selector).toggle(function1(),function2(),functionN(),...);
$("button").toggle(function(){
    $("body").css("background-color","green");},
    function(){
    $("body").css("background-color","red");},
    function(){
    $("body").css("background-color","yellow");}
);
用法二：$(selector).toggle(speed,callback); //切换隐藏与显示
speed  可选。规定 hide/show 效果的速度，默认是 "0"。可能的值：毫秒（比如 1500）、"slow"、"normal"、"fast"。
callback  可选。当 toggle() 方法完成时执行的函数。


.trigger(); //使所有匹配的元素派发自定义事件
用法一：$(selector).trigger(event[, param]);
// 第二个参数将作为事件处理函数的第二个参数被传入
// 如果参数是一个数组，则该数组的值将依次作为事件处理函数的参数被传入，就好像 apply(this, [arg1, arg2, arg3])
$("div").trigger("click", data);
用法二：$(selector).trigger(eventObj);
var e = jQuery.Event("click"); //创建一个事件对象
e.user = "foo";
e.pass = "bar";
$("div").trigger(e);
用法三：$(selector).trigger(obj);
$("div").trigger({
	type:"click",
	user:"foo",
	pass:"bar"
});
// 注意！trigger 发送的事件的实现方式并不是使用原生 js 的事件派发机制，原生 js 的事件监听s是无法监听到的。
// 因此只有自身所在的 jQuery 对象创建的实例可以监听到。
// 如果页面中有多个不同作用域的 jQuery 创建的对象，则他们之间无法通多此方法互通事件。
// 这时只能使用原生 js 来派发事件。
var evt = document.createEvent("HTMLEvents");
evt.initEvent('customevent', true, true);
document.dispatchEvent(evt);


.triggerHandler(); //激活第一个被匹配元素的指定事件
与 .trigger() 方法相比的不同之处：
1. 它不会引起事件（比如表单提交）的默认行为
2. .trigger() 会操作 jQuery 对象匹配的所有元素，而 .triggerHandler() 只影响第一个匹配元素。
3. 由 .triggerHandler() 创建的事件不会在 DOM 树中冒泡；如果目标元素不直接处理它们，则不会发生任何事情。
4. 该方法的返回的是事件处理函数的返回值，而不是具有可链性的 jQuery 对象。此外，如果没有处理程序被触发，则这个方法返回 undefined。


.one(); //向匹配元素添加事件处理器。每个元素只能触发一次该处理器。
$("p").one("click",function(){
	$(this).animate({fontSize:"+=6px"});
});

.bind(); //向当前匹配元素添加一个或多个事件处理器
$("button").bind({
    click:function(){$("p").slideToggle();},
    mouseover:function(){$("body").css("background-color","red");},  
    mouseout:function(){$("body").css("background-color","#FFFFFF");}  
});

.delegate(); //向匹配元素的当前或未来的子元素添加一个或多个事件处理器
$("div").delegate("p","click",function(){
	$(this).slideToggle();
});

.live(); //为当前或未来的匹配元素添加一个或多个事件处理器
$("p").live("click",function(){
	$(this).slideToggle();
});

.die(); //移除所有通过 .live() 函数添加的事件处理程序。
.unbind(); //从匹配元素移除一个被添加的事件处理器
.undelegate(); //从匹配元素移除一个被添加的事件处理器，现在或将来

// 以下事件如果不传参直接调用，则会派发对应事件。
.click(); //鼠标单击元素的边框及以内区域时触发该事件
.dblclick(); //鼠标双击元素的边框及以内区域时触发该事件
.mousedown(); //鼠标在元素的边框及以内区域按下时触发该事件
.mouseup(); //鼠标在元素的边框及以内区域弹起时触发该事件
.mousemove(); //鼠标在元素的边框及以内区域移动时触发该事件
.mouseenter(); //鼠标移入元素的边框及以内区域时触发该事件，移入子元素不会触发，相当于AS3的 ROLL_OVER
.mouseleave(); //鼠标移出元素的边框及以内区域时触发该事件，移出子元素不会触发，相当于AS3的 ROLL_OUT
.mouseover(); //鼠标移入元素的边框及以内区域时触发该事件，移入子元素也会触发
.mouseout(); //鼠标移出元素的边框及以内区域时触发该事件，移出子元素也会触发

.keydown(); //某个键盘按键被按下事件
.keyup(); //某个键盘按键被松开事件
.keypress(); //某个键盘按键被单击事件

.ready(); //文档就绪事件（当 HTML 文档就绪可用时）
.load(); //加载完成事件，比如在 <body>/window 上时，如果页面加载完成就会触发该事件（与 ajax 中的 load() 为同一方法，该方法根据传入的参数不同来进行判断）
.unload(); //被卸载事件，比如在 <body>/window 上时，如果关闭页面就会触发该事件
.error(); //在加载文档或图像时发生错误事件
.focus(); //当获得焦点时触发该事件
.blur(); //当失去焦点时触发该事件
.focusin(); //当元素或者其内部的任何子孙元素获得焦点时触发该事件
.focusout(); //当元素或者其内部的任何子孙元素失去焦点时触发该事件
.change(); //改变事件，多用于文本字段，当输入结束时，如果文本字段变更则触发该事件
.resize(); //窗口或框架被重新调整大小事件
.scroll(); //滚动条事件
.select(); //当选取元素时触发该事件
.submit(); //当单击提交按钮时触发该事件



* event 属性
event.pageX; //当事件被触发时，返回鼠标指针相对于文档的垂直坐标。
event.pageY; //当事件被触发时，返回鼠标指针相对于文档的垂直坐标。
event.clientX; //当事件被触发时，返回鼠标指针相对于窗口的水平坐标。
event.clientY; //当事件被触发时，返回鼠标指针相对于窗口的垂直坐标。
event.screenX; //当事件被触发时，返回鼠标指针相对于屏幕的水平坐标。
event.screenY; //当事件被触发时，返回鼠标指针相对于屏幕的垂直坐标。
event.result; //包含由被指定事件触发的事件处理器返回的最后一个值。
event.target; //触发该事件的 DOM 元素。
event.timeStamp; //该属性返回从 1970 年 1 月 1 日到事件发生时的毫秒数。
event.type; //描述事件的类型。
event.which / event.keyCode; //返回按键的键盘码。
event.namespace; //返回该事件的命名空间。
event.originalEvent; //返回 js 原生的事件对象。

* event 方法
event.preventDefault(); //通知浏览器不要执行与事件关联的默认动作（比如在<a>链接的单击事件处理函数中调用，可以阻止链接的跳转动作）
event.stopPropagation(); //阻止事件继续向父节点冒泡，但是仍然可以在同级节点中传播。（jQuery 针对IE6-8做了兼容）
event.stopImmediatePropagation(); //阻止事件继续向父节点以及同级之后的节点冒泡。（jQuery 针对IE6-8做了兼容）
event.isDefaultPrevented(); //返回 event 对象上是否调用了 event.preventDefault()。
event.isStopPropagation(); //返回 event 对象上是否调用了 event.stopPropagation()。
event.isStopImmediatePropagation(); //返回 event 对象上是否调用了 stopImmediatePropagation()。

注意，如果事件处理函数返回值为 false，则相当于同时执行了 event.preventDefault() 和 event.stopPropagation()。



