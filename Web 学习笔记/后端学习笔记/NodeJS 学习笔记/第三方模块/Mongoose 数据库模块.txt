# Mongoose 数据库模块

Mongoose库简而言之就是在node环境中操作MongoDB数据库的一种便捷的封装
使用的话，必须要先安装好环境NodeJS与MongoDB

var Mongoose = require('mongoose');

// 链接本地数据库
var db = mongoose.connect('mongodb://localhost/vrwanjia');

db.connection.on('error', function(error) {
	console.log('数据库连接失败：' + error);
});

db.connection.on('open', function() {
	console.log('数据库连接成功！');
});

// 关闭数据库链接
db.close();

// 创建一个数据模式。（类似于MySQL中创建一个表结构）
var userSchema = new Mongoose.Schema({
    id: Number,
    name: String,
    password: String,
    date: {
        createAt: { // 创建时间
            type: Date,
            default: Date.now()
        },
        updateAt: { // 更新时间
            type: Date,
            default: Date.now()
        }
    }
});

// 数据存储前调用
userSchema.pre('save', function(next) {
    // 这里this指该条数据
    this.date.updateAt = Date.now();
    if (this.isNew) { // 判断数据是否为新创建的
        this.date.createAt = this.date.updateAt;
    }
    next(); // 继续执行存储流程
});

// 为模式添加静态方法
userSchema.statics = {
    fetch: function(cb) { // 获取全部数据
        return this
            .find({})
            .sort('date.updateAt') // 根据更新时间排序
            .exec(cb);
    },
    findById: function(id, cb) { // 查询单挑数据
        return this
            .find({id: id})
            .exec(cb);
    }
}

// 为模式添加实例方法
UserSchema.methods = {
    comparePassword: function(_password, cb) {
        ncrypt.compare(_password, this.password, function(err, isMatch) {
            if (err) return cb(err);
        });
    }
}


// 通过模式编译生成模型
var User = Mongoose.model('User', userSchema);

var data = {
    id: 1,
    name: '史密斯',
    password: '123456'
};

// 使用 User 模式创建的数据，创建一条数据
var user = new User(data);
// 保存这条数据库
user.save(function(err) {
    if (err) {
        console.log('保存失败')
        return;
    }
    console.log('保存成功');
});

// 使用 User 模式，创建一条数据
User.create(data, function(error){
    if(err){
        console.log(err)
        return
    }
    console.log('保存成功')
    // 关闭数据库链接
    db.close();
});

// 使用 User 模式，删除数据
var conditions = { id : 1 };
User.remove(conditions, function(err) {
    if (err) {
        console.log(err)
        return
    }
    console.log('删除成功')
    // 关闭数据库链接
    db.close();
});

// 使用 User 模式，修改数据
var conditions = { id : 1 };
var update     = { $set : { name : '汤姆', password : '654321' }};
var options    = { upsert : true }; // 可选，选项参数
User.update(conditions, update, options, function(err) {
    if(err){
        console.log(err)
        return
    }
    console.log('更新成功')
});

// 使用 User 模式，查寻数据
var conditions = { id : 1 };
var fields     = {title : 1, content : 1, time : 1}; // 可选，待返回的字段
var options    = {}; // 可选，选项参数
User.find(conditions, fields, options, function(err, datas) {
    if (err) {
        console.log(err)
        return
    }
    console.log('所有匹配数据组成的数组' + JSON.stringify(datas))
    // 关闭数据库链接
    db.close();
});















