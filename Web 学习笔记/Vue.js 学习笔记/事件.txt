## 事件绑定

可以用 v-on 指令监听 DOM 事件：
<div id="example">
	<button v-on:click="greet">Greet</button>
</div>

greet 表示在数据定义中定义在 methods 中的一个方法，该方法的第一参数为是原生 DOM 事件的 event 对象

除了直接绑定到一个方法，也可以用内联 JavaScript 语句：
<div id="example-2">
	<button v-on:click="say('hi')">Say Hi</button>
	<!-- 有时也需要在内联语句处理器中访问原生 DOM 事件。可以用特殊变量 $event 把它传入方法 -->
	<button v-on:click="say('what', $event)">Say What</button>
</div>

new Vue({
	el: '#example-2',
	methods: {
		say: function (msg, e) {
			alert(msg, e)
		}
	}
})




## 事件修饰符

在事件处理器中经常需要调用 event.preventDefault() 或 event.stopPropagation()。
尽管我们在方法内可以轻松做到，不过让方法是纯粹的数据逻辑而不处理 DOM 事件细节会更好。

为了解决这个问题，Vue.js 为 v-on 提供两个 事件修饰符：.prevent 与 .stop。你是否还记得修饰符是点号打头的指令后缀？

<!-- 阻止单击事件冒泡 -->
<a v-on:click.stop="doThis"></a>

<!-- 提交事件不再重载页面 -->
<form v-on:submit.prevent="onSubmit"></form>

<!-- 修饰符可以串联 -->
<a v-on:click.stop.prevent="doThat">

<!-- 只有修饰符 -->
<form v-on:submit.prevent></form>

1.0.16 添加了两个额外的修饰符：
<!-- 添加事件侦听器时使用 capture 模式 -->
<div v-on:click.capture="doThis">...</div>

<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->
<div v-on:click.self="doThat">...</div>



## 按键修饰符

在监听键盘事件时，我们经常需要检测 keyCode。Vue.js 允许为 v-on 添加按键修饰符：

<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->
<input v-on:keyup.13="submit">
记住所有的 keyCode 比较困难，Vue.js 为最常用的按键提供别名：

<!-- 同上 -->
<input v-on:keyup.enter="submit">

<!-- 缩写语法 -->
<input @keyup.enter="submit">

全部的按键别名：
enter
tab
delete
esc
space
up
down
left
right

1.0.8+： 支持单字母按键别名。
1.0.17+： 可以自定义按键别名：

// 可以使用 @keyup.f1
Vue.directive('on').keyCodes.f1 = 112



