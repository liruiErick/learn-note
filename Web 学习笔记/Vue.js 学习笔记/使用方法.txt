# 数据定义
var vm = new Vue({
	el: '#example', // 选择器，可以像jquery那样获取元素
	data: {
		name: 'Vue.js'
	},
	// 在 `methods` 对象中定义方法
	methods: {
		greet: function (event) {
			// 方法内 `this` 指向 vm
			alert('Hello ' + this.name + '!')
			// 如果该方法用于绑定一个事件，则 `event` 是原生 DOM 事件
			alert(event.target.tagName)
		}
	},
	computed: {
		// 一个计算属性的 getter
		b: function () {
			// `this` 指向 vm 实例
			return this.a + 1
		}
	}
});

数据创建时所有在 data、methods 下定义的变量和方法都可以直接通过 vm 实例来调用
例如：
vm.name // -> 'Vue.js!'
vm.greet() // -> 'Hello Vue.js!'


# 定义计算属性（即 geter seter）
var vm = new Vue({
	el: '#demo',
	data: {
		firstName: 'Foo',
		lastName: 'Bar'
  	},
	computed: {
    	fullName: {
    		// getter
			get: function () {
				return this.firstName + ' ' + this.lastName
			},
			// setter
			set: function (newValue) {
				var names = newValue.split(' ')
				this.firstName = names[0]
				this.lastName = names[names.length - 1]
			}
		}
	}
	// 如果只有一个 geter，可以简写为
	/*computed: {
		fullName: function () {
			return this.firstName + ' ' + this.lastName
		}
  	}*/
});



# 实例属性

vm.$data // 表示 data 对象
vm.$el // 表示通过 el 属性获取到的 DOM 元素



# 实例方法

// 监听 data 对象中某一个键值的改变
vm.$watch('key', function (newVal, oldVal) {
  // 这个回调将在 vm.$data.key 改变后调用
})

// 为数据模型添加一个属性
vm.$set('b', 2);
// 对应的类方法
Vue.set(data, 'b', 2);
// 注意，只有通过这种方法定义的属性才能 vue 监视到。如果是直接使用 vm.b = 2 的方式添加的属性，是不会被监视到的。

// 数据更新后执行回调
vm.$nextTick(callback);
// 对应的类方法
Vue.nextTick(callback);
// 由于 Vue.js 默认异步更新 DOM。每当观察到数据变化时，Vue 就开始一个队列，将同一事件循环内所有的数据变化缓存起来。
// 因此当数据更新时，DOM 并不会立即更新。因此在一些前端视图代码需要跟随数据更新的场景下，该方法尤为重要。












